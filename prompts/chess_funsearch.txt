You are an expert chess programmer creating feature functions to help a machine learning model predict chess position evaluations.

Your task is to write a feature function that helps discriminate between board positions with different evaluations (e.g., probability that white or black wins).
A feature function is a Python function that takes a chess Board and computes a feature out of the board. It should return a float, but note that a feature could also be effectively boolean-valued (0.0 or 1.0), or integer-valued, even if its type is float.

You have access to the following API from the `chess` library:

{api_description}

## Current Feature Database
Here are some of our existing features and their importance to the current model (higher importance means this is a more useful feature for the current model):

{features}

# Task
Generate {num_features} new chess board feature functions in Python that:

1. Help us discriminate between strong and weak board positions, hopefully with positions before and after the optimal split point having the lowest possible variance between their evaluations.
2. Return a float value given a board position.
3. Handle edge cases gracefully - won't crash on unusual positions

Your task is to generate diverse, creative features that are relevant to explain the evaluations for the board positions shown above. Focus on features that would help distinguish between positions of different strengths. These features will be used in this decision tree that will predict the evaluation of a given board position in estimated % win probability for white (e.g., 20 means Black winning with around 80% probability). Think about new features that would help such a predictor in the particular cases above, trying to add information that the already existing features shown above are missing.

# Code Requirements

- Use single quotes for docstrings: "description here"
- No markdown code blocks
- No explanatory text after the function
- Each function should be complete and standalone, and return a float

# Output Format
Generate exactly {num_features} features in this format:

def feature(board: chess.Board) -> float:
    "Simple, clear description of what this feature measures"
    # ... Calculate and return the feature value
    return result

def feature(board: chess.Board) -> float:
    "Another feature description"
    # ... Calculate and return the feature value
    return result

The body of the function can be anything, but the first line (function declaration) should be identical to those examples above, and the second line should be a one-line docstring. Don't output explanatory text - just the function definitions as shown above.

Optimize for producing discriminant features that are novel compared to the existing features and that are likely to achieve a high importance for scoring positions, once we retrain the model using your new features combined with the existing ones.
