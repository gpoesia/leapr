{
  "combined_from": [
    "results/features/did3__text_classification_ghostbuster__gpt-4o-mini.json",
    "results/features/funsearch__text_classification_ghostbuster__gpt-4o-mini.json"
  ],
  "used_features": [
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]', word.lower()))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph.\"\n    paragraph_count = text.count('\\n') + 1\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if paragraph_count == 0:\n        return 0.0\n    return sentence_count / paragraph_count\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of special characters to total characters\"\n    special_character_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return special_character_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU') or 1\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words compared to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than six characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return long_word_count / len(text.split()) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(s.strip()) for s in sentences if s.strip())\n    return total_length / len(sentences) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 5 letters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of question words (who, what, where, when, why) to total words\"\n    question_words = ['who', 'what', 'where', 'when', 'why']\n    words = text.lower().split()\n    if len(words) == 0:\n        return 0.0\n    question_count = sum(1 for word in words if word in question_words)\n    return question_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one clause to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'[,\\;\\s]and\\s|\\band\\s|\\bor\\s|\\bso\\s', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) * 100 if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Density of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that contain filler words (like 'um', 'uh') to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    filler_sentences_count = sum(1 for sentence in sentences if 'um' in sentence.lower() or 'uh' in sentence.lower())\n    return filler_sentences_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_count = len(set(words))\n    return float(unique_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-alphanumeric characters in the text\"\n    non_alphanumeric_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_alphanumeric_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are alphanumeric\"\n    words = text.split()\n    alphanumeric_count = sum(1 for word in words if word.isalnum())\n    return (alphanumeric_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are lowercase\"\n    lowercase_word_count = sum(1 for word in text.split() if word.islower())\n    return float(lowercase_word_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total count of unique words in the text\"\n    unique_word_count = len(set(text.split()))\n    return float(unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences longer than 15 words\"\n    sentences = text.split('.')\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Density of punctuation marks relative to total length of text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines containing only one word\"\n    single_word_lines = sum(1 for line in text.splitlines() if len(line.split()) == 1)\n    return float(single_word_lines)\n",
    "def feature(text: str) -> float:\n    \"Total number of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length based on characters instead of words\"\n    sentences = [sent for sent in re.split(r'[.!?]+', text) if sent.strip()]\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of question marks in the text\"\n    question_mark_count = text.count('?')\n    return float(question_mark_count)\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'of'])\n    stop_word_count = sum(1 for word in text.lower().split() if word in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average word length in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(sum(len(word) for word in words)) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lowercase letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    lower_letters = sum(1 for c in text if c.islower())\n    return lower_letters / total_letters * 100 if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of the most frequent word\"\n    if not text:\n        return 0.0\n    words = text.split()\n    most_common_word_count = max(words.count(word) for word in set(words))\n    return float(most_common_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words containing at least one vowel\"\n    words = text.split()\n    vowel_word_count = sum(1 for word in words if any(c in 'aeiouAEIOU' for c in word))\n    return (vowel_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of hyphenated words in the text\"\n    hyphenated_count = sum(1 for word in text.split() if '-' in word)\n    return float(hyphenated_count)  \n",
    "def feature(text: str) -> float:\n    \"Frequency of uncommon words (those not in a common list)\"\n    common_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that'])  # Example common words\n    words = set(text.split())\n    uncommon_word_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_word_count) / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words that are the same forwards and backwards\"\n    palindrome_count = sum(1 for word in text.split() if word.lower() == word[::-1].lower() and len(word) > 1)\n    return float(palindrome_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    dialogue_count = text.count('\"') // 2  # Each dialogue pair is enclosed in quotes\n    return dialogue_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of repeated words in the text\"\n    words = text.split()\n    repeated_count = sum(1 for word in set(words) if words.count(word) > 1)\n    return float(repeated_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs) / (len(paragraphs) if paragraphs else 1)\n\n",
    "def feature(text: str) -> float:\n    \"Count of hyperlinks in the text\"\n    url_pattern = r'http[s]?://[^\\s]+'\n    link_count = len(re.findall(url_pattern, text))\n    return float(link_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that contain digits\"\n    digit_word_count = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return (digit_word_count / len(text.split()) * 100) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 10 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.split('.')\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of unique word appearances\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of letters in the text\"\n    letter_count = sum(1 for c in text if c.isalpha())\n    return float(letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of commas to words in the text\"\n    comma_count = text.count(',')\n    word_count = len(text.split())\n    return comma_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 12 words to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 12)\n    return long_sentences / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain direct speech.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    direct_speech_count = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words for sentences without conjunctions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    filtered_sentences = [s for s in sentences if 'and' not in s and 'but' not in s]\n    if not filtered_sentences:\n        return 0.0\n    total_words = sum(len(s.split()) for s in filtered_sentences)\n    return total_words / len(filtered_sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of phrases (sequences of words) in the text\"\n    phrases = re.findall(r'\\b\\w+(?: \\w+)*\\b', text)\n    return float(len(phrases))\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing questions\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is non-alphabetic characters\"\n    total_characters = len(text)\n    non_alpha_count = sum(1 for c in text if not c.isalpha() and not c.isspace())\n    return (non_alpha_count / total_characters * 100) if total_characters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_voice = len(re.findall(r'(\\bwas\\b|\\bwere\\b|\\bbe\\b)\\s+\\w+ed', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return passive_voice / total_sentences if total_sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than five letters\"\n    word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'a', 'of', 'it', 'that', 'with'}\n    words = text.split()\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of punctuation characters in the text\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / total_chars * 100) if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of each type of punctuation in the text\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to lowercase characters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    lower_count = sum(1 for c in text if c.islower())\n    return upper_count / lower_count if lower_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of times the word 'and' appears\"\n    and_count = text.lower().count('and')\n    return float(and_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of characters excluding whitespace\"\n    return float(len(text.replace(' ', '').replace('\\n', '').replace('\\t', '')))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stopwords\"\n    stopwords = {'the', 'is', 'in', 'at', 'of', 'and', 'a', 'to', 'it', 'that', 'this'}\n    total_words = text.split()\n    stopword_count = sum(1 for word in total_words if word.lower() in stopwords)\n    return (stopword_count / len(total_words) * 100) if total_words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 6 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    character_count = len(text)\n    sentence_count = len(sentences)\n    return character_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of consecutive repeating characters\"\n    repeat_count = sum(1 for i in range(1, len(text)) if text[i] == text[i - 1])\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of distinct characters to total characters\"\n    distinct_chars = len(set(text))\n    total_chars = len(text)\n    return distinct_chars / total_chars if total_chars > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Proportion of emotional words to total words in the text.\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'joy', 'scream', 'laugh', 'cry']\n    words = text.split()\n    if not words:\n        return 0.0\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return emotional_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines that contain more than one sentence\"\n    lines = text.splitlines()\n    multi_sentence_count = sum(1 for line in lines if line.count('.') + line.count('!') + line.count('?') > 1)\n    return float(multi_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    if len(text) == 0:\n        return 0.0\n    return upper_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that start with a conjunction.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    start_with_conjunction = sum(1 for sentence in re.split(r'[.!?]', text) if sentence.strip().startswith(('and', 'but', 'or', 'for', 'nor', 'so', 'yet')))\n    return start_with_conjunction / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    total_chars = len(text)\n    non_alnum_count = sum(1 for c in text if not c.isalnum())\n    return non_alnum_count / total_chars if total_chars > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = len(re.findall(r'[\"\\'].*?[\"\\']', text))\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words in the text\"\n    words = text.split()\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return float(uppercase_count)\n\n",
    "def feature(text: str) -> float:\n    'Proportion of non-letters to total characters'\n    total_chars = len(text)\n    non_letters = sum(1 for c in text if not c.isalpha() and not c.isspace())\n    if total_chars == 0:\n        return 0.0\n    return non_letters / total_chars\n\n",
    "def feature(text: str) -> float:\n    \"Count of emojis in the text\"\n    emoji_count = len(re.findall('[\\U0001F600-\\U0001F64F]', text))\n    return float(emoji_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of numeric characters to total characters\"\n    total_chars = len(text)\n    numeric_count = sum(1 for c in text if c.isdigit())\n    return numeric_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in words, excluding very short ones\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 3]\n    if not long_sentences:\n        return 0.0\n    return sum(len(s.split()) for s in long_sentences) / len(long_sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in characters, excluding very short words (3 characters or less).\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 3]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than six letters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    vowels = 'aeiouAEIOU'\n    vowel_start_count = sum(1 for word in text.split() if word.startswith(tuple(vowels)))\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words in the text\"\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / word_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences with fewer than 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if text else 0)\n    short_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) < 10])\n    return short_sentences / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    'Average number of sentences per paragraph'\n    paragraphs = text.split('\\n')\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    if len(paragraphs) == 0:\n        return 0.0\n    return float(sentence_count) / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of whitespace characters in the text\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of capitalized words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text.\"\n    return float(len(set(text)))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to words in the text\"\n    words = len(text.split())\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if words == 0:\n        return 0.0\n    return sentences / words\n\n",
    "def feature(text: str) -> float:\n    \"Average word length in characters\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of complex words (more than 3 syllables) in the text\"\n    return len(re.findall(r'\\b\\w*[aeiou]{3,}\\w*\\b', text))\n\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['a', 'and', 'the', 'is', 'in', 'of', 'to', 'it'])\n    words = text.lower().split()\n    stop_word_count = sum(1 for word in words if word in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are alphanumeric to total words\"\n    words = text.split()\n    alnum_count = sum(1 for word in words if word.isalnum())\n    return alnum_count / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of punctuation characters in the text\"\n    if not text:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text)) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are shorter than three letters\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 3)\n    return (short_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    vowels = 'aeiou'\n    def syllable_count(word):\n        return sum(1 for char in word.lower() if char in vowels)\n    total_syllables = sum(syllable_count(word) for word in text.split())\n    return total_syllables / len(text.split()) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Density of complex words (words with more than 3 syllables)\"\n    import re\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Count of words that are long\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing emoticons like :) or :D\"\n    emoticon_pattern = r'[:;][-~]?[\\)D]'\n    emoticon_count = len(re.findall(emoticon_pattern, text))\n    return float(emoticon_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) * 100 if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of quoted phrases in the text.\"\n    quotes = re.findall(r\"'(.*?)'\", text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to paragraphs\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    paragraphs = text.count('\\n') + 1\n    return sentences / paragraphs if paragraphs > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    char_count = sum(len(sentence) for sentence in sentences)\n    return char_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with less than 5 words\"\n    sentences = re.split(r'[.!?]', text)\n    short_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return float(short_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one independent clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_sentences = len(re.findall(r'\\b(?:and|but|or|nor|for|so|yet)\\b.*?[.!?]', text))\n    return compound_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are exclusively alphabetic\"\n    alpha_word_count = sum(1 for word in text.split() if word.isalpha())\n    return float(alpha_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Number of times the text contains a question mark\"\n    question_count = text.count('?')\n    return float(question_count)\n",
    "def feature(text: str) -> float:\n    \"Frequency of the most common word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    return float(max(word_counts.values()))\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are verbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(?:be|have|do|go|say|get|make|know|can|will|would|may|might|must|shall|see|come|think|take|look|want|give)\\b', word))\n    return verb_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    average_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n    return average_length\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_count = len(text)\n    return uppercase_count / total_count if total_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are longer than 10 characters to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words longer than 12 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 12)\n    return long_words_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct letters in the text\"\n    letter_set = set(c.lower() for c in text if c.isalpha())\n    return float(len(letter_set))\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]+', text)\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that contain digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return (digit_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of text that is whitespace\"\n    total_chars = len(text)\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of numerical values in the text\"\n    return float(sum(1 for word in text.split() if word.isdigit()))\n\n",
    "def feature(text: str) -> float:\n    \"Density of vowels in the text\"\n    vowel_count = sum(1 for char in text if char in 'aeiouAEIOU')\n    return vowel_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words containing special characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    special_char_count = sum(1 for word in words if not word.isalnum())\n    return special_char_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(sentences) == 0:\n        return 0.0\n    return punctuation_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of special characters in the text\"\n    special_char_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(special_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if c in '!\",;:')\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    avg_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n    return float(avg_length)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of characters excluding whitespace\"\n    return float(len(text.replace(' ', '').replace('\\n', '').replace('\\t', '')))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of nouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    nouns = len(re.findall(r'\\b\\w+ing\\b|\\b\\w+ed\\b|\\b\\w+s\\b|\\b[a-zA-Z]+\\b', text))  # Simplistic noun detection\n    return nouns / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in characters\"\n    paragraphs = text.split('\\n')\n    total_length = sum(len(para) for para in paragraphs)\n    return total_length / len(paragraphs) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are all uppercase\"\n    words = text.split()\n    uppercase_word_count = sum(1 for word in words if word.isupper())\n    return uppercase_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    # A rough estimate of syllables based on vowels\n    syllable_count = sum(sum(1 for c in word if c in 'aeiouAEIOU') for word in text.split())\n    word_count = len(text.split())\n    return syllable_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words shorter than 4 characters\"\n    short_word_count = sum(1 for word in text.split() if len(word) < 4)\n    return float(short_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(re.findall(r'\\band\\b|\\bor\\b', sentence)) > 0)\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of alphabetic characters to total characters\"\n    alpha_count = sum(1 for c in text if c.isalpha())\n    return alpha_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    words = len(text.split())\n    return words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique bigrams in the text\"\n    words = text.split()\n    bigrams = [' '.join(words[i:i + 2]) for i in range(len(words) - 1)]\n    unique_bigrams = len(set(bigrams))\n    return unique_bigrams / len(bigrams) if bigrams else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is lowercase letters\"\n    lowercase_count = sum(1 for char in text if char.islower())\n    return (lowercase_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text (assuming a predefined list)\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that', 'it', 'with'])\n    words = text.lower().split()\n    stop_word_count = sum(1 for word in words if word in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of keywords in the text (example: 'important', 'key')\"\n    keywords = ['important', 'key', 'notable']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 12 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 12)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) * 100 if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    total_chars = len(text)\n    non_alphanumeric_count = sum(1 for c in text if not c.isalnum())\n    return (non_alphanumeric_count / total_chars) if total_chars > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    syllable_count = sum(text.lower().count(vowel) for vowel in 'aeiou')\n    words = len(text.split())\n    return syllable_count / words if words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    total_characters = sum(len(word) for word in words)\n    return total_characters / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    words = text.lower().split()\n    vowel_start_count = sum(1 for word in words if word and word[0] in vowels)\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of the number of questions marks to the total number of punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_marks = text.count('?')\n    return question_marks / total_punctuation if total_punctuation > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence.\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return words / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Mean length of words in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of numbers in the text\"\n    number_count = sum(1 for word in text.split() if word.isdigit())\n    return float(number_count)\n\n",
    "def feature(text: str) -> float:\n    \"Longest word length in the text\"\n    words = text.split()\n    return float(max(len(word) for word in words)) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence.strip().startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')))\n    return float(capital_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Calculate the ratio of pronouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = re.findall(r'\\b(he|she|it|they|him|her|his|their|there|you|we|us|me|my|mine|our|ours)\\b', text, re.IGNORECASE)\n    return float(len(pronouns)) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return (total_words / len(sentences)) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of long words (length > 7)\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase words in the text\"\n    words = text.split()\n    upper_word_count = sum(1 for word in words if word.isupper())\n    return upper_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of non-alphanumeric characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum())\n    return (non_alnum_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that contain special characters\"\n    special_char_word_count = sum(1 for word in text.split() if any(not c.isalnum() for c in word))\n    return float(special_char_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words containing three or more syllables to total words\"\n    words = text.split()\n    long_syllable_words = sum(1 for word in words if len(re.findall(r'[aeiouy]{2,}', word)) >= 1)\n    return long_syllable_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of repeated phrases of length 3 words or more\"\n    words = text.split()\n    phrases = [' '.join(words[i:i+3]) for i in range(len(words) - 2)]\n    repeated_phrases = len(set(phrase for phrase in phrases if phrases.count(phrase) > 1))\n    return float(repeated_phrases)\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['the', 'and', 'is', 'in', 'to', 'of'])\n    count = sum(1 for word in text.lower().split() if word in stop_words)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    total_length = len(text.replace('\\n', ''))\n    return total_length / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with more than five characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of letters to total characters\"\n    letter_count = sum(1 for c in text if c.isalpha())\n    return letter_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    words = text.split()\n    vowel_start_count = sum(1 for word in words if word and word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with at least one repeated letter\"\n    repeated_letter_count = sum(1 for word in text.split() if len(set(word)) < len(word))\n    return float(repeated_letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words with more than 3 syllables\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 3)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    'Ratio of uppercase letters to total letters'\n    total_letters = sum(1 for c in text if c.isalpha())\n    upper_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return upper_letters / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with a specific keyword\"\n    keyword = 'example'\n    count_keyword_sentences = sum(1 for s in re.split(r'[.!?]', text) if keyword in s)\n    return float(count_keyword_sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines that are empty\"\n    lines = text.splitlines()\n    empty_line_count = sum(1 for line in lines if not line.strip())\n    return (empty_line_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    total_length = sum(len(s) for s in sentences)\n    return total_length / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that include dialogue to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    dialogue_count = text.count('\"') // 2\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters to total characters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average character length of words\"\n    words = text.split()\n    avg_length = sum(len(word) for word in words) / len(words) if words else 0.0\n    return float(avg_length)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, helping to identify diversity in vocabulary.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines in the text\"\n    line_count = len(text.splitlines())\n    return float(line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a question\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = len(re.findall(r'\\?', text))\n    return question_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than 6 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of exclamation marks in the text\"\n    return float(text.count('!'))\n\n",
    "def feature(text: str) -> float:\n    \"Sum of lengths of all words in the text\"\n    return float(sum(len(word) for word in text.split()))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing digits\"\n    digit_word_count = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    count_numbers = sum(1 for word in words if any(char.isdigit() for char in word))\n    return count_numbers / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average line length in characters\"\n    lines = text.splitlines()\n    total_length = sum(len(line) for line in lines)\n    return (total_length / len(lines)) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return (uppercase_count / len(text)) * 100 if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with more than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clauses = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clauses / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique characters in the text\"\n    unique_chars = len(set(text))\n    total_chars = len(text)\n    return (unique_chars / total_chars * 100) if total_chars > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase words in the text\"\n    words = text.split()\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return (uppercase_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n",
    "def feature(text: str) -> float:\n    \"Count of words that are often used in AI-generated text.\"\n    common_ai_words = ['there', 'is', 'are', 'the', 'you', 'to', 'and', 'of', 'that']\n    word_list = text.lower().split()\n    ai_word_count = sum(1 for word in word_list if word in common_ai_words)\n    return ai_word_count / len(word_list) if word_list else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    word_count = len(text.split())\n    return word_count / len(paragraphs) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of paragraphs to sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    paragraph_count = text.count('\\n') + 1\n    return paragraph_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of uncommon words in the text\"\n    common_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'of', 'in'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]+', text)\n    total_length = sum(len(sentence.strip()) for sentence in sentences if sentence.strip())\n    if len(sentences) == 0:\n        return 0.0\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of capitalized words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = len(re.findall(r'[,;]', text)) + len(re.findall(r'and|but|or', text))\n    sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    return clauses / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return float(uppercase_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing special characters\"\n    special_char_count = sum(1 for word in text.split() if not word.isalnum())\n    return float(special_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    char_count = len(text)\n    return char_count / sentence_count if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 letters) in the text\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stop words\"\n    stop_words = set(['a', 'and', 'the', 'is', 'in', 'of', 'to', 'it'])\n    words = text.lower().split()\n    stop_word_count = sum(1 for word in words if word in stop_words)\n    return (stop_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of uppercase words\"\n    uppercase_words = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words in the text\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return unique_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quotes)\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\"', text)) // 2  # Count pairs of quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing at least one digit\"\n    digit_word_count = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamation points in the text\"\n    return float(text.count('!'))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with more than 7 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words with more than 5 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 5)\n    return long_words_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of distinct punctuation types\"\n    punctuation_types = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_types))\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = {'important', 'urgent', 'deadline'}\n    keyword_count = sum(1 for word in text.split() if word.lower() in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines that start with a capital letter\"\n    capital_start_lines = sum(1 for line in text.splitlines() if line and line[0].isupper())\n    return float(capital_start_lines)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in words\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(para.split()) for para in paragraphs)\n    return total_words / len(paragraphs) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are uncommon based on a predefined list of common words\"\n    common_words = {'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'to', 'that', 'is', 'for', 'you', 'he', 'was', 'on', 'are', 'as', 'with', 'his', 'they', 'at', 'this', 'by', 'from'}\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    if len(words) == 0:\n        return 0.0\n    return uncommon_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return (long_word_count / len(words) * 100) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    unique_sentences = len(set(re.findall(r'\\S.*?[.!?]', text.strip())))\n    if sentences == 0:\n        return 0.0\n    return unique_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of the second most common word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    sorted_counts = sorted(word_counts.values(), reverse=True)\n    return float(sorted_counts[1]) if len(sorted_counts) > 1 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Using words of at least 3 letters\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_starting_count = sum(1 for word in text.split() if word.lower()[0] in vowels)\n    return float(vowel_starting_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of repeated phrases (2 or more words)\"\n    phrases = re.findall(r'\\b\\w+\\s+\\w+\\b', text)\n    phrase_count = len(phrases)\n    repeated_phrases = len(phrases) - len(set(phrases))\n    return float(repeated_phrases) / phrase_count if phrase_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    char_count = len(text)\n    return char_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that include exclamations\"\n    exclamation_count = text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return exclamation_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters in the text\"\n    total_uppercase = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    return total_uppercase / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    return float(len(re.findall(r'\\?\\s*$', text)))\n\n",
    "def feature(text: str) -> float:\n    \"Count of different vowel characters used in the text\"\n    vowels = set('aeiouAEIOU')\n    used_vowels = set(c for c in text if c in vowels)\n    return float(len(used_vowels))\n\n",
    "def feature(text: str) -> float:\n    \"Length of the longest word in the text\"\n    words = text.split()\n    longest_word_length = max((len(word) for word in words), default=0)\n    return float(longest_word_length)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of adverb usage to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_chars = sum(len(sentence) for sentence in sentences)\n    return (total_chars / len(sentences)) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return (sum(len(sentence) for sentence in sentences) / len(sentences)) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    unique_punctuations = len(set(char for char in text if not char.isalnum() and not char.isspace()))\n    return float(unique_punctuations)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of phrases per sentence, reflecting complexity in sentence structure.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    phrases = len(re.findall(r',', text))\n    if sentences == 0:\n        return 0.0\n    return float(phrases) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of characters (not words) in the text\"\n    return float(len(text))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences that contain more than ten words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for s in sentences if len(s.split()) > 10)\n    return (long_sentence_count / len(sentences)) * 100 if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences that are questions\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    return (question_count / total_sentences * 100) if total_sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Average word length considering only alphanumeric characters\"\n    alphanumeric_words = [word for word in text.split() if word.isalnum()]\n    if not alphanumeric_words:\n        return 0.0\n    return sum(len(word) for word in alphanumeric_words) / len(alphanumeric_words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    number_count = sum(1 for word in text.split() if word.isdigit())\n    total_words = len(text.split())\n    return number_count / total_words if total_words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per line\"\n    lines = text.splitlines()\n    word_count = len(text.split())\n    return word_count / (len(lines) + 1) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of common stopwords to total words\"\n    stopwords = set(['the', 'is', 'in', 'at', 'of', 'and', 'a', 'to', 'it'])\n    words = text.lower().split()\n    stopword_count = sum(1 for word in words if word in stopwords)\n    return stopword_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    words = text.split()\n    vowel_start_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase letters as a proportion of total letters\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / total_letters if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percent of words longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average word length per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences in the text\"\n    return float(text.count('.') + text.count('!') + text.count('?'))\n\n",
    "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    max_length = max(len(word) for word in words)\n    return float(max_length)\n\n",
    "def feature(text: str) -> float:\n    \"Count of different sentence types (declarative, interrogative, exclamatory)\"\n    sentence_types = sum(1 for c in text if c in ['.', '?', '!'])\n    return float(sentence_types)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of total characters that are punctuation\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_count = len(text)\n    return (uppercase_count / total_count) * 100 if total_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences in the text\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return text.count('!') / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    return word_count / (len(sentences) + 1) if sentences else float(word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that contain conjunctions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunctions = len(re.findall(r'\\b(and|but|or|so|for|nor|yet|although|while|because)\\b', text.lower()))\n    return conjunctions / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words with mixed case in the text\"\n    words = text.split()\n    mixed_case_count = sum(1 for word in words if any(c.isupper() for c in word) and any(c.islower() for c in word))\n    return (mixed_case_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = ['crisis', 'devastating', 'challenges', 'consequences', 'unveiled']\n    count = sum(text.lower().count(word) for word in negative_words)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'})\n    return conjunctions / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in the text\"\n    sentence_lengths = [len(sentence) for sentence in re.findall(r'[^.!?]+[.!?]', text)]\n    mean_length = sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    return variance ** 0.5\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with numeric characters\"\n    numeric_word_count = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    return float(numeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words with more than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words.\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return long_words / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but', sentence)) + 1 for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return clause_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of punctuation marks\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 7 characters\"\n    word_list = text.split()\n    long_word_count = sum(1 for word in word_list if len(word) > 7)\n    return long_word_count / len(word_list) if word_list else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Number of distinct punctuation marks used\"\n    distinct_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(distinct_punctuation))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (words with more than 5 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{5,}\\b', text))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    return len(text.split('\\n'))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-ASCII characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    return non_ascii_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return (uppercase_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    words_count = len(re.findall(r'\\w+', text))\n    return words_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of instances of the word 'the'\"\n    the_count = text.lower().count('the')\n    return float(the_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of lines in the text\"\n    line_count = len(text.splitlines())\n    return float(line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of total words to total sentences in the text\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lines that contain numbers\"\n    lines = text.splitlines()\n    number_lines_count = sum(1 for line in lines if any(c.isdigit() for c in line))\n    return number_lines_count / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return uppercase_count / len(words) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Average number of different punctuation marks used\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return len(punctuation_marks)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are palindromes\"\n    words = text.split()\n    palindrome_count = sum(1 for word in words if word == word[::-1])\n    return float(palindrome_count)\n",
    "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    capitalized_count = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    return capitalized_count / total_words if total_words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))  \n    rhetorical_questions = len(re.findall(r'[\\?]', text))\n    if sentences == 0:\n        return 0.0\n    return rhetorical_questions / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of initial uppercase words\"\n    uppercase_word_count = sum(1 for word in text.split() if word and word[0].isupper())\n    return float(uppercase_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of unique words with more than 4 letters\"\n    unique_long_words = {word for word in text.split() if len(word) > 4}\n    return float(len(unique_long_words))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are in all lowercase\"\n    lowercase_count = sum(1 for word in text.split() if word.islower())\n    return float(lowercase_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    unique_words = set(text.split())\n    word_count = len(text.split())\n    return (len(unique_words) / word_count * 100) if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of unique words used in the text\"\n    unique_words = len(set(word.lower() for word in text.split()))\n    return float(unique_words)\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    return float(text.count('\\n') + 1) if text.strip() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keyword 'important' occurrences in the text\"\n    count_important = text.lower().count('important')\n    return float(count_important)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than five letters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences containing direct speech\"\n    direct_speech = len(re.findall(r'\\\".*?\\\"', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in words\"\n    sentences = re.split(r'[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return (total_words / len(sentences)) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of unique characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_char_count = sum(len(set(word)) for word in words)\n    return unique_char_count / len(words)\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are contractions in the text.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    if len(words) == 0:\n        return 0.0\n    return contractions / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return float(upper_count) / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = set(words)\n    return float(len(unique_words)) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-letter characters in the text\"\n    non_letter_count = sum(1 for c in text if not c.isalpha())\n    return float(non_letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun.lower()) for pronoun in first_person_pronouns)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-space characters in the text\"\n    non_space_count = sum(1 for c in text if not c.isspace())\n    return float(non_space_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of exclamation marks to total punctuation marks\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of punctuation characters in the text\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of adjectives per 100 words to assess descriptive quality\"\n    adjectives_pattern = r'\\b(?:a|an|the|this|that|those|these)\\s+\\w+\\s+(\\w+)\\b'\n    adjectives_count = len(re.findall(adjectives_pattern, text, re.IGNORECASE))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    return (adjectives_count / len(words)) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'nor', 'yet')))\n    return conjunctions / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    words = text.split()\n    return sum(1 for word in words if word.isdigit()) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total count of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are repeated consecutively\"\n    words = text.split()\n    consecutive_count = sum(1 for i in range(1, len(words)) if words[i] == words[i - 1])\n    return float(consecutive_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adverbs in the text (ending with 'ly')\"\n    adverb_count = sum(1 for word in text.split() if word.endswith('ly'))\n    return float(adverb_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with special characters\"\n    special_char_count = sum(1 for word in text.split() if not word.isalnum())\n    return float(special_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of unique characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_char_count = sum(len(set(word)) for word in words)\n    return unique_char_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric characters in the text\"\n    numeric_count = sum(1 for c in text if c.isdigit())\n    return float(numeric_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of the number of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Count of special characters in the text\"\n    special_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(special_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are alphabetic\"\n    total_chars = len(text)\n    alpha_count = sum(1 for c in text if c.isalpha())\n    return alpha_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric words in the text\"\n    words = text.split()\n    numeric_word_count = sum(1 for word in words if word.isdigit())\n    return float(numeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words shorter than 5 characters\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 5)\n    return short_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that end with a consonant\"\n    consonant_end_count = sum(1 for word in text.split() if word and word[-1].lower() not in 'aeiou')\n    return float(consonant_end_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of total sentences that are questions\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return (question_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of lines in the text\"\n    line_count = len(text.splitlines())\n    return float(line_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences that are questions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    question_count = sum(1 for sentence in sentences if '?' in sentence)\n    return (question_count / len(sentences) * 100) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks to total characters\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return len(punctuation_marks) / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of non-empty lines in the text\"\n    lines = text.splitlines()\n    non_empty_line_count = sum(1 for line in lines if line.strip())\n    return non_empty_line_count / len(lines) if lines else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_word_count = len(set(text.split()))\n    return float(unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words with more than 5 letters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of thematic shifts (points where the subject changes) in a paragraph\"\n    paragraphs = text.split('\\n')\n    thematic_shifts = sum(text.lower().count(key) for key in ['but', 'however', 'on the other hand', 'nevertheless', 'in contrast'])\n    return thematic_shifts / len(paragraphs) if len(paragraphs) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of distinct sentence structures in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    structures = set()\n    for sentence in re.split(r'[.!?]', text):\n        words = sentence.strip().split()\n        structures.add((len(words), sum(1 for word in words if len(word) > 7)))\n    return float(len(structures))\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct characters in the text\"\n    distinct_char_count = len(set(text))\n    return float(distinct_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with vowels\"\n    vowel_start_count = sum(1 for word in text.split() if word and word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines in the text\"\n    lines = text.splitlines()\n    return float(len(lines))\n",
    "def feature(text: str) -> float:\n    \"Count of occurrences of specific punctuation marks\"\n    punctuation_count = sum(1 for c in text if c in '.,!?;:')\n    return float(punctuation_count)\n",
    "def feature(text: str) -> float:\n    \"Count of self-referential phrases, indicative of human authorship\"\n    self_referential_phrases = ['I think', 'I believe', 'In my opinion', 'I feel']\n    count = sum(text.count(phrase) for phrase in self_referential_phrases)\n    return count / len(text.split()) if len(text.split()) > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['a', 'the', 'is', 'in', 'at', 'of', 'and', 'to', 'with', 'that'])\n    return float(len([word for word in text.lower().split() if word in stop_words]))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions in the text.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return (question_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in lines\"\n    paragraphs = text.split('\\n')\n    line_count = sum(1 for line in paragraphs if line.strip())\n    return len(paragraphs) / line_count if line_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of questions in the text\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of special characters in the text\"\n    special_chars_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(special_chars_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if word.endswith('ly')])\n    return adverbs / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    total_words = len(text.split())\n    if sentence_count == 0:\n        return 0.0\n    return total_words / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    word_count = sum(len(sentence.split()) for sentence in sentences)\n    return word_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words with more than 5 letters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with mixed case\"\n    mixed_case_count = sum(1 for word in text.split() if not word.islower() and not word.isupper())\n    return float(mixed_case_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of contractions to total words\"\n    contractions = re.findall(r\"\\b\\w+'s|\\b\\w+n't|\\b\\w+'ll|\\b\\w+'ve|\\b\\w+'d|\\b\\w+'re\", text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(contractions) / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of characters excluding whitespace\"\n    char_count = sum(1 for c in text if not c.isspace())\n    return float(char_count)\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = ['important', 'note', 'consider']  # Example keywords\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_characters = set(text)\n    return float(len(unique_characters))\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of longer words (greater than 7 characters) in the text\"\n    long_words_count = len([word for word in text.split() if len(word) > 7])\n    return float(long_words_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return float(long_words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of rare words (less common) in the text\"\n    common_words = set(['the', 'is', 'and', 'a', 'to', 'of', 'in', 'that', 'it', 'you', 'for'])\n    rare_word_count = sum(1 for word in text.split() if word.lower() not in common_words)\n    return float(rare_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    punctuation = {c for c in text if not c.isalnum() and not c.isspace()}\n    return float(len(punctuation))\n\n",
    "def feature(text: str) -> float:\n    'Average word length for unique words'\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives_pattern = r'\\b\\w+ (?:ly|ous|able|ible|ive|al|ful|less|y)\\b'\n    adjectives_count = len(re.findall(adjectives_pattern, text))\n    return float(adjectives_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_characters = len(set(text))\n    return float(unique_characters)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences that contain more than one clause\"\n    clauses = re.findall(r'[,.]', text)\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return (len(clauses) / sentence_count * 100) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)  # Count sentences\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of total words to the number of sentences.\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return word_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that end with punctuation\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return sentence_count / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters.\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of vowels in the text\"\n    return float(sum(1 for c in text.lower() if c in 'aeiou'))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowel_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n",
    "def feature(text: str) -> float:\n    \"Count of repeated words in the text\"\n    words = text.split()\n    word_count = len(words)\n    unique_word_count = len(set(words))\n    return float(word_count - unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numerical digits in the text\"\n    digit_count = sum(c.isdigit() for c in text)\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of character count to word count in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(text) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 8 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 8)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / max(1, len(text.split()))\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs containing more than one sentence\"\n    paragraphs = text.split('\\n')\n    multi_sentence_paragraphs = sum(1 for para in paragraphs if para.count('.') + para.count('!') + para.count('?') > 1)\n    return float(multi_sentence_paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of short words (less than 4 characters) to total words\"\n    short_words = len([word for word in text.split() if len(word) < 4])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return short_words / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for s in sentences if s.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'yet')))\n    return conjunctions / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    total_words = len(text.split())\n    return total_words / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    return float(sum(1 for word in text.split() if word and word[0].lower() in 'aeiou'))\n\n",
    "def feature(text: str) -> float:\n    \"Count the occurrences of passive voice constructions.\"\n    passive_voice_patterns = r'\\bwas\\b|\\bare\\b|\\bwere\\b|\\bhave been\\b|\\bhas been\\b|\\bhad been\\b'\n    return len(re.findall(passive_voice_patterns, text.lower()))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of quotes in the text indicating dialogue usage\"\n    quote_count = text.count('\"')\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return quote_count / word_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are adjectives\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = len([word for word in words if word.lower() in {'beautiful', 'fantastic', 'clear', 'long', 'broken', 'scattered', 'tired', 'endless', 'recurring'}])\n    return adjectives / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / total_letters if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words longer than 6 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    if len(words) == 0:\n        return 0.0\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of digits in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than six characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with numerical values\"\n    numeric_word_count = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return float(numeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of paragraphs that are longer than 100 characters\"\n    paragraphs = text.split('\\n')\n    long_paragraph_count = sum(1 for para in paragraphs if len(para) > 100)\n    return (long_paragraph_count / len(paragraphs) * 100) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences containing dialogue (quotes)\"\n    dialogue_sentences = len(re.findall(r'\".+?\"', text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    upper_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return upper_letters / total_letters * 100\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to paragraphs\"\n    paragraph_count = text.count('\\n') + 1\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / paragraph_count if paragraph_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return (uppercase_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowel_start_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of compound sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_count = len(re.findall(r'(?:\\w+[,:;]?\\s+)?(?:\\w+\\s*[,;]\\s*)?(?:\\w+)', text))\n    return compound_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words\"\n    uppercase_word_count = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of consecutive repeated characters\"\n    repeat_count = sum(1 for i in range(1, len(text)) if text[i] == text[i-1])\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is numeric\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / len(text) * 100 if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of questions in the text\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return (question_count / sentence_count * 100) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with digits in them\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct characters in the text\"\n    distinct_characters = set(text)\n    return float(len(distinct_characters))\n",
    "def feature(text: str) -> float:\n    \"Count of distinct sentences starting with a capital letter\"\n    sentences = [s for s in text.split('.') if s.strip()]\n    return float(sum(1 for s in sentences if s.strip() and s[0].isupper()))\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of unique words in the text.\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Count of complex sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'\\w+,\\s\\w+', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words with non-standard characters (e.g., hyphens, apostrophes) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_standard_count = sum(1 for word in words if any(c in word for c in [\"'\", '-', '@']))\n    return non_standard_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return complex_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of punctuation to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of capitalized words in the text\"\n    capitalized_word_count = sum(1 for word in text.split() if word.istitle())\n    return float(capitalized_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of parenthetical phrases (using parentheses) to total sentences ratio\"\n    sentences = re.findall(r'[.!?]', text)\n    parenthetical_count = text.count('(') + text.count(')')\n    return parenthetical_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of characters that are whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return (whitespace_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words ending with 'ing'\"\n    ing_word_count = sum(1 for word in text.split() if word.endswith('ing'))\n    return float(ing_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in text.split('.') + text.split('!') + text.split('?'))\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines that start with a capital letter\"\n    lines = text.splitlines()\n    capital_lines = sum(1 for line in lines if line and line[0].isupper())\n    return capital_lines / len(lines) * 100 if lines else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of digits to total characters in the text\"\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / total_chars\n",
    "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    vowels = 'aeiouAEIOU'\n    def syllable_count(word):\n        return sum(1 for char in word if char in vowels)\n    words = text.split()\n    avg_syllables = sum(syllable_count(word) for word in words) / len(words) if words else 0.0\n    return float(avg_syllables)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    count_capital_start = sum(1 for sentence in text.split('.') if sentence.strip() and sentence.strip()[0].isupper())\n    return count_capital_start / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(sentence.count(',') + sentence.count('and') + sentence.count('or') for sentence in sentences)\n    return clauses / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    'Average length of sentences in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase words in the text\"\n    words = text.split()\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return uppercase_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than five characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of letters in the text\"\n    letter_count = sum(1 for c in text if c.isalpha())\n    return letter_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average character length of words\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of keywords in the text (assuming a predefined set of keywords)\"\n    keywords = {'important', 'note', 'attention', 'warning'}\n    keyword_count = sum(1 for word in text.split() if word.lower() in keywords)\n    return float(keyword_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(text.count('.') + text.count('!') + text.count('?') for text in paragraphs)\n    return sentence_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are acronyms (all uppercase)\"\n    words = text.split()\n    acronym_count = sum(1 for word in words if word.isupper())\n    return (acronym_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase words in the text\"\n    words = text.split()\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return (uppercase_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in text.split())\n    return syllable_count / len(text.split()) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.strip()) for sentence in sentences if sentence.strip()]\n    return sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    uppercase_count = sum(1 for char in text if char.isupper())\n    return (uppercase_count / len(text) * 100) if len(text) > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return upper_count / total_letters if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct word lengths in the text\"\n    words = text.split()\n    distinct_lengths = set(len(word) for word in words)\n    return float(len(distinct_lengths))\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    avg_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n    return float(avg_length)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stop words\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that'])  # A sample set of stop words\n    words = text.split()\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    return (stop_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of dialogue segments in the text.\"\n    dialogues = re.findall(r'\\\".*?\\\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters.\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of words with mixed capitalization\"\n    mixed_case_count = sum(1 for word in text.split() if any(c.isupper() for c in word) and any(c.islower() for c in word))\n    return float(mixed_case_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of characters excluding whitespace\"\n    non_space_count = sum(1 for c in text if not c.isspace())\n    return float(non_space_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    capital_start_sentence_count = sum(1 for sentence in sentences if sentence.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')))\n    return float(capital_start_sentence_count)\n",
    "def feature(text: str) -> float:\n    \"Count of sentences in the text\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return float(sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are entirely uppercase\"\n    upper_word_count = sum(1 for word in text.split() if word.isupper())\n    return float(upper_word_count)\n\n",
    "def feature(text: str) -> float:\n    'Total number of digits in the text'\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Calculates the ratio of sentences with more than 10 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    long_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 10)\n    if sentences == 0:\n        return 0.0\n    return long_sentence_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than 7 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is whitespace\"\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / total_chars * 100\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text.\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    if not paragraphs or sentence_count == 0:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return punctuation_count / total_length\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters\"\n    total_characters = len(text)\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_characters if total_characters else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return capitalized_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of text that is whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'the'\"\n    return float(text.lower().count('the'))\n\n",
    "def feature(text: str) -> float:\n    \"Count of emoticons in the text\"\n    emoticon_pattern = r'[:;]{1}[-~]?[\\)D]'\n    emoticon_count = len(re.findall(emoticon_pattern, text))\n    return float(emoticon_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-ASCII characters in the text\"\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    return float(non_ascii_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')))\n    return capital_start_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines with more than 10 words\"\n    long_lines_count = sum(1 for line in text.splitlines() if len(line.split()) > 10)\n    return float(long_lines_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are long (more than 7 characters)\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return (long_word_count / len(words)) * 100 if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing digits\"\n    words_with_digits = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return float(words_with_digits)\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 5 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of adverbs based on common endings\"\n    adverb_count = sum(1 for word in text.split() if word.endswith('ly'))\n    return float(adverb_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words in the text\"\n    words = text.split()\n    uppercase_word_count = sum(1 for word in words if word.isupper())\n    return float(uppercase_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'of', 'that', 'it', 'with', 'as'])\n    word_count = sum(1 for word in text.lower().split() if word in stop_words)\n    return float(word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    letter_count = sum(1 for c in text if c.isalpha())\n    return uppercase_count / letter_count if letter_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of trailing whitespace characters\"\n    return float(len(text) - len(text.rstrip()))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return long_word_count / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of total characters in the text\"\n    return float(len(text))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum())\n    return non_alnum_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of transitional phrases used in the text.\"\n    transitional_phrases = ['however', 'moreover', 'meanwhile', 'thus', 'therefore', 'consequently']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines in the text\"\n    return float(len(text.splitlines()))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamatory = text.count('!')\n    if sentences == 0:\n        return 0.0\n    return exclamatory / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    words = text.split()\n    number_count = sum(1 for word in words if word.isdigit())\n    return number_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    total_syllables = sum(len(re.findall(r'[aeiouy]', word.lower())) for word in text.split())\n    if sentences == 0:\n        return 0.0\n    return total_syllables / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 10 words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 2 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of lines in characters\"\n    lines = text.splitlines()\n    total_length = sum(len(line) for line in lines)\n    return total_length / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiouy]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of individual characters in the text\"\n    return float(len(text))\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = ['important', 'notice', 'urgent', 'confirm']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    total_chars = sum(len(word) for word in words)\n    return total_chars / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length (number of words per sentence)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = len(text.split())\n    return float(words) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = re.findall(r'[.!?]', text)\n    question_count = text.count('?')\n    return question_count / len(sentences) * 100 if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Punctuation diversity: count of different punctuation marks\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of words that are likely to be found in AI-generated text (e.g., verbs ending in -ing)\"\n    ing_word_count = len(re.findall(r'\\b\\w+ing\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return ing_word_count / total_word_count\n\n",
    "def feature(text: str) -> float:\n    \"Presence of complex vocabulary (words longer than 7 characters)\"\n    complex_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(complex_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of common conjunctions in the text.\"\n    common_conjunctions = ['and', 'but', 'or', 'nor', 'for', 'yet', 'so']\n    words = text.lower().split()\n    count = sum(1 for word in words if word in common_conjunctions)\n    return count / (len(words) + 1e-6)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of commas in the text\"\n    comma_count = text.count(',')\n    return float(comma_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count the proportion of words that are personal pronouns.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = sum(1 for word in words if word.lower() in ['i', 'me', 'my', 'mine', 'you', 'your', 'yours', 'he', 'him', 'his', 'she', 'her', 'hers', 'it', 'its', 'we', 'us', 'our', 'ours', 'they', 'them', 'their', 'theirs'])\n    return pronouns / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average position of the first vowel in each word\"\n    vowels = 'aeiou'\n    positions = []\n    for word in text.split():\n        for index, char in enumerate(word.lower()):\n            if char in vowels:\n                positions.append(index + 1)\n                break\n    return sum(positions) / len(positions) if positions else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that contain repeated letters\"\n    repeated_letter_count = sum(1 for word in text.split() if len(set(word)) < len(word))\n    return float(repeated_letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of numeric words to total words\"\n    words = text.split()\n    numeric_word_count = sum(1 for word in words if word.isdigit())\n    return numeric_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of long words (more than 7 characters)\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lowercase letters in the text\"\n    lowercase_count = sum(1 for c in text if c.islower())\n    return (lowercase_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words in the text\"\n    uppercase_word_count = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total count of distinct punctuation marks\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n",
    "def feature(text: str) -> float:\n    \"Calculate the ratio of long sentences (more than 20 words) to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return float(long_sentences / sentences) if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs per line\"\n    paragraphs = text.split('\\n')\n    line_count = sum(1 for line in text.splitlines() if line.strip())\n    return len(paragraphs) / line_count if line_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Total number of uppercase letters in the text\"\n    uppercase_count = sum(1 for char in text if char.isupper())\n    return float(uppercase_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return (unique_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    return word_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'the' in any case\"\n    count_the = text.lower().count('the')\n    return float(count_the)\n",
    "def feature(text: str) -> float:\n    \"Count of sentences longer than ten words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of the most common word\"\n    from collections import Counter\n    word_counts = Counter(text.split())\n    max_count = max(word_counts.values(), default=0)\n    return float(max_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines that end with a punctuation mark\"\n    lines = text.splitlines()\n    punctuation_end_count = sum(1 for line in lines if line and line[-1] in '.!?')\n    return float(punctuation_end_count)\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_char_count = len(set(text))\n    return float(unique_char_count)\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.lower().split())\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Total number of unique words in the text\"\n    unique_word_count = len(set(text.split()))\n    return float(unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that end with a specific letter\"\n    letter = 's'\n    end_letter_count = sum(1 for word in text.split() if word.endswith(letter))\n    return float(end_letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Number of stop words in the text\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'of', 'a', 'it', 'that', 'this', 'for', 'was', 'on', 'with', 'as', 'by'}\n    word_list = text.lower().split()\n    stop_word_count = sum(1 for word in word_list if word in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of lowercase letters to total letters\"\n    lowercase_count = sum(1 for c in text if c.islower())\n    letter_count = sum(1 for c in text if c.isalpha())\n    return lowercase_count / letter_count if letter_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that include dialogue markers (e.g., quotation marks).\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\".*?\"|\\'(?:.*?)\\'', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that contain a question mark\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of ellipses (...) in the text\"\n    ellipse_count = text.count('...')\n    return float(ellipse_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(are|is|was|were|be|been|being|have|has|had|do|does|did|doing)\\b', word, re.IGNORECASE))\n    return verb_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase characters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return (uppercase_count / len(text)) * 100 if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of non-alphanumeric characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_alnum_count) / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-alphanumeric characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum())\n    return float(non_alnum_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique letters in the text\"\n    unique_letters = set(c.lower() for c in text if c.isalpha())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return (len(unique_letters) / total_letters * 100) if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Presence of quotes in the text indicating dialogue or citation\"\n    count = text.count('\"') + text.count(\"'\")\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than 5 characters\"\n    long_words_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_words_count)\n\n",
    "def feature(text: str) -> float:\n    'Percentage of unique words in the text'\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences\"\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return text.count('?') / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of upper case letters to total characters\"\n    upper_case_count = sum(1 for c in text if c.isupper())\n    total_count = len(text)\n    return upper_case_count / total_count if total_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences containing dialogue.\"\n    dialogue_sentences = [sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if '\"' in sentence]\n    if not dialogue_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in dialogue_sentences) / len(dialogue_sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing digits\"\n    digit_word_count = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of personal pronouns in the text\"\n    personal_pronouns = re.findall(r'\\b(I|me|my|mine|you|your|yours|he|him|his|she|her|hers|it|its|we|us|our|ours|they|them|their|theirs)\\b', text, re.IGNORECASE)\n    return float(len(personal_pronouns)) / len(text.split()) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph calculated using double line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing uppercase letters\"\n    upper_word_count = sum(1 for word in text.split() if any(c.isupper() for c in word))\n    return float(upper_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of punctuation marks in the text\"\n    return float(sum(1 for c in text if not c.isalnum() and not c.isspace()))\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words that contain digits\"\n    digit_words = [word for word in text.split() if any(c.isdigit() for c in word)]\n    return sum(len(word) for word in digit_words) / len(digit_words) if digit_words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return uppercase_count / total_letters if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    total_words = len(text.split())\n    numeric_count = sum(1 for word in text.split() if word.isdigit())\n    return (numeric_count / total_words) if total_words > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return float(upper_count)\n\n",
    "def feature(text: str) -> float:\n    \"Density of whitespace characters\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return whitespace_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    'Average sentence length'\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences ending with a special character\"\n    special_sentence_count = sum(1 for char in text if char in '.!?')\n    return float(special_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of vowels in the text\"\n    vowels_count = sum(1 for c in text.lower() if c in 'aeiou')\n    return float(vowels_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words used in the text that are adverbs.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in text.split())\n    words_count = len(text.split())\n    return syllable_count / words_count if words_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines containing a specific keyword\"\n    keyword = 'the'\n    keyword_line_count = sum(1 for line in text.splitlines() if keyword in line)\n    return float(keyword_line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lines with questions\"\n    lines = text.splitlines()\n    question_line_count = sum(1 for line in lines if '?' in line)\n    return (question_line_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of capitalized words\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1  # Count sentences\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences ending with exclamation marks\"\n    exclamation_count = text.count('!')\n    return float(exclamation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average word length of unique words\"\n    unique_words = set(text.split())\n    avg_length = sum(len(word) for word in unique_words) / len(unique_words) if unique_words else 0.0\n    return avg_length\n\n",
    "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    syllable_count = sum(len(re.findall(r'[aeiou]', word)) for word in text.split())\n    word_count = len(text.split())\n    return syllable_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of proper nouns to total words in the text\"\n    words = text.split()\n    proper_nouns = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return proper_nouns / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentences = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentences / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Number of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that contain questions\"\n    question_count = len(re.findall(r'\\?', text))\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    vowel_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 8 characters) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 8)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with exclamation marks\"\n    sentences = re.split(r'[.!?]', text)\n    exclamation_count = sum(1 for sentence in sentences if '!' in sentence)\n    return float(exclamation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per line\"\n    lines = text.splitlines()\n    word_count = len(text.split())\n    return word_count / len(lines) if lines else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraph_count = text.count('\\n') + 1 if text else 0\n    return float(paragraph_count)\n\n",
    "def feature(text: str) -> float:\n    \"Number of distinct characters in the text\"\n    distinct_char_count = len(set(text))\n    return float(distinct_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if c in ',;:()[]{}')\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraph_count = text.count('\\n') + 1\n    return float(paragraph_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return float(len(text) / sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    return float(sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are numeric\"\n    numeric_word_count = sum(1 for word in text.split() if word.isdigit())\n    return float(numeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of digits to total characters\"\n    total_chars = len(text)\n    digit_count = sum(1 for c in text if c.isdigit())\n    if total_chars == 0:\n        return 0.0\n    return digit_count / total_chars\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of capital letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    capital_count = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return capital_count / total_letters\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    total_chars = sum(len(sentence) for sentence in sentences)\n    return total_chars / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in words)\n    return syllable_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of verbs to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.endswith('ing') or word in ['is', 'are', 'was', 'were', 'be', 'being'])\n    return verb_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of total characters in the text excluding whitespace\"\n    return float(len(text) - text.count(' '))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase characters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that use exclamation marks\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are numeric\"\n    word_count = len(text.split())\n    numeric_count = sum(1 for word in text.split() if word.isdigit())\n    return (numeric_count / word_count * 100) if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 7 characters.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    word_count = len(text.split())\n    capitalized_count = sum(1 for word in text.split() if word.istitle())\n    return capitalized_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 7 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words with at least one vowel\"\n    vowel_word_count = sum(1 for word in text.split() if any(c in 'aeiouAEIOU' for c in word))\n    return (vowel_word_count / len(text.split()) * 100) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are stop words\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'of', 'a', 'it', 'that', 'this'}\n    words = text.split()\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    return stop_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stop words\"\n    stop_words = {'a', 'an', 'the', 'in', 'on', 'and', 'or', 'to', 'is', 'that'}\n    word_count = len(text.split())\n    stop_word_count = sum(1 for word in text.split() if word.lower() in stop_words)\n    return (stop_word_count / word_count * 100) if word_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average number of lines in each paragraph\"\n    paragraphs = text.split('\\n')\n    line_count = len(paragraphs)\n    return sum(len(p.splitlines()) for p in paragraphs) / line_count if line_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    'Ratio of uppercase letters to total letters in the text'\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Average number of consecutive spaces in the text\"\n    space_sequences = re.findall(r' {2,}', text)\n    return sum(len(seq) for seq in space_sequences) / len(space_sequences) if space_sequences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of distinct sentence-ending punctuation marks\"\n    punctuation_marks = set('.!?')\n    count = sum(1 for c in text if c in punctuation_marks)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    total_words = len(text.split())\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of total unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are digits\"\n    digit_word_count = sum(1 for word in text.split() if word.isdigit())\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return upper_count / total_letters if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length based on word count\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences if sentence.strip())\n    return total_length / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines with more than 15 characters\"\n    long_line_count = sum(1 for line in text.splitlines() if len(line) > 15)\n    return float(long_line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of characters in the text excluding spaces\"\n    char_count = sum(1 for c in text if not c.isspace())\n    return float(char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    punctuation_total = sum(sum(1 for c in sentence if not c.isalnum() and not c.isspace()) for sentence in sentences)\n    return punctuation_total / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Density of alphabetic characters in the text\"\n    letter_count = sum(c.isalpha() for c in text)\n    return letter_count / len(text) * 100 if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamatory sentences\"\n    exclamatory_count = text.count('!')\n    return float(exclamatory_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue = text.count('\"') // 2  # Assuming dialogue is enclosed in quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average letter count per word\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with more than 7 letters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Sum of lengths of all words in the text\"\n    total_length = sum(len(word) for word in text.split())\n    return float(total_length)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    return (sum(len(word) for word in words) / len(words)) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum() and not c.isspace()) / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (defined as words with more than 3 syllables) to total words.\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))\n    total_word_count = len(text.split())\n    return complex_word_count / total_word_count if total_word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return float(unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are commonly used in casual speech.\"\n    common_words = {'the', 'and', 'to', 'is', 'in', 'it', 'you', 'that', 'of', 'a'}\n    words = text.split()\n    if not words:\n        return 0.0\n    common_count = sum(1 for word in words if word.lower() in common_words)\n    return common_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of rhetorical questions (ending with '?')\"\n    return float(text.count('?'))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses (indicated by commas or conjunctions) per sentence\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    clauses_count = sum(text.count(',') + text.count('and') + text.count('but') for sentence in sentences)\n    return clauses_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are capitalized\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of consecutive repeating characters in the text\"\n    repeat_count = sum(1 for i in range(1, len(text)) if text[i] == text[i - 1])\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of repeated words in the text\"\n    words = text.split()\n    word_count = len(words)\n    repeated_count = word_count - len(set(words))\n    return float(repeated_count) if word_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Mean length of unique words\"\n    words = text.split()\n    unique_words = set(words)\n    return (sum(len(word) for word in unique_words) / len(unique_words)) if unique_words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are whitespace characters\"\n    if not text:\n        return 0.0\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text (e.g., 'important')\"\n    keyword_count = text.lower().count('important')\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(text.count('.') + text.count('!') + text.count('?') for text in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    total_chars = sum(len(word) for word in words)\n    return total_chars / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines with less than 5 words\"\n    lines = text.splitlines()\n    short_line_count = sum(1 for line in lines if len(line.split()) < 5)\n    return (short_line_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of punctuation marks in the text\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return float(punctuation_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n",
    "def feature(text: str) -> float:\n    \"Count of lines containing two or more words\"\n    return float(sum(1 for line in text.splitlines() if len(line.split()) >= 2))\n\n",
    "def feature(text: str) -> float:\n    \"Density of vowels in the text\"\n    if not text:\n        return 0.0\n    vowel_count = sum(1 for c in text.lower() if c in 'aeiou')\n    return vowel_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'and'\"\n    count_and = text.lower().count('and')\n    return float(count_and)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of lines in the text\"\n    lines = text.splitlines()\n    line_lengths = sum(len(line) for line in lines)\n    return line_lengths / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than six letters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of instances where the text expresses a comparison (e.g., 'like', 'as')\"\n    comparison_count = text.lower().count('like') + text.lower().count('as')\n    return float(comparison_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # Placeholder for complex word logic\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of lowercase letters to total letters\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    lowercase_count = sum(1 for c in text if c.islower())\n    return lowercase_count / total_letters if total_letters > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in terms of words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words that are in all lowercase\"\n    lowercase_word_count = sum(1 for word in text.split() if word.islower())\n    return float(lowercase_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences containing quotes in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    quote_sentences = len(re.findall(r'\"', text)) // 2  # Each quote pair is a sentence.\n    if sentences == 0:\n        return 0.0\n    return quote_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in the text, only considering words with 4 or more letters.\"\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouy') for word in words)\n    if not words:\n        return 0.0\n    return syllable_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences longer than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    words = text.split()\n    vowel_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(paragraph.split()) for paragraph in paragraphs)\n    return total_words / len(paragraphs) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs longer than 50 characters\"\n    paragraphs = text.split('\\n')\n    long_paragraph_count = sum(1 for para in paragraphs if len(para) > 50)\n    return float(long_paragraph_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words repeated more than once\"\n    word_counts = {}\n    for word in text.split():\n        word_counts[word.lower()] = word_counts.get(word.lower(), 0) + 1\n    repeat_count = sum(1 for count in word_counts.values() if count > 1)\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 5 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    comma_count = text.count(',')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return comma_count / (sentence_count + 1) if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text.\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that contain digits\"\n    digit_word_count = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of quotes to total sentences in the text.\"\n    quote_count = text.count('\"') + text.count(\"'\")\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(quote_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words containing digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    return (digit_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowel_start_count = sum(1 for word in text.split() if word and word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    words = text.split()\n    dialogue = text.count('\"')\n    if len(words) == 0:\n        return 0.0\n    return dialogue / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per line\"\n    line_count = sum(1 for line in text.splitlines() if line.strip())\n    char_count = len(text.replace('\\n', ''))\n    return char_count / line_count if line_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    exclamation_count = text.count('!')\n    return float(exclamation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Longest word length in the text\"\n    words = text.split()\n    return float(max((len(word) for word in words), default=0))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines containing more than 10 characters\"\n    lines = text.splitlines()\n    long_lines_count = sum(1 for line in lines if len(line) > 10)\n    return (long_lines_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 7 characters\"\n    long_words_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_words_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that exceed 15 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that use imagery or figurative language\"\n    imagery_words = re.findall(r'\\b(imagine|dream|wonder|feel|sense|see|taste|hear)\\b', text.lower())\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(imagery_words) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to total words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return sentence_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words repeated more than once\"\n    word_count = {}\n    for word in text.split():\n        word_count[word] = word_count.get(word, 0) + 1\n    repeat_count = sum(1 for count in word_count.values() if count > 1)\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with special characters\"\n    words = text.split()\n    special_char_word_count = sum(1 for word in words if not word.isalnum())\n    return special_char_word_count / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one punctuation mark to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    punctuated_sentences = len(re.findall(r'[^.!?]*[.!?][^.!?]*[.!?]', text))\n    return punctuated_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that contain more than 20 words to total sentences\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    long_sentences_count = sum(1 for s in sentences if len(s.split()) > 20)\n    return long_sentences_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    char_count = len(text)\n    return char_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of digits in the text\"\n    digit_count = sum(1 for char in text if char.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of the number of exclamation points in the text to indicate emotional intensity.\"\n    return float(text.count('!'))\n\n",
    "def feature(text: str) -> float:\n    'Density of alphanumeric characters'\n    alphanumeric_count = sum(1 for c in text if c.isalnum())\n    if len(text) == 0:\n        return 0.0\n    return alphanumeric_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    'Average sentence length in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences in the text that contain a question mark\"\n    question_count = len(re.findall(r'\\?', text))\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that contain a number\"\n    words = text.split()\n    numeric_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return (numeric_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of rhetorical questions in the text.\"\n    return float(len(re.findall(r'\\b(what|who|when|where|why|how)\\b[!?]', text.lower())))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that start with a vowel\"\n    words = text.split()\n    vowel_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return (vowel_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    words = text.split()\n    vowel_count = sum(1 for word in words if word.lower()[0] in 'aeiou')\n    return float(vowel_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that contain non-alphabetic characters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_alpha_count = sum(1 for word in words if any(not c.isalpha() for c in word))\n    return non_alpha_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words.\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return (question_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Measure of lexical diversity: the ratio of unique words to total words\"\n    unique_words = len(set(text.split()))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs\"\n    paragraphs = text.split('\\n')\n    paragraph_lengths = [len(p.split()) for p in paragraphs]\n    return sum(paragraph_lengths) / len(paragraph_lengths) if paragraphs else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average syllable count per word\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]+', word.lower()))\n    words = text.split()\n    total_syllables = sum(syllable_count(word) for word in words)\n    return (total_syllables / len(words)) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences longer than 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are over 7 characters long\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are entirely lowercase\"\n    lower_word_count = sum(1 for word in text.split() if word.islower())\n    return float(lower_word_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / len(text) * 100 if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are verbs\"\n    words = text.split()\n    verb_count = sum(1 for word in words if word.endswith('ing') or word.endswith('ed'))\n    return verb_count / len(words) * 100 if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are repeated\"\n    words = text.split()\n    word_count = len(words)\n    repeated_word_count = len(words) - len(set(words))\n    return (repeated_word_count / word_count * 100) if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs containing a specific keyword\"\n    keyword = 'specific'  # Example keyword\n    keyword_count = sum(1 for para in text.split('\\n') if keyword in para)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    clause_count = len(re.findall(r'[,;]|\\band\\b|\\bor\\b|\\bbut\\b', text)) + text.count('.') + text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(clause_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique characters in the text\"\n    unique_chars = len(set(text))\n    return float(unique_chars) / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in words.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(s.split()) for s in sentences) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Longest word length in the text\"\n    longest_word_length = max((len(word) for word in text.split()), default=0)\n    return float(longest_word_length)\n",
    "def feature(text: str) -> float:\n    \"Percentage of characters that are punctuation\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_chars == 0:\n        return 0.0\n    return punctuation_count / total_chars * 100\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    chars = len(text)\n    if not sentences:\n        return 0.0\n    return chars / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    return exclamation_count / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are short (less than 4 characters)\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 4)\n    return (short_word_count / len(words)) * 100 if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'am', 'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'go', 'goes', 'said', 'say', 'get', 'gets', 'make', 'makes'})\n    return verb_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of the number of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    unique_words_count = len(set(words))\n    return (unique_words_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph based on line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are capitalized\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Number of specific keywords in the text\"\n    keywords = ['important', 'key', 'critical']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of non-empty lines in the text\"\n    non_empty_line_count = sum(1 for line in text.splitlines() if line.strip())\n    return float(non_empty_line_count)\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(text.split())\n    return word_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return unique_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.split('. ')\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of short words (less than 4 characters)\"\n    if len(text) == 0:\n        return 0.0\n    short_word_count = sum(1 for word in text.split() if len(word) < 4)\n    return short_word_count / len(text.split())\n\n",
    "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., 'however', 'moreover', 'meanwhile') in the text\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'nevertheless', 'meanwhile']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words divided by total number of words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of non-whitespace characters per word\"\n    words = text.split()\n    return sum(len(word) for word in words if word) / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'a', 'it', 'of', 'that', 'I', 'on', 'you', 'this', 'for', 'with'}\n    stop_word_count = sum(1 for word in text.split() if word.lower() in stop_words)\n    return float(stop_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return float(len(paragraphs))\n\n",
    "def feature(text: str) -> float:\n    'Count of instances of the word \"I\" to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    length_sum = sum(len(sentence) for sentence in sentences)\n    return length_sum / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that end with 'ing'\"\n    ing_word_count = sum(1 for word in text.split() if word.endswith('ing'))\n    return float(ing_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of uncommon words (defined as words that appear twice or less)\"\n    words = text.lower().split()\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    uncommon_count = sum(1 for count in word_counts.values() if count <= 2)\n    return float(uncommon_count)\n\n",
    "def feature(text: str) -> float:\n    \"Density of numbers in the text\"\n    number_count = len(re.findall(r'\\d+', text))\n    return number_count / (len(text) or 1)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that appear more than once\"\n    words = text.split()\n    repeated_word_count = sum(1 for word in set(words) if words.count(word) > 1)\n    return float(repeated_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    return float(sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowel_start_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]+', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-alphanumeric characters\"\n    non_alphanumeric_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_alphanumeric_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines that are empty or whitespace\"\n    lines = text.splitlines()\n    empty_line_count = sum(1 for line in lines if not line.strip())\n    return (empty_line_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are palindromes\"\n    palindrome_count = sum(1 for word in text.split() if word.lower() == word[::-1].lower() and len(word) > 1)\n    return float(palindrome_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of digits to total characters\"\n    total_chars = len(text)\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quoted speech)\"\n    dialogue_count = len(re.findall(r'\".+?\"', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of letters to total characters in the text\"\n    total_chars = len(text)\n    letter_count = sum(1 for c in text if c.isalpha())\n    return letter_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    average_length = sum(len(word) for word in words) / len(words)\n    return average_length\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    char_count = sum(len(word) for word in words)\n    return char_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than five characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 10)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text (basic heuristic)\"\n    passive_voice_regex = r'\\b(is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    return len(re.findall(passive_voice_regex, text.lower())) / len(re.findall(r'\\w+', text)) if len(text) > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences.\"\n    sentences = text.split('.')\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentences) / (len(sentences) or 1)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines with more than 5 words\"\n    lines = text.splitlines()\n    long_word_lines = sum(1 for line in lines if len(line.split()) > 5)\n    return float(long_word_lines)\n\n",
    "def feature(text: str) -> float:\n    \"Count of rhetorical or literary devices used in the text (e.g., metaphors, similes)\"\n    patterns = ['like', 'as', 'metaphor', 'symbolizes', 'represents']\n    count = sum(text.lower().count(pattern) for pattern in patterns)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    'Ratio of words that contain digits to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric words in the text\"\n    numeric_word_count = sum(1 for word in text.split() if word.isdigit())\n    return float(numeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per line\"\n    lines = text.splitlines()\n    word_count = len(text.split())\n    return word_count / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of characters that are digits\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return (digit_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in characters\"\n    paragraphs = text.split('\\n')\n    total_chars = sum(len(para) for para in paragraphs)\n    return total_chars / len(paragraphs) if paragraphs else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of capitalized words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing at least one exclamation mark\"\n    sentences = re.findall(r'(.*?[.!?])', text)\n    exclamation_count = sum(1 for sentence in sentences if '!' in sentence)\n    return float(exclamation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = set(text.split())\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of capitalized words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.isupper())\n    return (capitalized_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are repeated consecutively\"\n    words = text.split()\n    repeat_count = sum(1 for i in range(1, len(words)) if words[i].lower() == words[i-1].lower())\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing at least one digit.\"\n    return float(len(re.findall(r'\\w*\\d\\w*', text)))\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+(?:ly)?\\b', text)  # Basic heuristic to find adjectives\n    return float(len(adjectives))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of emotional words to total words in the text\"\n    emotional_words = re.findall(r'\\b(happy|sad|angry|joy|fear|love|hate|surprised|disgust)\\b', text, re.IGNORECASE)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(emotional_words) / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Number of different punctuation marks used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of pronouns to total words in the text\"\n    pronouns = ['i', 'me', 'my', 'we', 'us', 'our', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'they', 'them', 'their']\n    word_count = len(text.split())\n    pronoun_count = sum(text.lower().count(pronoun) for pronoun in pronouns)\n    if word_count == 0:\n        return 0.0\n    return pronoun_count / word_count\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for a minimum word count.\"\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters in the text\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return float(long_words_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / sentence_count if sentence_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return (whitespace_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in number of characters\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph) for paragraph in paragraphs) / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of parentheses to total characters in the text\"\n    return text.count('(') / max(len(text), 1)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length measured by the number of words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of digits per word\"\n    digit_count = sum(sum(1 for c in word if c.isdigit()) for word in text.split())\n    return digit_count / len(text.split()) if text.split() else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return (long_word_count / len(words)) * 100 if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences with over 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 10])\n    if sentences == 0:\n        return 0.0\n    return float(long_sentences) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n",
    "def feature(text: str) -> float:\n    \"Count of long words (more than 7 characters)\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that contain at least one digit.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of words longer than 5 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    letter_count = sum(1 for c in text if c.isalpha())\n    return uppercase_count / letter_count if letter_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if re.search(r'ly$', word.lower())])\n    return adverbs / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    compound_sentences = len(re.findall(r'[,.]', text))  # Assuming compound sentences contain commas.\n    if sentences == 0:\n        return 0.0\n    return compound_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are longer than 7 characters\"\n    long_word_count = len([word for word in text.split() if len(word) > 7])\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of unique characters per word\"\n    words = text.split()\n    unique_char_count = sum(len(set(word)) for word in words)\n    return unique_char_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that ask questions\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of the most common character\"\n    from collections import Counter\n    char_counts = Counter(text)\n    max_count = max(char_counts.values(), default=0)\n    return float(max_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of different punctuation marks used\"\n    punctuation_set = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_set))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of numeric characters in the text\"\n    numeric_count = sum(1 for c in text if c.isdigit())\n    total_count = len(text)\n    return numeric_count / total_count if total_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are split into hyphenated forms to total words\"\n    words = text.split()\n    hyphenated_words = sum(1 for word in words if '-' in word)\n    if len(words) == 0:\n        return 0.0\n    return hyphenated_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 0 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    character_count = len(text)\n    return character_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    word_count = len(text.split())\n    return (word_count / sentence_count) if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric digits in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n",
    "def feature(text: str) -> float:\n    \"Count of repeated words in the text\"\n    words = text.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    repeated_word_count = sum(1 for count in word_count.values() if count > 1)\n    return float(repeated_word_count)\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    char_count = len(text)\n    return char_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words in the text\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Total number of conjunctions in the text\"\n    conjunctions = ['and', 'but', 'or', 'so', 'for', 'nor', 'yet']\n    word_list = text.split()\n    conjunction_count = sum(1 for word in word_list if word.lower() in conjunctions)\n    return float(conjunction_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of conjunctions in the text\"\n    conjunctions = {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'}\n    conjunction_count = sum(1 for word in text.split() if word.lower() in conjunctions)\n    return float(conjunction_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentence_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lowercase letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    lowercase_count = sum(1 for c in text if c.islower())\n    return lowercase_count / total_letters if total_letters else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to words in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return sentence_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of filler words (e.g., um, like, you know) to total words\"\n    filler_words = len(re.findall(r'\\b(um|like|you know|actually|basically|seriously|totally)\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return filler_words / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Average length of punctuation marks between words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    return punctuation_count / word_count if word_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific AI-related keywords in the text\"\n    keywords = ['AI', 'artificial', 'algorithm', 'generate', 'model', 'assistant']\n    count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that contain questions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    question_count = sum(1 for sentence in sentences if '?' in sentence)\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    exclamation_count = text.count('!')\n    return float(exclamation_count)\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    letter_count = sum(1 for c in text if c.isalpha())\n    return upper_count / letter_count if letter_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of lines with more than 15 characters\"\n    lines = text.splitlines()\n    long_line_count = sum(1 for line in lines if len(line) > 15)\n    return long_line_count / len(lines) if lines else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that contain questions\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric digits in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    vowel_word_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of uppercase to lowercase letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    lower_count = sum(1 for c in text if c.islower())\n    return upper_count / lower_count if lower_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters\"\n    unique_chars = len(set(text))\n    return unique_chars / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are conjunctions to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'so', 'for', 'nor', 'yet', 'either', 'neither', 'whether'})\n    return conjunctions / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that end with a question mark\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 5 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of the least common word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    return float(min(word_counts.values()))\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences shorter than 5 words\"\n    sentences = re.split(r'[.!?]', text)\n    short_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return float(short_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return float(upper_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one metaphor or simile.\"\n    metaphor_count = len(re.findall(r'\\b(as (?:\\w+\\s+)?\\w+ as|like)\\b', text, re.IGNORECASE))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return metaphor_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Density of descriptive adjectives in the text.\"\n    words = text.split()\n    adjectives = sum(1 for word in words if word.lower() in ['great', 'beautiful', 'wonderful', 'amazing', 'trivial'])  # Example adjectives\n    return adjectives / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric characters in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences longer than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return (long_sentence_count / len(sentences) * 100) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Calculate the ratio of uppercase letters to total characters in the text.\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines containing the word 'and'\"\n    lines = text.splitlines()\n    and_count = sum(1 for line in lines if 'and' in line)\n    return float(and_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    total_words = len(text.split())\n    return total_words / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct characters in the text\"\n    unique_char_count = len(set(text))\n    return float(unique_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+ly\\b', text)  # Rough approximation of adjectives\n    return float(len(adjectives))\n\n",
    "def feature(text: str) -> float:\n    \"Total number of different words in the text (case sensitive)\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return float(unique_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total count of numeric characters in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return float(digit_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of punctuation characters in the text\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return (upper_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of numeric characters in the text\"\n    total_chars = len(text)\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of total punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sensory words (words related to sight, sound, touch, taste, smell)\"\n    sensory_words = re.findall(r'\\b(see|hear|feel|taste|smell)\\b', text, flags=re.IGNORECASE)  # Add more sensory-focused words as needed\n    return float(len(sensory_words))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of non-alphanumeric characters to total characters\"\n    non_alpha_count = sum(1 for c in text if not c.isalnum())\n    return non_alpha_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of punctuation characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_count = len(re.findall(r'\\\".*?\\\"', text)) + len(re.findall(r'\\'.*?\\'', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 10 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for s in sentences if len(s.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of sentences per 100 words\"\n    word_count = len(text.split())\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return (sentence_count / word_count) * 100 if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    dialogue_count = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return dialogue_count / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Average number of digits per word in the text\"\n    words = text.split()\n    digit_count = sum(sum(1 for c in word if c.isdigit()) for word in words)\n    return digit_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 5 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences to paragraphs\"\n    paragraph_count = len(text.split('\\n'))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / paragraph_count if paragraph_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    total_length = sum(len(word) for word in words)\n    return total_length / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.findall(r'[,;]', text)\n    total_sentences = len(re.findall(r'[^.!?]+', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(clauses) / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of total characters that are whitespace\"\n    total_chars = len(text)\n    whitespace_count = sum(1 for c in text if c.isspace())\n    if total_chars == 0:\n        return 0.0\n    return whitespace_count / total_chars\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    return float(text.count('!'))\n\n",
    "def feature(text: str) -> float:\n    \"Count of exclamatory sentences in the text\"\n    exclamatory_count = text.count('!')\n    return float(exclamatory_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average count of different punctuation marks per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return punctuation_count / sentence_count if sentence_count > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of dialogue to total number of sentences\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences containing questions in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if c in '.,;:()[]{}')\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    total_length = sum(len(s) for s in sentences)\n    return (total_length / len(sentences)) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of question marks in the text\"\n    question_mark_count = text.count('?')\n    return float(question_mark_count)\n",
    "def feature(text: str) -> float:\n    \"Count of text lines containing a specific word\"\n    target_word = 'and'  # Example target word, can be parameterized if needed\n    line_count = sum(1 for line in text.splitlines() if target_word in line)\n    return float(line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of contractions in the text.\"\n    return len(re.findall(r\"\\b\\w+'[t|s|ve|m|ll|d|re]\\b\", text))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if len(words) == 0:\n        return 0.0\n    return float(long_words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of instances of the word 'the' in the text\"\n    return float(text.lower().count('the'))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing conjunctions to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunction_sentences = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return conjunction_sentences / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are longer than four letters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 4)\n    return long_word_count / len(words) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing exclamation marks\"\n    exclamation_count = len(re.findall(r'!', text))\n    return float(exclamation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words repeated more than twice\"\n    from collections import Counter\n    word_counts = Counter(text.split())\n    repeated_count = sum(1 for count in word_counts.values() if count > 2)\n    return float(repeated_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    upper_letters = sum(1 for c in text if c.isupper())\n    return upper_letters / total_letters * 100 if total_letters > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of question marks to total punctuation marks.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_mark_count = text.count('?')\n    if punctuation_count == 0:\n        return 0.0\n    return question_mark_count / punctuation_count\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are at least six letters long to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) >= 6)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating sentence complexity\"\n    clause_count = sum(len(re.findall(r'[;,.]', sentence)) + 1 for sentence in re.split(r'[.!?]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return clause_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters to total letters\"\n    upper_count = sum(1 for c in text if c.isupper())\n    letter_count = sum(1 for c in text if c.isalpha())\n    return upper_count / letter_count if letter_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return (sum(len(word) for word in unique_words) / len(unique_words)) if unique_words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of characters that are punctuation\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text) * 100) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 7 characters to total words\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return float(long_words) / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of complex (three or more syllables) words\"\n    complex_word_pattern = r'\\b\\w{3,}\\b'\n    complex_words = re.findall(complex_word_pattern, text)\n    return float(len(complex_words)) / max(1, len(text.split()))\n\n",
    "def feature(text: str) -> float:\n    'Total number of punctuation marks'\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    char_count = sum(len(sentence) for sentence in re.split(r'[.!?]', text))\n    return char_count / len(sentences) if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Ratio of alphabetic to numeric characters in the text\"\n    alpha_count = sum(1 for c in text if c.isalpha())\n    digit_count = sum(1 for c in text if c.isdigit())\n    return alpha_count / digit_count if digit_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of phrases (separated by commas or semicolons).\"\n    phrases = re.findall(r'[^,;]+', text)\n    return len(phrases)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are entirely uppercase\"\n    uppercase_word_count = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_word_count)\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that are questions\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines containing more than one sentence\"\n    line_count = sum(1 for line in text.splitlines() if line.count('.') + line.count('!') + line.count('?') > 1)\n    return float(line_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average syllable count per word\"\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word.lower())) for word in text.split())\n    word_count = len(text.split())\n    return syllable_count / word_count if word_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of text that is comprised of dialogue.\"\n    dialogues = len(re.findall(r'\"[^\"]*\"', text)) + len(re.findall(r\"'[^']*'\", text))\n    words = len(re.findall(r'\\w+', text))\n    return dialogues / words if words > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of non-whitespace characters\"\n    return float(len(text.replace(' ', '').replace('\\n', '').replace('\\t', '')))\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines with more than 15 characters\"\n    lines = text.splitlines()\n    long_lines_count = sum(1 for line in lines if len(line) > 15)\n    return float(long_lines_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Density of vowels in the text\"\n    vowel_count = sum(1 for c in text if c in 'aeiouAEIOU')\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return vowel_count / total_chars\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(para.split()) for para in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return total_words / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than ten words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with more than 10 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of letters in the total character count\"\n    letter_count = sum(1 for c in text if c.isalpha())\n    return (letter_count / len(text) * 100) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are contractions.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are digits\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than five characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 5)\n    return float(long_word_count)\n",
    "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamatory_count = text.count('!') + text.count('?')\n    total_sentences = text.count('.') + exclamatory_count\n    return float(exclamatory_count / total_sentences) if total_sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of paragraphs that start with a capital letter to total paragraphs.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    capital_start_count = sum(1 for p in paragraphs if p.strip() and p[0].isupper())\n    return capital_start_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Total number of lowercase letters in the text\"\n    lower_count = sum(1 for c in text if c.islower())\n    return float(lower_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of total words that are conjunctions.\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(1 for word in words if word.lower() in conjunctions) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of the number of exclamation marks to total sentence count\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = text.count('!')\n    return exclamation_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(text.split())\n    return float(word_count) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per line\"\n    lines = text.splitlines()\n    total_words = sum(len(line.split()) for line in lines)\n    return total_words / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_question_count = len(re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE))\n    return float(rhetorical_question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of questions marks in the text\"\n    return float(text.count('?'))\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    vowels = 'aeiouAEIOU'\n    vowel_start_count = sum(1 for word in text.split() if word[0] in vowels)\n    return float(vowel_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-space characters to total characters\"\n    non_space_count = sum(1 for c in text if not c.isspace())\n    return non_space_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return (unique_words / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are verbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did'})  # Simple verb set\n    return verb_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific phrases in the text\"\n    phrases = ['thank you', 'please', 'best regards']\n    phrase_count = sum(text.lower().count(phrase) for phrase in phrases)\n    return float(phrase_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a capital letter\"\n    capitalized_count = sum(1 for word in text.split() if word.istitle())\n    return float(capitalized_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences that are questions\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    if sentence_count == 0:\n        return 0.0\n    return (question_count / sentence_count) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Count of uncommon words (words not in a predefined common English set)\"\n    common_words = set(['the', 'is', 'at', 'of', 'on', 'and', 'a', 'to', 'in', 'it', 'that', 'with', 'as', 'for', 'was', 'by', 'an', 'be', 'this', 'or', 'from'])\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    distinct_word_count = len(set(text.split()))\n    return float(distinct_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a question mark\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence and sentence[0].isupper())\n    return float(capital_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences longer than 20 characters\"\n    long_sentences = len([sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if len(sentence) > 20])\n    return float(long_sentences)\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'of', 'a', 'it', 'that', 'on', 'for', 'with'}\n    word_count = sum(1 for word in text.lower().split() if word in stop_words)\n    return float(word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return complex_sentences / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words with two or more syllables to total words.\"\n    words = text.split()\n    polysyllabic_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 1)\n    if not words:\n        return 0.0\n    return polysyllabic_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words in the text\"\n    uppercase_words_count = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_words_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per line\"\n    lines = text.splitlines()\n    character_count = sum(len(line) for line in lines)\n    return character_count / len(lines) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words that are common first-person pronouns (I, me, my, mine) to total words\"\n    first_person_pronouns = ['i', 'me', 'my', 'mine']\n    words = text.split()\n    count_pronouns = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return count_pronouns / max(len(words), 1)\n\n",
    "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing a specific keyword 'important'\"\n    sentences = re.split(r'[.!?]', text)\n    important_sentence_count = sum('important' in s.lower() for s in sentences)\n    return float(important_sentence_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but|or', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences with strong emotional words to total sentences\"\n    emotional_words = re.findall(r'\\b(love|hate|fear|joy|mad|happy|sad|excited|angry|disgusted)\\b', text, re.IGNORECASE)\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(emotional_words) / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of non-alphanumeric characters\"\n    if len(text) == 0:\n        return 0.0\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alnum_count / len(text) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 5 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words containing vowels\"\n    words = text.split()\n    vowel_word_count = sum(1 for word in words if any(c in 'aeiouAEIOU' for c in word))\n    return vowel_word_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    return long_sentences / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that contain numbers\"\n    words = text.split()\n    alphanumeric_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return float(alphanumeric_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_sentences = len(re.findall(r'\".*?\"', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of consecutive repeated characters in the text\"\n    repeat_count = sum(1 for i in range(len(text) - 1) if text[i] == text[i + 1])\n    return float(repeat_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words containing numbers in the text\"\n    words_with_numbers = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    return float(words_with_numbers)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return word_count / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are exactly three letters long\"\n    words = text.split()\n    three_letter_count = sum(1 for word in words if len(word) == 3)\n    return float(three_letter_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are single characters\"\n    words = text.split()\n    single_char_count = sum(1 for word in words if len(word) == 1)\n    return (single_char_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of numeric values in the text\"\n    numeric_count = len(re.findall(r'\\d+', text))\n    return float(numeric_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words containing at least one vowel\"\n    words = text.split()\n    if not words:\n        return 0.0\n    vowel_count = sum(1 for word in words if any(c in 'aeiou' for c in word.lower()))\n    return vowel_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of text that is whitespace\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return (whitespace_count / len(text) * 100) if text else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of words that contain digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = {'important', 'note', 'please', 'urgent'}  # Example keywords\n    word_list = text.lower().split()\n    keyword_count = sum(1 for word in word_list if word in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are less than 3 characters\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 3)\n    return short_word_count / (len(words) or 1)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = [s for s in re.split(r'[.!?]', text) if s]\n    if not sentences:\n        return 0.0\n    word_count = sum(len(s.split()) for s in sentences)\n    return word_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of capitalized words in the text\"\n    return float(len([word for word in text.split() if word.istitle()]))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of quotes to total words in the text.\"\n    quotes = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return quotes / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are questions\"\n    return float(text.count('?'))\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return (long_word_count / len(words)) * 100 if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a conjunction\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunction_count = len(re.findall(r'\\b(and|but|or|nor|for|so|yet)\\s', text, re.IGNORECASE))\n    if sentences == 0:\n        return 0.0\n    return float(conjunction_count) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of repeated words in the text\"\n    words = text.split()\n    repeated_words = sum(1 for word in set(words) if words.count(word) > 1)\n    return float(repeated_words)\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for common phrases.\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = len(set(text))\n    return float(unique_chars)\n\n",
    "def feature(text: str) -> float:\n    \"Count the number of semi-colons in the text.\"\n    return text.count(';')\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    words = len(text.split())\n    if len(sentences) == 0:\n        return 0.0\n    return words / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraph_count = text.count('\\n') + 1\n    return float(paragraph_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences containing a specific keyword\"\n    keyword = 'the'  # Example keyword for demonstration\n    sentences = re.split(r'[.!?]', text)\n    keyword_count = sum(1 for sentence in sentences if keyword in sentence)\n    return (keyword_count / len(sentences) * 100) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct words used in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n",
    "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    clauses = sum(text.count(',') + text.count('and') + text.count('but') for text in re.findall(r'[^.!?]+[.!?]', text))\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return clauses / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    'Ratio of sentences containing dialogue to total sentences in the text.'\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 6 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]+', word.lower()))\n    \n    words = text.split()\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    distinct_words_count = len(set(text.split()))\n    return float(distinct_words_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average word length per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(word) for sentence in sentences for word in sentence.split())\n    return total_length / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of short words (length <= 3)\"\n    short_word_count = sum(1 for word in text.split() if len(word) <= 3)\n    return float(short_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of uppercase words in the text\"\n    uppercase_words = sum(1 for word in text.split() if word.isupper())\n    return float(uppercase_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that are all digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if word.isdigit())\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific transition words used in the text\"\n    transition_words = ['however', 'furthermore', 'meanwhile', 'consequently', 'therefore']\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    transition_count = sum(text.lower().count(word) for word in transition_words)\n    return transition_count / word_count\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that start with a vowel\"\n    words = text.split()\n    vowel_start_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return (vowel_start_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters\"\n    unique_char_count = len(set(text))\n    return unique_char_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stop words\"\n    stop_words = {'the', 'is', 'in', 'and', 'a', 'to', 'of', 'that', 'it', 'you'}\n    words = text.split()\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    return (stop_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences containing a question mark\"\n    sentence_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + sentence_count\n    return float(sentence_count / total_sentences * 100) if total_sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of times 'and', 'or', 'but' appear in the text\"\n    conjunctions = ['and', 'or', 'but']\n    conjunction_count = sum(text.lower().split().count(conj) for conj in conjunctions)\n    return float(conjunction_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines that contain numbers\"\n    lines = text.splitlines()\n    number_lines_count = sum(1 for line in lines if any(c.isdigit() for c in line))\n    return (number_lines_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase words in the text\"\n    words = text.split()\n    uppercase_word_count = sum(1 for word in words if word.isupper())\n    return (uppercase_word_count / len(words)) * 100 if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of punctuation characters to total characters\"\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences containing direct speech to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    speech_count = sum(1 for sentence in sentences if '\"' in sentence)\n    if not sentences:\n        return 0.0\n    return float(speech_count) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words ending with -ing to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ing_count = sum(1 for word in words if word.endswith('ing'))\n    return ing_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of sentences longer than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) * 100 if sentences else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    'Count of words longer than six letters'\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average word length in words containing at least one vowel\"\n    words = text.split()\n    vowel_words = [word for word in words if any(c in 'aeiouAEIOU' for c in word)]\n    if not vowel_words:\n        return 0.0\n    return sum(len(word) for word in vowel_words) / len(vowel_words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    lengths = [len(p.split()) for p in paragraphs if p.strip()]\n    if not lengths:\n        return 0.0\n    return sum(lengths) / len(lengths)\n",
    "def feature(text: str) -> float:\n    \"Count of long words (10+ characters)\"\n    long_word_count = sum(1 for word in text.split() if len(word) >= 10)\n    return float(long_word_count)\n",
    "def feature(text: str) -> float:\n    \"Count of numbers in the text\"\n    return float(sum(1 for word in text.split() if word.isdigit()))\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Counts the number of unique characters in the text\"\n    return float(len(set(text)))\n\n",
    "def feature(text: str) -> float:\n    \"Count of lines in the text\"\n    line_count = len(text.splitlines())\n    return float(line_count)\n",
    "def feature(text: str) -> float:\n    \"Count of vowels in the text\"\n    vowels_count = sum(1 for char in text if char.lower() in 'aeiou')\n    return float(vowels_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are letters\"\n    if len(text) == 0:\n        return 0.0\n    letter_count = sum(1 for c in text if c.isalpha())\n    return letter_count / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence, excluding non-dialogue sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = re.findall(r'\\\".*?\\\"', text)\n    word_count = sum(len(sentence.split()) for sentence in dialogue_sentences)\n    if not dialogue_sentences:\n        return 0.0\n    return word_count / len(dialogue_sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if word.lower() in ['good', 'bad', 'happy', 'sad', 'beautiful', 'big', 'small', 'bright', 'dark'])\n    return adjectives / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    import re\n    adjectives = re.findall(r'\\b(\\w+ed|\\w+ing)\\b', text)\n    return float(len(adjectives))\n\n",
    "def feature(text: str) -> float:\n    \"Length of the longest word in the text\"\n    longest_word_length = max((len(word) for word in text.split()), default=0)\n    return float(longest_word_length)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words containing at least one vowel\"\n    words = text.split()\n    vowel_word_count = sum(1 for word in words if any(c in 'aeiou' for c in word.lower()))\n    return (vowel_word_count / len(words) * 100) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return (upper_count / len(text)) * 100 if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    return word_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of lowercase letters in the text\"\n    lower_count = sum(1 for c in text if c.islower())\n    return float(lower_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average character count per word\"\n    words = text.split()\n    total_chars = sum(len(word) for word in words)\n    return total_chars / len(words) if words else 0.0\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that contain digits\"\n    words = text.split()\n    digit_word_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    return (digit_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of using the passive voice (e.g., 'was done', 'is being')\"\n    passive_phrases = ['is', 'was', 'were', 'be', 'being']\n    passive_count = sum(text.lower().count(phrase) for phrase in passive_phrases)\n    return float(passive_count)\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = ['important', 'urgent', 'note']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = len(re.findall(r'!', text))\n    return exclamation_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Count of words starting with a vowel\"\n    words = text.split()\n    vowel_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words longer than 5 characters\"\n    return float(len([word for word in text.split() if len(word) > 5]))\n\n",
    "def feature(text: str) -> float:\n    \"Frequency of passive voice usage based on common passive constructions\"\n    passive_patterns = ['is', 'are', 'was', 'were', 'be', 'being', 'been']\n    count_passive = sum(text.lower().count(pattern) for pattern in passive_patterns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count_passive / total_words\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that contain question marks\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences ending with punctuation\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    punctuation_count = sum(1 for sentence in sentences if sentence.strip().endswith(tuple('.!?')))\n    return (punctuation_count / len(sentences) * 100) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that end with exclamation marks.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return text.count('!') / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of unique characters in the text\"\n    unique_chars = len(set(text))\n    return unique_chars / len(text) if text else 0.0\n",
    "def feature(text: str) -> float:\n    \"Count of stop words in the text\"\n    stop_words = set(['the', 'and', 'is', 'in', 'to', 'of', 'it', 'that', 'this', 'on'])  # Example stop words\n    stop_word_count = sum(1 for word in text.lower().split() if word in stop_words)\n    return float(stop_word_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stopwords\"\n    stopwords = {'the', 'is', 'in', 'and', 'to', 'it', 'of', 'that', 'a'}  # Example stopwords\n    words = text.lower().split()\n    stopword_count = sum(1 for word in words if word in stopwords)\n    return (stopword_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    total_characters = sum(len(sentence) for sentence in sentences)\n    return total_characters / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct punctuation characters used\"\n    punctuation_count = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    return float(punctuation_count)\n",
    "def feature(text: str) -> float:\n    \"Density of consonants in the text\"\n    consonant_count = sum(1 for char in text if char.isalpha() and char.lower() not in 'aeiou')\n    return consonant_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Number of quoted phrases in the text\"\n    quote_count = text.count('\"')\n    return float(quote_count) / 2  # Each quote usually has a start and an end\n",
    "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_char_count = len(set(text))\n    return float(unique_char_count)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words longer than 8 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 8)\n    return (long_word_count / len(words) * 100) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words with three or more syllables\"\n    # Simple heuristic: vowels count as syllables\n    def syllable_count(word):\n        return sum(1 for c in word if c in 'aeiouAEIOU')\n    long_word_count = sum(1 for word in text.split() if syllable_count(word) >= 3)\n    return float(long_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of common English stopwords\"\n    stopwords = {'the', 'is', 'in', 'and', 'to', 'of', 'a', 'it', 'that'}\n    words = text.lower().split()\n    stopword_count = sum(1 for word in words if word in stopwords)\n    return float(stopword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that have digits\"\n    digit_word_count = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    return float(digit_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    questions = text.count('?')\n    return questions / sentences if sentences > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = len(re.findall(r'\\?+', text))\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence and sentence[0].isupper())\n    return float(capital_start_count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words\"\n    words = text.split()\n    number_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    if not words:\n        return 0.0\n    return number_count / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = ['bad', 'sad', 'hate', 'angry', 'fail']\n    count = sum(text.lower().count(word) for word in negative_words)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    char_count = len(text)\n    return char_count / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of compound words in the text\"\n    compound_word_count = sum(1 for word in text.split() if '-' in word)\n    return float(compound_word_count)\n\n",
    "def feature(text: str) -> float:\n    \"Number of times the most common word appears\"\n    from collections import Counter\n    word_counts = Counter(text.lower().split())\n    return float(word_counts.most_common(1)[0][1]) if word_counts else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are alphabetic\"\n    total_chars = len(text)\n    alpha_count = sum(1 for c in text if c.isalpha())\n    return alpha_count / total_chars if total_chars > 0 else 0.0\n",
    "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    comma_count = text.count(',')\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum()) / len(text)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of exclamation marks to total punctuation\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    return exclamation_count / punctuation_count if punctuation_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of sentences that contain emotion-laden language.\"\n    emotion_words = [r'\\b(happy|sad|angry|love|hate|fear|joy|dislike|enjoy)\\b']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotion_count = sum(1 for sentence in sentences if re.search(emotion_words[0], sentence, re.IGNORECASE))\n    return emotion_count / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Count of words ending with 'ing'\"\n    ing_word_count = sum(1 for word in text.split() if word.endswith('ing'))\n    return float(ing_word_count)\n",
    "def feature(text: str) -> float:\n    \"Percentage of lines starting with a capital letter\"\n    lines = text.splitlines()\n    capital_start_count = sum(1 for line in lines if line and line[0].isupper())\n    return (capital_start_count / len(lines) * 100) if lines else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of words that start with a vowel\"\n    vowel_count = sum(1 for word in text.split() if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n",
    "def feature(text: str) -> float:\n    \"Total number of characters in the text\"\n    return float(len(text))\n\n",
    "def feature(text: str) -> float:\n    \"Average number of parentheses per sentence, suggesting elaboration or commentary\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return float(text.count('(') + text.count(')')) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of specific keywords in the text\"\n    keywords = ['important', 'critical', 'urgent']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return (word_count / sentence_count) if sentence_count > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of words that are contractions to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words)\n\n",
    "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(p.split()) for p in paragraphs)\n    if len(paragraphs) == 0 or total_words == 0:\n        return 0.0\n    return total_words / len(paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    total_chars = len(text)\n    uppercase_count = sum(1 for c in text if c.isupper())\n    if total_chars == 0:\n        return 0.0\n    return uppercase_count / total_chars * 100\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of spaces to total characters\"\n    space_count = text.count(' ')\n    return space_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, furthermore) in the text\"\n    transition_words = ['however', 'furthermore', 'therefore', 'meanwhile', 'consequently', 'likewise', 'in addition']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    if len(sentences) == 0:\n        return 0.0\n    return float(word_count) / len(sentences)\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    word_counts = [len(sentence.split()) for sentence in sentences]\n    return sum(word_counts) / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Percentage of words that are stopwords\"\n    stopwords = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'it', 'that', 'this'])  # Add more as needed\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    stopword_count = sum(1 for word in words if word in stopwords)\n    return stopword_count / len(words) * 100\n\n",
    "def feature(text: str) -> float:\n    \"Longest word length in the text\"\n    words = text.split()\n    longest_word_length = max((len(word) for word in words), default=0)\n    return float(longest_word_length)\n\n",
    "def feature(text: str) -> float:\n    \"Average length of words that start with an uppercase letter.\"\n    words = text.split()\n    uppercase_words = [word for word in words if word[0].isupper()]\n    if not uppercase_words:\n        return 0.0\n    return sum(len(word) for word in uppercase_words) / len(uppercase_words)\n\n",
    "def feature(text: str) -> float:\n    \"Count of adverbs in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of sentences with dialogue\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    return long_sentences / sentences\n\n",
    "def feature(text: str) -> float:\n    \"Count of questions marks in the text\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    return float(len(set(c for c in text if not c.isalnum() and not c.isspace())))\n\n",
    "def feature(text: str) -> float:\n    \"Count of the number of questions in the text\"\n    question_count = text.count('?')\n    return float(question_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of numeric characters in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / len(text) if len(text) > 0 else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of characters that are digits\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / len(text) if text else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Count of paragraphs with more than 50 characters\"\n    paragraphs = text.split('\\n')\n    long_paragraphs = sum(1 for para in paragraphs if len(para) > 50)\n    return float(long_paragraphs)\n\n",
    "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n",
    "def feature(text: str) -> float:\n    \"Sum of all word lengths in the text\"\n    words = text.split()\n    return float(sum(len(word) for word in words))\n\n",
    "def feature(text: str) -> float:\n    \"Count of non-alphanumeric characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_alnum_count)\n\n",
    "def feature(text: str) -> float:\n    \"Proportion of uppercase letters in the text\"\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / len(text) if text else 0.0\n\n"
  ]
}