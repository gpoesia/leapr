{"used_features": ["def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels to total pixels'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray) / np.prod(gray.shape))\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum pixel value in the image'\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    'Minimum pixel value in the image'\n    return float(np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the edge region of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.hstack((gray[:, :gray.shape[1]//10], gray[:, -gray.shape[1]//10:]))\n    return float(np.mean(edges))\n\n", "def feature(image: np.ndarray) -> float:\n    'Sum of pixel values in the center region'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    'Histogram entropy of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, density=True)\n    hist += 1e-12  # avoid log(0)\n    entropy = -np.sum(hist * np.log(hist))\n    return float(entropy)\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the corner regions of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.concatenate((gray[:gray.shape[0]//4, :gray.shape[1]//4],\n                               gray[:gray.shape[0]//4, -gray.shape[1]//4:],\n                               gray[-gray.shape[0]//4:, :gray.shape[1]//4],\n                               gray[-gray.shape[0]//4:, -gray.shape[1]//4:]))\n    return float(np.mean(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of distinct pixel intensity values in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of light pixels (above a threshold) to total pixels'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200  # considering higher values as light pixels\n    light_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(light_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel intensity distribution'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    std = np.std(gray)\n    skewness = np.mean(((gray - mean) / std) ** 3)\n    return float(skewness)\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum gradient magnitude in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.max(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    'Percentage of the image that is black (pixel value 0)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    black_pixel_count = np.count_nonzero(gray == 0)\n    total_pixel_count = np.prod(gray.shape)\n    return float(black_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the border pixels in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    border_pixels = np.concatenate((gray[0, :], gray[-1, :],\n                                     gray[:, 0], gray[:, -1]))\n    return float(np.mean(border_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensity along the diagonal of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal = gray[np.diag_indices(min(gray.shape))]\n    return float(np.var(diagonal))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the dark pixels (below a threshold)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 100  # considering lower values as dark pixels\n    dark_pixels = gray[gray < threshold]\n    return float(np.mean(dark_pixels)) if dark_pixels.size > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.mean(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    above_threshold_count = np.count_nonzero(gray > threshold)\n    return float(above_threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Intensity range of the image (max - min)\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of bright pixels (intensity above a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(bright_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_corner = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright to dark pixel counts\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_count = np.count_nonzero(gray > 128)\n    dark_count = np.count_nonzero(gray <= 128)\n    return float(bright_count / (dark_count + 1e-12))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero to total pixel counts\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixel_count = np.prod(gray.shape)\n    return float(non_zero_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between average intensities of top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2, :])\n    bottom_half_mean = np.mean(gray[gray.shape[0]//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram variance of pixel intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    return float(np.var(hist))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of white pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray >= 255)\n    total_pixel_count = np.prod(gray.shape)\n    return float(white_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Edge density of the image using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    edge_density = np.count_nonzero(gradient_magnitude > 0)\n    total_pixel_count = np.prod(gray.shape)\n    return float(edge_density / total_pixel_count)\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the top half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2, :])\n    return float(top_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the image with intensity below a threshold'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 64\n    below_threshold_count = np.count_nonzero(gray < threshold)\n    return float(below_threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels to total pixels'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixel_count = np.prod(gray.shape)\n    return float(non_zero_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    'Sum of pixel values in the top left corner'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_corner = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.sum(top_left_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensity in the bottom left corner'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_corner = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.var(bottom_left_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference between average intensities of left and right halves'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    'Coefficient of variation of pixel intensities'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    stddev = np.std(gray)\n    return float(stddev / mean) if mean > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum pixel value in the bottom right corner'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_corner = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.max(bottom_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    'Histogram skewness of pixel intensity values'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    mean = np.mean(hist)\n    stddev = np.std(hist)\n    return float((np.sum((hist - mean) ** 3) / hist.size) / (stddev ** 3)) if stddev > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Average gradient magnitude in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    height, width = gray.shape\n    bottom_right_quarter = gray[height//2:, width//2:]\n    return float(np.mean(bottom_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between average pixel intensities of left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256), density=True)\n    hist = hist[hist > 0]  # Ignore zero entries\n    return float(-np.sum(hist * np.log(hist)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the central horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[gray.shape[0]//2 - 1:gray.shape[0]//2 + 1, :]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum intensity value of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    stddev = np.std(gray)\n    return float(np.sum((gray - mean) ** 3) / ((gray.size) * (stddev ** 3))) if stddev > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels above a threshold to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    above_threshold = np.sum(gray > threshold)\n    total_count = gray.size\n    return float(above_threshold / total_count) if total_count > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_val = np.max(gray)\n    min_val = np.min(gray) if np.min(gray) != 0 else 1  # avoid division by zero\n    return float(max_val / min_val)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the top-left corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_corner = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.std(top_left_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.max(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.min(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray[:, :gray.shape[1]//2])\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    total_pixel_count = np.prod(gray.shape)\n    return float(zero_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the central vertical line\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_col = gray.shape[1] // 2\n    center_vertical_line = gray[:, center_col]\n    return float(np.min(center_vertical_line))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (below a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50  # considering lower values as dark pixels\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    return float(dark_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_corner = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.max(top_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel value of the boundary pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    boundary_pixels = np.concatenate((gray[0, :],  # top edge\n                                       gray[-1, :],  # bottom edge\n                                       gray[:, 0],  # left edge\n                                       gray[:, -1]))  # right edge\n    return float(np.mean(boundary_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above a given brightness level\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 150  # considering higher values as bright pixels\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(bright_pixel_count / total_pixel_count)\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels near the edges of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_region = np.concatenate((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    edge_pixel_count = np.count_nonzero(edge_region)\n    total_pixel_count = np.prod(gray.shape)\n    return float(edge_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Intensity range (max-min) in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Horizontal gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(dx)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with low intensity (under a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    low_intensity_count = np.count_nonzero(gray < threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(low_intensity_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_intensities = np.unique(gray)\n    return float(len(unique_intensities))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray, bins=256, density=True)\n    histogram += 1e-10  # To avoid log(0)\n    return float(-np.sum(histogram * np.log(histogram)))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right vertical half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Number of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quadrant = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the bottom row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_row_std = np.std(gray[-1, :])\n    return float(bottom_row_std)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bright pixels (above a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200  # considering higher values as bright pixels\n    bright_pixels = gray[gray > threshold]\n    return float(np.mean(bright_pixels)) if bright_pixels.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_band = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value among the top row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_top_row = np.max(gray[0, :])\n    return float(max_top_row)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient change across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    mean_gradient_change = np.mean(np.sqrt(dx**2 + dy**2))\n    return float(mean_gradient_change)\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray > 200)\n    total_pixel_count = gray.size\n    return float(white_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensity differences between adjacent columns\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    column_differences = np.sum(np.abs(np.diff(gray, axis=1)))\n    return float(column_differences)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dy**2 + dx**2)\n    return float(np.max(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-white pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_white_pixel_count = np.count_nonzero(gray <= 200)\n    total_pixel_count = gray.size\n    return float(non_white_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_band = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central square region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_square = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_square))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple Sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    edges = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), 'same'))\n    return float(np.count_nonzero(edges > 50))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_left_quarter = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(upper_left_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_quadrant = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.mean(top_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the darkest 10% of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 10)\n    return float(np.count_nonzero(gray < threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Contrast of the image using standard deviation\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity = np.max(gray)\n    min_intensity = np.min(gray)\n    return float(max_intensity / min_intensity) if min_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the leftmost column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[:, 0]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the upper half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_half = gray[:gray.shape[0]//2, :]\n    return float(np.count_nonzero(upper_half > 200))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of the image based on intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256), density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple Laplacian filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    laplacian = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])\n    edges = np.abs(np.convolve(gray.flatten(), laplacian.flatten(), 'same'))\n    return float(np.count_nonzero(edges > 25))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_right_quadrant = gray[h//2:, w//2:]\n    return float(np.count_nonzero(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    return float(np.count_nonzero(gray > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sharpness of the image using variance\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the differences between adjacent pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    mean_diff = np.mean(np.abs(dx)) + np.mean(np.abs(dy))\n    return float(mean_diff)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the central region that are above average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0]//4, gray.shape[1]//4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    avg_intensity = np.mean(gray)\n    return float(np.count_nonzero(center_region > avg_intensity))\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of unique pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark to bright pixel counts\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_count = np.count_nonzero(gray < 85)\n    bright_count = np.count_nonzero(gray >= 85)\n    return float(dark_count / (bright_count + 1e-12))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels near the image corners\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = gray[:5, :5].size + gray[:5, -5:].size + gray[-5:, :5].size + gray[-5:, -5:].size\n    return float(corners)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are completely white\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_count = np.count_nonzero(gray == 255)\n    return float(white_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold_count = np.count_nonzero(gray > 200)\n    return float(threshold_count)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    return float(np.count_nonzero(gray < threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_quarter = gray[:gray.shape[0]//4, :]\n    return float(np.mean(top_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region with low intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.count_nonzero(center_region < 100))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are significantly brighter than average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    return float(np.count_nonzero(gray > mean_intensity + 50))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonal from top-left to bottom-right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_pixels = gray[np.arange(gray.shape[0]), np.arange(gray.shape[1])]\n    return float(np.mean(diagonal_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray[:, gray.shape[1]//2:]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean value of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are very dark (intensity less than 50)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray < 50)) / (gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.max(center_region) - np.min(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.count_nonzero(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of pixels above a certain brightness threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 150\n    return float(np.count_nonzero(gray > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the upper half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(upper_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_count = np.count_nonzero(gray > 200)\n    total_count = gray.size\n    return float(bright_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the rightmost column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[:, -1]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.max(center_region) - np.min(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram of pixel intensities normalized by image size\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray.flatten(), bins=256, range=(0, 255))\n    return float(np.sum(histogram) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    edges = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(edges > 20))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    return float(left_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    intensity_range = np.max(gray) - np.min(gray)\n    return float(intensity_range)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total sum of pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_sum = np.sum(gray)\n    return float(total_sum)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (below a threshold) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(dark_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the upper-left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(upper_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with maximum intensity to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_pixel_count = np.count_nonzero(gray == 255)\n    total_pixel_count = np.prod(gray.shape)\n    return float(max_pixel_count / total_pixel_count)\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel intensities in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of high-intensity pixels (above a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray > 200)\n    return float(high_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the diagonal from top left to bottom right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_length = min(gray.shape)\n    diagonal_values = [gray[i, i] for i in range(diagonal_length)]\n    return float(np.mean(diagonal_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between average intensities of the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels (intensity above a certain level)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixels = np.count_nonzero(gray > 240)\n    total_pixels = np.prod(gray.shape)\n    return float(white_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the central square region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_square = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_square))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    return float(left_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute deviation of pixel intensities from the mean\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    abs_deviation = np.abs(gray - mean_intensity)\n    return float(np.mean(abs_deviation))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    return float(np.count_nonzero(gray > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//2 - 1:gray.shape[1]//2 + 1]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_quarter = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_right_quarter = gray[:h//2, w//2:]\n    return float(np.mean(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram of pixel intensities normalized by image size\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray, bins=256, range=(0, 255))\n    normalized_hist = hist / gray.size\n    return float(np.sum(normalized_hist))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of zero intensity pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    return float(zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels in the top half to the total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_count = gray.shape[0] * gray.shape[1] // 2\n    total_count = gray.size\n    return float(top_half_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.max(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum intensity value in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.min(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_pixel_count = np.count_nonzero(gray)\n    return float(non_zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Pixel intensity variance in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.var(bottom_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = np.prod(gray.shape)\n    return float(non_zero_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom horizontal stripe of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_stripe = gray[-1, :]\n    return float(np.mean(bottom_stripe))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference of pixel values between adjacent columns\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    column_diffs = np.abs(np.diff(gray, axis=1))\n    return float(np.mean(column_diffs))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels below a brightness threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(dark_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of the pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    std_dev = np.std(gray)\n    n = gray.size\n    skewness = np.sum((gray - mean)**3) / (n * std_dev**3) if std_dev > 0 else 0.0\n    return float(skewness)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel values in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quadrant))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_quadrant = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.mean(top_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left vertical side\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_side_mean = np.mean(gray[:, :gray.shape[1]//2])\n    return float(left_side_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    return float(np.count_nonzero(gray < threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum pixel intensity of each channel in RGB images\"\n    if len(image.shape) == 3:\n        channel_maximums = np.max(image, axis=(0, 1))\n        return float(np.mean(channel_maximums))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_quadrant = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels detected using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(gradient_magnitude > 10))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Asymmetry of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray == 255)\n    total_pixel_count = np.prod(gray.shape)\n    return float(white_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in a certain intensity range\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero((gray >= 100) & (gray <= 150)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.max(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum intensity value in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4,\n                         gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.min(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray < 50))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Aspect ratio of the image\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n    else:\n        h, w = image.shape\n    return float(w / h) if h > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    high_intensity_count = np.count_nonzero(gray > threshold)\n    total_count = np.prod(gray.shape)\n    return float(high_intensity_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between left and right halves' mean intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the lower half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_half = gray[gray.shape[0]//2:, :]\n    return float(np.std(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    white_count = np.count_nonzero(gray == 255)\n    return float(white_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of dark pixels (intensity < 50)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    dark_count = np.count_nonzero(gray < 50)\n    return float(dark_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity values in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensities near the average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    return float(np.count_nonzero((gray >= mean_intensity - 20) & (gray <= mean_intensity + 20)))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 192\n    above_threshold_count = np.count_nonzero(gray > threshold)\n    return float(above_threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(lower_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the upper-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_right_quadrant = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.mean(upper_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_band = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_band))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with maximum intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity_count = np.count_nonzero(gray == 255)\n    return float(max_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_quadrant = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.mean(top_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    edge_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(edge_magnitude > 20))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensities of left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Variability of intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image with low intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    low_intensity_count = np.count_nonzero(gray < 50)\n    total_count = np.prod(gray.shape)\n    return float(low_intensity_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.max(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels near the edges of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges_count = np.count_nonzero(np.gradient(gray, axis=0)[0] + np.gradient(gray, axis=1)[1] > 0)\n    return float(edges_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Contrast measure based on maximum and minimum intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//2 - 1:gray.shape[1]//2 + 1]\n    return float(np.mean(center_band))\n", "def feature(image: np.ndarray) -> float:\n    \"Total pixel intensity in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Homogeneity of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.exp(-np.std(gray)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    above_threshold_count = np.count_nonzero(gray > threshold)\n    return float(above_threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the top-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.var(top_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference between red and blue channels in RGB images\"\n    if len(image.shape) == 3:\n        red_blue_diff = image[:,:,0] - image[:,:,2]\n        return float(np.mean(red_blue_diff))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of border pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    border_pixels = np.hstack((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    return float(np.mean(border_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.std(left_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the bottom quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.std(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixel regions in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(len(np.unique(gray[gray > 0])))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//2 - 1:gray.shape[1]//2 + 1]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = np.prod(gray.shape)\n    return float(bright_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the corners of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.concatenate((gray[:1, :1], gray[:1, -1:], gray[-1:, :1], gray[-1:, -1:]))\n    return float(np.mean(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high contrast to their neighbors\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    edge_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(edge_magnitude > 30))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonal from top-left to bottom-right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    min_dim = min(gray.shape)\n    diagonal = [gray[i, i] for i in range(min_dim)]\n    return float(np.mean(diagonal))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the central area of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 150)\n    dark_pixels = np.count_nonzero(gray < 100)\n    return float(bright_pixels / (dark_pixels + 1e-6))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total pixel count in the image\"\n    return float(image.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the bottom horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_band = gray[-1:, :]\n    return float(np.mean(bottom_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.count_nonzero(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the difference between red and green channels in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_band = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (above a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (below a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = np.prod(gray.shape)\n    dark_count = np.count_nonzero(gray < 50)\n    return float(dark_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central square region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.sum(center))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the lower quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.std(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image at median intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    median_value = np.median(gray)\n    return float(np.count_nonzero(gray == median_value))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum pixel intensity in each row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity_per_row = np.max(gray, axis=1)\n    return float(np.mean(max_intensity_per_row))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    total_pixel_count = gray.size\n    return float(zero_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the bottom right quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_right_quarter = gray[h//2:, w//2:]\n    return float(np.std(bottom_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the border pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    border_pixels = np.concatenate([\n        gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]\n    ])\n    return float(np.mean(border_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are darker than a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < 100)\n    total_pixel_count = gray.size\n    return float(dark_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between left and right average intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the top edge pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_edge = gray[0, :]\n    return float(np.mean(top_edge))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the full image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray >= 230)\n    total_pixel_count = gray.size\n    return float(bright_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the central region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[image.shape[0]//4:3*image.shape[0]//4, image.shape[1]//4:3*image.shape[1]//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities of left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the most significant (non-zero) pixel intensity range\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    significant_pixel_count = np.count_nonzero((gray >= 50) & (gray <= 150))\n    return float(significant_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of height to width of the image\"\n    height, width = image.shape[:2]\n    return float(height / width)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variability of pixel intensity values across the horizontal gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    return float(np.std(dx))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero intensity pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_pixel_count = np.count_nonzero(gray > 0)\n    return float(non_zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with intensity above a threshold to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold_count = np.count_nonzero(gray > 128)\n    total_pixel_count = np.prod(gray.shape)\n    return float(threshold_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel intensities in the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the central region above a certain intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.count_nonzero(center_region > 100))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom horizontal third\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_third = gray[2*gray.shape[0]//3:, :]\n    return float(np.sum(bottom_third))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_band = gray[:gray.shape[0]//4, :]\n    return float(np.max(top_band))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity for the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity for the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_quadrant = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.sum(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.max(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.sqrt(dx**2 + dy**2)))\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above a certain intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    return float(np.count_nonzero(gray > threshold) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels at extreme low and high intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    low_threshold = 30\n    high_threshold = 225\n    count_low = np.count_nonzero(gray < low_threshold)\n    count_high = np.count_nonzero(gray > high_threshold)\n    return float(count_low + count_high)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of non-zero pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_pixels = gray[gray > 0]\n    return float(np.mean(non_zero_pixels)) if non_zero_pixels.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Aspect ratio of pixel intensity distribution (std / mean)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    std_intensity = np.std(gray)\n    return float(std_intensity / mean_intensity) if mean_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensities in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left_quadrant = gray[h//2:, :w//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Edge density as the ratio of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(np.hypot(edges[0], edges[1]) > 1)\n    return float(edge_count / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected using Sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), 'same')).reshape(gray.shape)\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), 'same')).reshape(gray.shape)\n    total_edges = np.sum(edges_x + edges_y)\n    return float(total_edges)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the four corners of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corner_values = [\n        gray[0, 0], \n        gray[0, -1], \n        gray[-1, 0], \n        gray[-1, -1]\n    ]\n    return float(np.mean(corner_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variability of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of white pixels in the image, considering a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    white_pixel_count = np.count_nonzero(gray > threshold)\n    return float(white_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity value of the pixels in the vertical center column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_col = gray[:, gray.shape[1]//2]\n    return float(np.mean(center_col))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in maximum and minimum pixel intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_value = np.max(gray)\n    min_value = np.min(gray)\n    return float(max_value - min_value)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels in the top half to the bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_count = np.count_nonzero(gray[:gray.shape[0]//2])\n    bottom_half_count = np.count_nonzero(gray[gray.shape[0]//2:])\n    if bottom_half_count == 0:\n        return float(0)\n    return float(top_half_count / bottom_half_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.max(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonals from top left to bottom right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_values = [gray[i, i] for i in range(min(gray.shape))]\n    return float(np.mean(diagonal_values))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom-left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left = gray[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using horizontal and vertical gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    edges = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(edges > edges.mean()))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of the darkest pixels below a specific threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 30\n    return float(np.count_nonzero(gray < threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.var(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the bottom horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_band = gray[-1, :]\n    return float(np.mean(bottom_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum difference in intensity between adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    max_diff = np.max(np.abs(np.vstack([dx.flatten(), dy.flatten()])))\n    return float(max_diff)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are at the average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    avg_intensity = np.mean(gray)\n    return float(np.count_nonzero(gray == avg_intensity))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average diagonal intensity in the image from top-left to bottom-right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal = np.diagonal(gray)\n    return float(np.mean(diagonal))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom edge pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_edge = gray[-1, :]\n    return float(np.mean(bottom_edge))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of pixels in the left half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the intensity differences between red and blue channels\"\n    if len(image.shape) == 3:\n        channel_diff = image[:,:,0] - image[:,:,2]\n    else:\n        return float(0)\n    return float(np.mean(channel_diff))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    count_above_threshold = np.count_nonzero(gray > threshold)\n    return float(count_above_threshold)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    magnitude = np.sqrt(gradient_x ** 2 + gradient_y ** 2)\n    return float(np.mean(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the total sum of pixel intensities to the number of pixels\"\n    total_intensity = np.sum(image)\n    total_pixels = image.size\n    return float(total_intensity / total_pixels)\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels above a specific threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 225\n    return float(np.count_nonzero(gray > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity in the central region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.std(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are exactly mid-intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mid_intensity_count = np.count_nonzero(gray == 128)\n    return float(mid_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero intensity pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count if total_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are significantly darker than average\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    dark_pixels_count = np.count_nonzero(gray < mean_intensity * 0.5)\n    return float(dark_pixels_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the corners of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.array([gray[0, 0], gray[0, -1], gray[-1, 0], gray[-1, -1]])\n    return float(np.mean(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variability of pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of pixels in the bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity values in the left third\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_third = gray[:, :gray.shape[1]//3]\n    return float(np.std(left_third))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//2 - 1:gray.shape[1]//2 + 1]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Normalized sum of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = np.prod(gray.shape)\n    return float(np.sum(gray) / total_pixels) if total_pixels > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Total pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_intensity = np.sum(gray)\n    return float(total_intensity)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    range_intensity = np.max(gray) - np.min(gray)\n    return float(range_intensity)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    intensity_variance = np.var(gray)\n    return float(intensity_variance)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Number of unique pixel intensities in a threshold range\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    thresholded_unique_values = np.unique(gray[gray < 200])\n    return float(len(thresholded_unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the leftmost vertical band of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_band = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels above a specific threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 220\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Local sharpness based on the standard deviation of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    local_sharpness = np.std(gray)\n    return float(local_sharpness)\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the border pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    border_pixels = np.concatenate([\n        gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]\n    ])\n    return float(np.mean(border_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using variance\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_count = np.count_nonzero(np.std(gray, axis=0) > 10)\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels with intensity greater than a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    high_intensity_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(high_intensity_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between average intensities of the left and right sides\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity of the pixels in the bottom quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.max(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the diagonal pixels from top-left to bottom-right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_pixels = [gray[i, i] for i in range(min(gray.shape))]\n    return float(np.mean(diagonal_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray >= 240)\n    total_pixel_count = gray.size\n    return float(white_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels along the vertical midline\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    midline = gray[:, gray.shape[1]//2]\n    return float(np.mean(midline))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    total_pixel_count = gray.size\n    return float(zero_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_quadrant = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are brighter than a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    total_pixel_count = gray.size\n    return float(bright_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left_quarter = gray[h//2:, :w//2]\n    return float(np.mean(bottom_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the left half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.max(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels (intensity > threshold) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    white_pixels = np.count_nonzero(gray > threshold)\n    total_count = gray.size\n    return float(white_pixels / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top right quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_right_quarter = gray[:h//2, w//2:]\n    return float(np.std(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensities in the left half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.max(left_half) - np.min(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of edge pixels detected using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    edges = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(edges))\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the right half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of pixels with maximum intensity'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity = np.max(gray)\n    return float(np.count_nonzero(gray == max_intensity))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the pixels in the left quarter of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of zero pixels to total pixels'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_count = gray.size\n    zero_count = np.count_nonzero(gray == 0)\n    return float(zero_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference in mean intensity between the left and right halves'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of intensity in the top half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean of the absolute differences between adjacent columns'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    col_diffs = np.abs(np.diff(gray, axis=1))\n    return float(np.mean(col_diffs))\n\n", "def feature(image: np.ndarray) -> float:\n    'Entropy of the image based on pixel intensity distribution'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # Ignore zero values to calculate entropy\n    entropy = -np.sum(hist * np.log(hist))\n    return float(entropy)\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of dark pixels (intensity below a threshold) to total pixels'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 100\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    total_count = gray.size\n    return float(dark_pixel_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum gradient magnitude in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx, dy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.max(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity above a threshold) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    total_count = gray.size\n    return float(bright_pixel_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//2 - 1:gray.shape[1]//2 + 1]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the upper left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_left = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(upper_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in pixel intensity between the top-left and bottom-right quadrants\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_mean = np.mean(gray[:gray.shape[0]//2, :gray.shape[1]//2])\n    bottom_right_mean = np.mean(gray[gray.shape[0]//2:, gray.shape[1]//2:])\n    return float(top_left_mean - bottom_right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels within the mid intensity range (100 to 150)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mid_threshold_low = 100\n    mid_threshold_high = 150\n    mid_count = np.count_nonzero((gray >= mid_threshold_low) & (gray <= mid_threshold_high))\n    return float(mid_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute differences between neighboring pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    abs_diff = np.abs(dy) + np.abs(dx)\n    return float(np.mean(abs_diff))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity value in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the rightmost vertical band of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_band = gray[:, -gray.shape[1]//4:]\n    return float(np.mean(right_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity values across the vertical gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.std(dy))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-white pixels (intensity >= threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 240\n    non_white_count = np.count_nonzero(gray < threshold)\n    return float(non_white_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensities between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with high intensities to total pixels (threshold = 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    high_intensity_pixels = np.count_nonzero(gray > 200)\n    return float(high_intensity_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of the corner pixels with high intensity (>= threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.array([gray[0, 0], gray[0, -1], gray[-1, 0], gray[-1, -1]])\n    high_intensity_corners = np.count_nonzero(corners >= 200)\n    return float(high_intensity_corners)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Number of pixels with intensities in the mid-range (thresholds 100 to 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mid_range_count = np.count_nonzero((gray >= 100) & (gray < 200))\n    return float(mid_range_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to the total pixel count\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left vertical half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are black (intensity zero)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    black_pixel_count = np.count_nonzero(gray == 0)\n    return float(black_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_band = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute pixel intensity change from left to right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    change = np.abs(np.diff(gray, axis=1))\n    return float(np.mean(change))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the central vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[:, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    total_count = gray.size\n    return float(bright_pixel_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram entropy of the image distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray.flatten(), bins=256, range=[0, 256])\n    histogram = histogram / histogram.sum()\n    histogram = histogram[histogram > 0]  # Avoid log(0)\n    return float(-np.sum(histogram * np.log2(histogram)))\n", "def feature(image: np.ndarray) -> float:\n    \"Count of the number of extreme pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    extreme_values_count = np.count_nonzero((gray >= 240) | (gray <= 15))\n    return float(extreme_values_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Compute the contrast of the image as defined by the difference between max and min intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    contrast = np.max(gray) - np.min(gray)\n    return float(contrast)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of pixels located in the left vertical strip\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_strip = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_strip))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of dark pixels to bright pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = gray[gray < 128]\n    bright_pixels = gray[gray >= 128]\n    dark_mean = np.mean(dark_pixels) if dark_pixels.size > 0 else 0\n    bright_mean = np.mean(bright_pixels) if bright_pixels.size > 0 else 1\n    return float(dark_mean / bright_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half_sum = np.sum(gray[gray.shape[0]//2:, :])\n    return float(bottom_half_sum)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.std(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Number of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_intensities = np.unique(gray)\n    return float(len(unique_intensities))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean value of the pixel intensities in the right vertical strip\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_strip = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_strip))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total area occupied by brighter pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_area = np.sum(gray > 128)\n    return float(bright_area)\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain intensity threshold (e.g., 128)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    return float(np.count_nonzero(gray < threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a certain threshold (e.g., 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    return float(np.count_nonzero(gray > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.std(left_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[:, gray.shape[1]//2:]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray >= 128)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central square region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_square = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_square))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray[:gray.shape[0]//2, :]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel distribution in the top quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_quarter = gray[:gray.shape[0]//4, :]\n    return float((np.mean(top_quarter) - np.median(top_quarter)) / np.std(top_quarter)) if np.std(top_quarter) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_right_quarter = gray[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 128)\n    total_pixels = gray.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with intensity in a specific range to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    intensity_range = np.count_nonzero((gray > 100) & (gray < 150))\n    total_count = gray.size\n    return float(intensity_range / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the lower half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_half = gray[gray.shape[0]//2:, :]\n    return float(np.std(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    return float(zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Normalized sum of pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensity differences between channels for RGB\"\n    if len(image.shape) == 3:\n        channel_diff = np.abs(image[:,:,0] - image[:,:,1])\n        return float(np.mean(channel_diff))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.var(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of uniquely valued pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_pixel_count = np.unique(gray).size\n    return float(unique_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are above mid-intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray > 128)\n    return float(high_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the right half of the image that are above a certain threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    threshold_count = np.count_nonzero(right_half > 200)\n    return float(threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixels = gray.size\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.std(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are equal to the maximum intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity_count = np.count_nonzero(gray == np.max(gray))\n    return float(max_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.max(bottom_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_magnitude = np.sqrt(edges[0]**2 + edges[1]**2)\n    edge_pixel_count = np.count_nonzero(edge_magnitude > 10)\n    total_pixel_count = gray.size\n    return float(edge_pixel_count / total_pixel_count) if total_pixel_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.sum(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity below threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < 50)\n    total_pixel_count = gray.size\n    return float(dark_pixel_count / total_pixel_count) if total_pixel_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Kurtosis of pixel intensity values in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    std = np.std(gray)\n    if std == 0:\n        return 0.0\n    kurtosis = np.mean(((gray - mean) / std)**4) - 3\n    return float(kurtosis)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity above threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    total_pixel_count = gray.size\n    return float(bright_pixel_count / total_pixel_count) if total_pixel_count > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray > 200)\n    total_pixel_count = np.prod(gray.shape)\n    return float(high_intensity_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Summation of pixel values in the bottom quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.sum(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.std(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = len(np.unique(gray))\n    return float(unique_values)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum difference between adjacent pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_diff = np.max(np.abs(np.diff(gray, axis=1)))\n    return float(max_diff)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the central square region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_square = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_square))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient standard deviation of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.std(dy))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the image as a ratio of overall brightness\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    max_intensity = np.max(gray)\n    return float(mean_intensity / max_intensity) if max_intensity > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the brightest 10% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 90)\n    bright_pixels = gray[gray >= threshold]\n    return float(np.mean(bright_pixels)) if bright_pixels.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Contrast measured as the range of pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels at maximum intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray == 255))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.std(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute differences between adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.abs(np.gradient(gray, axis=1))\n    return float(np.mean(dx))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity of the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.median(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels below the global mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    below_mean_count = np.count_nonzero(gray < mean_intensity)\n    total_count = gray.size\n    return float(below_mean_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between left and right half pixel intensity means\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_mean - right_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with low intensity to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    low_intensity_count = np.count_nonzero(gray < 50)\n    total_count = gray.size\n    return float(low_intensity_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the bottom quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.var(bottom_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Fraction of pixels in the central region that are above average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    avg_intensity = np.mean(gray)\n    above_avg_count = np.count_nonzero(center_region > avg_intensity)\n    total_count = center_region.size\n    return float(above_avg_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.max(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray, bins=256)\n    return float(np.var(hist))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Edge count in the image using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    edge_count = np.count_nonzero(gradient_magnitude > 20) # Threshold for edge detection\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel distribution in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.sum(top_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_ratio = np.count_nonzero(gray) / gray.size\n    return float(non_zero_ratio)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the image's bottom left quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    height, width = gray.shape\n    bottom_left_quarter = gray[height//2:, :width//2]\n    return float(np.mean(bottom_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_corner = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.max(top_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_intensities = len(np.unique(gray))\n    return float(unique_intensities)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    return float(zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the left vertical half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    return float(left_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel values of the diagonal from the top left to bottom right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_values = gray[np.arange(gray.shape[0]), np.arange(gray.shape[1])]\n    return float(np.mean(diagonal_values))\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    nonzero_count = np.count_nonzero(gray)\n    return float(nonzero_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Sum of pixel intensities in the bottom half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.sum(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference between maximum and minimum pixel intensity'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean intensity of white pixels (intensity > 200)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_count = np.count_nonzero(gray > 200)\n    mean_white = np.mean(gray[gray > 200]) if white_count > 0 else 0.0\n    return float(mean_white)\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on gradient magnitude'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    edge_pixel_count = np.count_nonzero(gradient_magnitude > 50)\n    return float(edge_pixel_count) / (gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the left quarter of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel values in the bottom half'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.std(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel values in the entire image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Percentage of bright pixels (intensity > 200)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    bright_count = np.count_nonzero(gray > 200)\n    return float(bright_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of edges (gradient > threshold)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    edge_pixels = gray[gradient_magnitude > 30]\n    return float(np.mean(edge_pixels)) if edge_pixels.size > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute differences between vertical adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.abs(np.gradient(gray, axis=0))\n    return float(np.mean(dy))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2, :])\n    bottom_half_mean = np.mean(gray[gray.shape[0]//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels brighter than a specific threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of corners detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.array([[0, 0], [0, 0], [0, 0], [0, 0]])  # Placeholder for corner detection\n    # Placeholder logic for corner count\n    return float(np.count_nonzero(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Edge count in a smaller region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    small_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    dy, dx = np.gradient(small_region)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.count_nonzero(gradient_magnitude > 20))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and mean intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.mean(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (intensity < threshold) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    dark_pixels = np.count_nonzero(gray < threshold)\n    total_count = gray.size\n    return float(dark_pixels / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensities in the left vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_band = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the minimum pixel intensity in each column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    min_intensity_per_col = np.min(gray, axis=0)\n    return float(np.mean(min_intensity_per_col))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_pixels = np.count_nonzero(gray)\n    total_count = gray.size\n    return float(non_zero_pixels / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color channel variance for RGB images\"\n    if len(image.shape) == 3:\n        channel_variance = np.var(image, axis=(0, 1))\n        return float(np.mean(channel_variance))\n    else:\n        return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute pixel intensity difference between the image center and corners\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center = gray[gray.shape[0]//2, gray.shape[1]//2]\n    corners = [gray[0, 0], gray[0, -1], gray[-1, 0], gray[-1, -1]]\n    return float(np.mean(np.abs(np.array(corners) - center)))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the edges using sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same')).reshape(gray.shape)\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same')).reshape(gray.shape)\n    edges = np.sqrt(edges_x**2 + edges_y**2)\n    return float(np.mean(edges))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_intensities = np.unique(gray)\n    return float(len(unique_intensities))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    height, width = gray.shape\n    bottom_left_quadrant = gray[height//2:, :width//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of horizontal pixel intensity gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(dx)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of vertical pixel intensity gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n", "def feature(image: np.ndarray) -> float:\n    \"Average color intensity across all channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image))\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixel_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_pixel_count = np.count_nonzero(gray)\n    total_pixels = gray.size\n    return float(non_zero_pixel_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Kurtosis of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    n = gray.size\n    mean = np.mean(gray)\n    std_dev = np.std(gray)\n    return float(np.sum((gray - mean)**4) / (n * (std_dev**4))) if std_dev > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above the mean\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    above_mean_count = np.count_nonzero(gray > mean_intensity)\n    return float(above_mean_count)\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_left = np.count_nonzero(gray[:, :gray.shape[1]//2])\n    total_left = gray[:, :gray.shape[1]//2].size\n    return float(non_zero_left / total_left)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < 50) in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 50)\n    return float(dark_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels at the image corners\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.array([gray[0, 0], gray[0, -1], gray[-1, 0], gray[-1, -1]])\n    return float(np.mean(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain threshold in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[image.shape[0]//4:3*image.shape[0]//4, image.shape[1]//4:3*image.shape[1]//4]\n    bright_count = np.count_nonzero(center_region > 150)\n    return float(bright_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the central horizontal band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_band = gray[gray.shape[0]//2 - 1:gray.shape[0]//2 + 1, :]\n    return float(np.max(center_band))\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of non-black pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 0))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity >= 200) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_count = np.count_nonzero(gray >= 200)\n    total_count = gray.size\n    return float(bright_count / total_count) if total_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Vertical gradient mean of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple horizontal gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(dx > 30))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Uniformity of the image calculated as the square of the mean pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    return float(mean_intensity ** 2)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (intensity < 50)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_count = np.count_nonzero(gray < 50)\n    total_count = gray.size\n    return float(dark_count / total_count) if total_count > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom right quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (above a threshold)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200  # considering higher values as bright pixels\n    bright_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixels = gray.size\n    return float(bright_pixel_count) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_pixel_count = np.count_nonzero(gray == 0)\n    total_pixels = gray.size\n    return float(zero_pixel_count) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum channel intensity in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    else:\n        return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the left vertical strip\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_strip = gray[:, :gray.shape[1]//4]\n    return float(np.std(left_strip))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-uniform pixels by comparing adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    horizontal_diff = np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(horizontal_diff > 10))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Max pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.max(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Absolute difference between max and min pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the bottom right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.std(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in means between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of white pixels (value 255) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray == 255))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean value of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Contrast of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels over total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 230)\n    total_pixels = gray.size\n    return float(bright_pixels) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total pixel intensity in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.sum(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.max(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean brightness in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-black pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 5))  # Consider a small threshold to define non-black\n", "def feature(image: np.ndarray) -> float:\n    \"Mean contrast in the image calculated as max-min pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of total pixels compared to the number of unique pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_count = np.unique(gray).size\n    total_count = gray.size\n    return float(total_count / unique_count) if unique_count > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels in the image using Sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same')).sum()\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same')).sum()\n    total_pixels = gray.size\n    edges_count = edges_x + edges_y\n    return float(edges_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of black pixels (intensity = 0) in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    black_count = np.count_nonzero(gray == 0)\n    total_count = gray.size\n    return float(black_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute differences between the top row and all other rows\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_row = gray[0, :]\n    abs_differences = np.abs(gray[1:, :] - top_row)\n    return float(np.mean(abs_differences))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are very dark (intensity < 50)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_count = np.count_nonzero(gray < 50)\n    total_count = gray.size\n    return float(dark_count / total_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the bottom row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray[-1, :]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of lighter pixels (intensity > 150) in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    light_count = np.count_nonzero(center_region > 150)\n    total_count = center_region.size\n    return float(light_count / total_count) if total_count > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixel ratios across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixels = gray.size\n    return float(non_zero_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (intensity < 50) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < 50)\n    total_pixels = gray.size\n    return float(dark_pixel_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the darkest horizontal line in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    horizontal_means = np.mean(gray, axis=1)\n    return float(np.min(horizontal_means))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity in the full image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    bright_pixel_count = np.count_nonzero(center_region > 200)\n    total_pixels = center_region.size\n    return float(bright_pixel_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel value in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    return float(dark_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity values in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of intense pixels (intensity > threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    intense_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = gray.size\n    return float(intense_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Contrast of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    contrast = gray.max() - gray.min()\n    return float(contrast)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with maximum intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity = gray.max()\n    max_intensity_count = np.count_nonzero(gray == max_intensity)\n    return float(max_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of vertical pixel intensity gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Coefficient of variation of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    std_intensity = np.std(gray)\n    return float(std_intensity / mean_intensity) if mean_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the edges of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.concatenate((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    return float(np.mean(edges))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    white_pixels = np.count_nonzero(gray >= 240)\n    return float(white_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_quarter = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.mean(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.count_nonzero(gradient_magnitude > 10))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left corner of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_corner = gray[-gray.shape[0]//4:, :gray.shape[1]//4]\n    return float(np.mean(bottom_left_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray, bins=256, density=True)\n    hist += 1e-12  # avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above the median intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    median_intensity = np.median(gray)\n    return float(np.count_nonzero(gray > median_intensity) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Roughness of the image based on the standard deviation of gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.std(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (below a threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray < 50))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average horizontal pixel intensity in the bottom quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels based on a gradient threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    edge_pixel_count = np.count_nonzero(np.sqrt(dx**2 + dy**2) > 20)\n    return float(edge_pixel_count) / gray.size\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (above a threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total count of dark pixels (intensity < 50)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_count = np.count_nonzero(gray < 50)\n    return float(dark_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Normalized sum of the pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_sum = np.sum(gray)\n    max_possible_sum = 255 * gray.size\n    return float(total_sum) / max_possible_sum if max_possible_sum > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the diodes (intensity in range [200, 255])\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diode_count = np.count_nonzero((gray >= 200) & (gray <= 255))\n    mean_diode = np.mean(gray[(gray >= 200) & (gray <= 255)]) if diode_count > 0 else 0.0\n    return float(mean_diode)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using Sobel operator\"\n    from scipy.ndimage import convolve\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    edge_count = np.count_nonzero(convolve(gray, sobel_x) != 0)\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    right_half_mean = np.mean(gray[:, gray.shape[1]//2:])\n    return float(left_half_mean - right_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are black (intensity < 30)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    black_pixels = np.count_nonzero(gray < 30)\n    total_pixels = gray.size\n    return float(black_pixels) / total_pixels if total_pixels > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_half = gray[gray.shape[0]//2:, :]\n    return float(np.count_nonzero(lower_half) / lower_half.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a moderate threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    moderate_threshold = 128\n    return float(np.count_nonzero(gray > moderate_threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top-left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left_quarter = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(top_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total brightness of the image as sum of pixel values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx = np.gradient(gray, axis=1)\n    gy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.sum(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left vertical half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.std(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray == 255)\n    total_pixel_count = np.prod(gray.shape)\n    return float(white_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left vertical half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half_mean = np.mean(gray[:, :gray.shape[1]//2])\n    return float(left_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity pixel value in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity below a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    low_intensity_count = np.count_nonzero(gray < threshold)\n    return float(low_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity difference between adjacent rows\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    row_diffs = np.max(np.abs(np.diff(gray, axis=0)), axis=1)\n    return float(np.max(row_diffs)) if row_diffs.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.var(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the edge pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_pixels = np.concatenate([gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]])\n    return float(np.mean(edge_pixels))\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_pixel_count = len(np.unique(gray))\n    return float(unique_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    grad_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(grad_x**2 + grad_y**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of high intensity (>= 250) pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray >= 250)\n    total_pixels = gray.size\n    return float(high_intensity_count / total_pixels) if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    grad_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(grad_x**2 + grad_y**2)\n    edge_pixel_count = np.count_nonzero(gradient_magnitude > 10)\n    return float(edge_pixel_count)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) / (np.min(gray) + 1e-6))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_pixels = np.unique(gray)\n    return float(len(unique_pixels))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom left quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left = gray[3*gray.shape[0]//4:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between mean intensity of top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_band = gray[:, :gray.shape[1]//4]\n    return float(np.std(left_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    average_intensity = np.mean(gray)\n    above_average = np.count_nonzero(gray > average_intensity)\n    return float(above_average)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray, bins=256)\n    histogram = histogram / np.sum(histogram)  # normalize\n    histogram = histogram[histogram > 0]  # avoid log(0)\n    return float(-np.sum(histogram * np.log2(histogram)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy, dx = np.gradient(gray)\n    gradient_magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean value of the central region's pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom left corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_corner = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels based on gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    edge_count = np.count_nonzero(np.sqrt(gx**2 + gy**2) > 10)  # Threshold for edge detection\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_corner = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.max(top_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensities in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_count = np.count_nonzero(gray > 200)\n    return float(bright_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity equal to zero\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    zero_count = np.count_nonzero(gray == 0)\n    return float(zero_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels (intensity >= 240) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_count = np.count_nonzero(gray >= 240)\n    total_pixels = gray.size\n    return float(white_count / total_pixels) if total_pixels > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the leftmost column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[:, 0]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean vertical gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the image excluding the top row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[1:, :]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (below a threshold) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray < 50))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n", "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_pixel_count = len(np.unique(gray))\n    return float(unique_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel intensities in the right vertical band\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_band = gray[:, 3*gray.shape[1]//4:]\n    return float(np.mean(right_band))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels to the total number of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < 50)\n    total_pixel_count = gray.size\n    return float(dark_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0]//2:, :]\n    return float(np.var(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of corner pixels (very bright or very dark)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corner_pixels = np.sum((gray[0,0] > 200) | (gray[0,0] < 50))\n    corner_pixels += np.sum((gray[0,-1] > 200) | (gray[0,-1] < 50))\n    corner_pixels += np.sum((gray[-1,0] > 200) | (gray[-1,0] < 50))\n    corner_pixels += np.sum((gray[-1,-1] > 200) | (gray[-1,-1] < 50))\n    return float(corner_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of absolute differences between pixels in the bottom row and the mean\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_row = gray[-1, :]\n    return float(np.sum(np.abs(bottom_row - np.mean(gray))))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_quadrant = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom horizontal strip\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_strip = gray[-gray.shape[0]//4:, :]\n    return float(np.mean(bottom_strip))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between the top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2])\n    bottom_half_mean = np.mean(gray[gray.shape[0]//2:])\n    return float(top_half_mean - bottom_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 150) in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 150)\n    total_pixel_count = np.prod(gray.shape)\n    return float(bright_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left vertical strip\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_strip = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_strip))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variation of pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray) / (np.mean(gray) + 1e-5))  # Adding small value to prevent division by zero\n", "def feature(image: np.ndarray) -> float:\n    \"Count of total white pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixel_count = np.count_nonzero(gray > 250)\n    total_pixel_count = np.prod(gray.shape)\n    return float(white_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    total_pixel_count = np.prod(gray.shape)\n    return float(bright_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels with low intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < 30)\n    total_pixel_count = np.prod(gray.shape)\n    return float(dark_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixel_count = np.prod(gray.shape)\n    return float(non_zero_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities of top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_mean = np.mean(gray[:gray.shape[0]//2, :])\n    bottom_mean = np.mean(gray[gray.shape[0]//2:, :])\n    return float(top_mean - bottom_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the diagonal pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_pixels = gray[np.arange(gray.shape[0]), np.arange(gray.shape[1])]\n    return float(np.mean(diagonal_pixels))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixel_count = np.count_nonzero(gray > 200)\n    total_pixel_count = gray.size\n    return float(bright_pixel_count / total_pixel_count if total_pixel_count > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Surface area of the darkest region in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    thresholded = gray < 50\n    dark_region_area = np.count_nonzero(thresholded)\n    return float(dark_region_area)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of the image covered by bright regions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_areas = np.count_nonzero(gray > 220)\n    total_pixels = gray.size\n    return float(bright_areas / total_pixels if total_pixels > 0 else 0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel distribution in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of distinct pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity values in the left quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.std(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest 5% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 95)\n    bright_pixels = gray[gray >= threshold]\n    return float(np.mean(bright_pixels)) if bright_pixels.size > 0 else 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.count_nonzero(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.sum(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensities in the left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quarter = gray[:, :gray.shape[1]//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    hist = hist[hist > 0]  # Remove zero probabilities\n    prob = hist / np.sum(hist)\n    return float(-np.sum(prob * np.log(prob)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference between left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(np.abs(left_half - right_half)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_quarter = gray[:, -gray.shape[1]//4:]\n    return float(np.std(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity above 200)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of color channel differences in RGB images\"\n    if len(image.shape) == 3:\n        color_diff = np.abs(image[:,:,0] - image[:,:,1]) + np.abs(image[:,:,0] - image[:,:,2]) + np.abs(image[:,:,1] - image[:,:,2])\n        return float(np.mean(color_diff))\n    return 0.0  # For grayscale images\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.count_nonzero(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the left third of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_third = gray[:, :gray.shape[1]//3]\n    return float(np.sum(left_third))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensities in the bottom right corner\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_right_corner = gray[gray.shape[0]//2:, gray.shape[1]//2:]\n    return float(np.mean(bottom_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.median(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude across the vertical direction\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.max(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.min(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the right vertical third\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_third = gray[:, 2*gray.shape[1]//3:]\n    return float(np.sum(right_third))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity value in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of maximum pixel intensity to the mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    max_intensity = np.max(gray)\n    return float(max_intensity / mean_intensity) if mean_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum pixel intensity in each row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity_per_row = np.max(gray, axis=1)\n    return float(np.mean(max_intensity_per_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    right_half = gray[:, gray.shape[1] // 2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixel values above the mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    return float(np.count_nonzero(gray > mean_intensity))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonals from bottom left to top right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal_values = [gray[i, gray.shape[1] - 1 - i] for i in range(min(gray.shape))]\n    return float(np.mean(diagonal_values))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_quadrant = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.mean(left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(edges[0]) + np.count_nonzero(edges[1])\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = np.prod(gray.shape)\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left quarter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quarter = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum difference between adjacent pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.abs(np.gradient(gray, axis=1))\n    dy = np.abs(np.gradient(gray, axis=0))\n    return float(np.max(np.concatenate((dx.flatten(), dy.flatten()))))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.sum(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    avg_intensity = np.mean(gray)\n    count_above_avg = np.count_nonzero(gray > avg_intensity)\n    return float(count_above_avg)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.std(right_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensity values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel intensity variance in each color channel\"\n    if len(image.shape) == 3:\n        variances = np.var(image, axis=(0, 1))\n        return float(np.mean(variances))\n    else:\n        return float(0.0)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between upper and lower halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_half = gray[:gray.shape[0]//2, :]\n    lower_half = gray[gray.shape[0]//2:, :]\n    return float(np.mean(upper_half) - np.mean(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the diagonal from top-left to bottom-right\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    diagonal = gray[np.arange(min(gray.shape)), np.arange(min(gray.shape))]\n    return float(np.mean(diagonal))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean vertical gradient across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(dy)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray == 0) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the bottom-left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.var(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the rightmost column\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray[:, -1]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel value\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom row\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[-1, :]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are above the mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    return float(np.count_nonzero(gray > mean_intensity) / gray.size)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_right_quadrant = gray[:gray.shape[0]//2, gray.shape[1]//2:]\n    return float(np.sum(top_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute differences in pixel intensity across rows\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dy = np.abs(np.gradient(gray, axis=0))\n    return float(np.mean(dy))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quadrant = gray[gray.shape[0]//2:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixels = np.prod(gray.shape)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between top half and bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2, :])\n    bottom_half_mean = np.mean(gray[gray.shape[0]//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution across the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray)) if np.std(gray) > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the darkest region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_threshold = 50\n    dark_pixel_count = np.count_nonzero(gray < dark_threshold)\n    total_pixel_count = np.prod(gray.shape)\n    return float(dark_pixel_count / total_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in pixel intensity between the top and bottom edges\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_edge_mean = np.mean(gray[0, :])\n    bottom_edge_mean = np.mean(gray[-1, :])\n    return float(top_edge_mean - bottom_edge_mean)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the left half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.var(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.max(center_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2, :]\n    return float(np.std(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with zero intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray == 0))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dx = np.gradient(gray, axis=1)\n    dy = np.gradient(gray, axis=0)\n    magnitude = np.sqrt(dx**2 + dy**2)\n    return float(np.max(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels with maximum intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    max_intensity = np.max(gray)\n    max_intensity_pixels = gray[gray == max_intensity]\n    return float(np.mean(max_intensity_pixels)) if max_intensity_pixels.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    return float(np.var(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom-left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_left_quarter = gray[3*gray.shape[0]//4:, :gray.shape[1]//2]\n    return float(np.mean(bottom_left_quarter))\n"]}
