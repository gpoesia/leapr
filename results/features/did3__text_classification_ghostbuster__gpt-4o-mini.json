{"used_features": ["def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Punctuation diversity: count of different punctuation marks\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in number of characters\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun.lower()) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a conjunction\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunction_count = len(re.findall(r'\\b(and|but|or|nor|for|so|yet)\\s', text, re.IGNORECASE))\n    if sentences == 0:\n        return 0.0\n    return float(conjunction_count) / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of different punctuation marks used\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return len(punctuation_marks)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    lengths = [len(p.split()) for p in paragraphs if p.strip()]\n    if not lengths:\n        return 0.0\n    return sum(lengths) / len(lengths)\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 7 characters to total words\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return float(long_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Frequency of uncommon words (those not in a common list)\"\n    common_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that'])  # Example common words\n    words = set(text.split())\n    uncommon_word_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_word_count) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    'Ratio of uppercase letters to total letters in the text'\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (defined as words that appear twice or less)\"\n    words = text.lower().split()\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    uncommon_count = sum(1 for count in word_counts.values() if count <= 2)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(p.split()) for p in paragraphs)\n    if len(paragraphs) == 0 or total_words == 0:\n        return 0.0\n    return total_words / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = len(set(text))\n    return float(unique_chars)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    import re\n    adjectives = re.findall(r'\\b(\\w+ed|\\w+ing)\\b', text)\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(p.split()) for p in paragraphs)\n    if len(paragraphs) == 0 or total_words == 0:\n        return 0.0\n    return total_words / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rare words (less common) in the text\"\n    common_words = set(['the', 'is', 'and', 'a', 'to', 'of', 'in', 'that', 'it', 'you', 'for'])\n    rare_word_count = sum(1 for word in text.split() if word.lower() not in common_words)\n    return float(rare_word_count)\n\n", "def feature(text: str) -> float:\n    \"Count of longer words (greater than 7 characters) in the text\"\n    long_words_count = len([word for word in text.split() if len(word) > 7])\n    return float(long_words_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of personal pronouns in the text\"\n    personal_pronouns = re.findall(r'\\b(I|me|my|mine|you|your|yours|he|him|his|she|her|hers|it|its|we|us|our|ours|they|them|their|theirs)\\b', text, re.IGNORECASE)\n    return float(len(personal_pronouns)) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of pronouns to total words in the text\"\n    pronouns = ['i', 'me', 'my', 'we', 'us', 'our', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'they', 'them', 'their']\n    word_count = len(text.split())\n    pronoun_count = sum(text.lower().count(pronoun) for pronoun in pronouns)\n    if word_count == 0:\n        return 0.0\n    return pronoun_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Frequency of complex (three or more syllables) words\"\n    complex_word_pattern = r'\\b\\w{3,}\\b'\n    complex_words = re.findall(complex_word_pattern, text)\n    return float(len(complex_words)) / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return word_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Density of numbers in the text\"\n    number_count = len(re.findall(r'\\d+', text))\n    return number_count / (len(text) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+(?:ly)?\\b', text)  # Basic heuristic to find adjectives\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Average length of unique word appearances\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words in the text\"\n    common_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'of', 'in'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words in the text\"\n    common_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'of', 'in'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_voice = len(re.findall(r'(\\bwas\\b|\\bwere\\b|\\bbe\\b)\\s+\\w+ed', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return passive_voice / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in the text\"\n    sentence_lengths = [len(sentence) for sentence in re.findall(r'[^.!?]+[.!?]', text)]\n    mean_length = sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Frequency of words that are likely to be found in AI-generated text (e.g., verbs ending in -ing)\"\n    ing_word_count = len(re.findall(r'\\b\\w+ing\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return ing_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun.lower()) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    lengths = [len(p.split()) for p in paragraphs if p.strip()]\n    if not lengths:\n        return 0.0\n    return sum(lengths) / len(lengths)\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice usage based on common passive constructions\"\n    passive_patterns = ['is', 'are', 'was', 'were', 'be', 'being', 'been']\n    count_passive = sum(text.lower().count(pattern) for pattern in passive_patterns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count_passive / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if len(words) == 0:\n        return 0.0\n    return float(long_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters in the text\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return float(long_words_count)\n\n", "def feature(text: str) -> float:\n    \"Count of complex sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'\\w+,\\s\\w+', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Measure of lexical diversity: the ratio of unique words to total words\"\n    unique_words = len(set(text.split()))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Density of complex words (words with more than 3 syllables)\"\n    import re\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Count of words that are long\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text (basic heuristic)\"\n    passive_voice_regex = r'\\b(is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    return len(re.findall(passive_voice_regex, text.lower())) / len(re.findall(r'\\w+', text)) if len(text) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 5 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 5)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice usage based on common passive constructions\"\n    passive_patterns = ['is', 'are', 'was', 'were', 'be', 'being', 'been']\n    count_passive = sum(text.lower().count(pattern) for pattern in passive_patterns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count_passive / total_words\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are less than 3 characters\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 3)\n    return short_word_count / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in number of characters\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # Placeholder for complex word logic\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    'Count of instances of the word \"I\" to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Average word length for unique words'\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences longer than 20 characters\"\n    long_sentences = len([sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if len(sentence) > 20])\n    return float(long_sentences)\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun.lower()) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    if len(sentences) == 0:\n        return 0.0\n    return float(word_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives per 100 words to assess descriptive quality\"\n    adjectives_pattern = r'\\b(?:a|an|the|this|that|those|these)\\s+\\w+\\s+(\\w+)\\b'\n    adjectives_count = len(re.findall(adjectives_pattern, text, re.IGNORECASE))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    return (adjectives_count / len(words)) * 100\n\n", "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    number_count = sum(1 for word in text.split() if word.isdigit())\n    total_words = len(text.split())\n    return number_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    capitalized_count = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    return capitalized_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    'Average number of sentences per paragraph'\n    paragraphs = text.split('\\n')\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    if len(paragraphs) == 0:\n        return 0.0\n    return float(sentence_count) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return float(long_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases per sentence, reflecting complexity in sentence structure.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    phrases = len(re.findall(r',', text))\n    if sentences == 0:\n        return 0.0\n    return float(phrases) / sentences\n\n", "def feature(text: str) -> float:\n    \"Presence of quotes in the text indicating dialogue or citation\"\n    count = text.count('\"') + text.count(\"'\")\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 5 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 5)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of punctuation marks relative to total length of text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-ASCII characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    return non_ascii_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = set(text.split())\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of parenthetical phrases (using parentheses) to total sentences ratio\"\n    sentences = re.findall(r'[.!?]', text)\n    parenthetical_count = text.count('(') + text.count(')')\n    return parenthetical_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words in the text\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the occurrences of passive voice constructions.\"\n    passive_voice_patterns = r'\\bwas\\b|\\bare\\b|\\bwere\\b|\\bhave been\\b|\\bhas been\\b|\\bhad been\\b'\n    return len(re.findall(passive_voice_patterns, text.lower()))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    word_count = len(text.split())\n    return word_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of specific transition words used in the text\"\n    transition_words = ['however', 'furthermore', 'meanwhile', 'consequently', 'therefore']\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    transition_count = sum(text.lower().count(word) for word in transition_words)\n    return transition_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of short words (less than 4 characters) to total words\"\n    short_words = len([word for word in text.split() if len(word) < 4])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return short_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of thematic shifts (points where the subject changes) in a paragraph\"\n    paragraphs = text.split('\\n')\n    thematic_shifts = sum(text.lower().count(key) for key in ['but', 'however', 'on the other hand', 'nevertheless', 'in contrast'])\n    return thematic_shifts / len(paragraphs) if len(paragraphs) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice usage based on common passive constructions\"\n    passive_patterns = ['is', 'are', 'was', 'were', 'be', 'being', 'been']\n    count_passive = sum(text.lower().count(pattern) for pattern in passive_patterns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count_passive / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(sentences) == 0:\n        return 0.0\n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of specific AI-related keywords in the text\"\n    keywords = ['AI', 'artificial', 'algorithm', 'generate', 'model', 'assistant']\n    count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Presence of complex vocabulary (words longer than 7 characters)\"\n    complex_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(complex_word_count)\n\n", "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = ['crisis', 'devastating', 'challenges', 'consequences', 'unveiled']\n    count = sum(text.lower().count(word) for word in negative_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks to total characters\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return len(punctuation_marks) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    clause_count = len(re.findall(r'[,;]|\\band\\b|\\bor\\b|\\bbut\\b', text)) + text.count('.') + text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(clause_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of self-referential phrases, indicative of human authorship\"\n    self_referential_phrases = ['I think', 'I believe', 'In my opinion', 'I feel']\n    count = sum(text.count(phrase) for phrase in self_referential_phrases)\n    return count / len(text.split()) if len(text.split()) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Number of quoted phrases in the text\"\n    quote_count = text.count('\"')\n    return float(quote_count) / 2  # Each quote usually has a start and an end\n", "def feature(text: str) -> float:\n    \"Number of quoted phrases in the text\"\n    quote_count = text.count('\"')\n    return float(quote_count) / 2  # Each quote usually has a start and an end\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    word_counts = [len(sentence.split()) for sentence in sentences]\n    return sum(word_counts) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum() and not c.isspace()) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of parentheses to total characters in the text\"\n    return text.count('(') / max(len(text), 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length based on characters instead of words\"\n    sentences = [sent for sent in re.split(r'[.!?]+', text) if sent.strip()]\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with non-standard characters (e.g., hyphens, apostrophes) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_standard_count = sum(1 for word in words if any(c in word for c in [\"'\", '-', '@']))\n    return non_standard_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of unique words compared to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of total words to total sentences in the text\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph.\"\n    paragraph_count = text.count('\\n') + 1\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if paragraph_count == 0:\n        return 0.0\n    return sentence_count / paragraph_count\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., 'however', 'moreover', 'meanwhile') in the text\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'nevertheless', 'meanwhile']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return float(len(text) / sentences)\n\n", "def feature(text: str) -> float:\n    \"Count the number of rhetorical questions in the text.\"\n    return float(len(re.findall(r'\\b(what|who|when|where|why|how)\\b[!?]', text.lower())))\n\n", "def feature(text: str) -> float:\n    \"Count of instances where the text expresses a comparison (e.g., 'like', 'as')\"\n    comparison_count = text.lower().count('like') + text.lower().count('as')\n    return float(comparison_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count the number of semi-colons in the text.\"\n    return text.count(';')\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured by the number of words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    count_capital_start = sum(1 for sentence in text.split('.') if sentence.strip() and sentence.strip()[0].isupper())\n    return count_capital_start / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of emotional words to total words in the text.\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'joy', 'scream', 'laugh', 'cry']\n    words = text.split()\n    if not words:\n        return 0.0\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return emotional_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (defined as words with more than 3 syllables) to total words.\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))\n    total_word_count = len(text.split())\n    return complex_word_count / total_word_count if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of contractions in the text.\"\n    return len(re.findall(r\"\\b\\w+'[t|s|ve|m|ll|d|re]\\b\", text))\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (words not in a predefined common English set)\"\n    common_words = set(['the', 'is', 'at', 'of', 'on', 'and', 'a', 'to', 'in', 'it', 'that', 'with', 'as', 'for', 'was', 'by', 'an', 'be', 'this', 'or', 'from'])\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamatory_count = text.count('!') + text.count('?')\n    total_sentences = text.count('.') + exclamatory_count\n    return float(exclamatory_count / total_sentences) if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clauses = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiouy]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count the number of unique words in the text.\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are common first-person pronouns (I, me, my, mine) to total words\"\n    first_person_pronouns = ['i', 'me', 'my', 'mine']\n    words = text.split()\n    count_pronouns = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return count_pronouns / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    return float(len(re.findall(r'\\?\\s*$', text)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of character count to word count in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(text) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of the number of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Count of the number of exclamation points in the text to indicate emotional intensity.\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical or literary devices used in the text (e.g., metaphors, similes)\"\n    patterns = ['like', 'as', 'metaphor', 'symbolizes', 'represents']\n    count = sum(text.lower().count(pattern) for pattern in patterns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of quoted phrases in the text.\"\n    quotes = re.findall(r\"'(.*?)'\", text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases used in the text.\"\n    transitional_phrases = ['however', 'moreover', 'meanwhile', 'thus', 'therefore', 'consequently']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(text.count('.') + text.count('!') + text.count('?') for text in paragraphs)\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length (number of words per sentence)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = len(text.split())\n    return float(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n", "def feature(text: str) -> float:\n    \"Count of filler words (e.g., um, like, you know) to total words\"\n    filler_words = len(re.findall(r'\\b(um|like|you know|actually|basically|seriously|totally)\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return filler_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing quotes in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    quote_sentences = len(re.findall(r'\"', text)) // 2  # Each quote pair is a sentence.\n    if sentences == 0:\n        return 0.0\n    return quote_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, furthermore) in the text\"\n    transition_words = ['however', 'furthermore', 'therefore', 'meanwhile', 'consequently', 'likewise', 'in addition']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return punctuation_count / total_length\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)  # Count sentences\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = set(words)\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sensory words (words related to sight, sound, touch, taste, smell)\"\n    sensory_words = re.findall(r'\\b(see|hear|feel|taste|smell)\\b', text, flags=re.IGNORECASE)  # Add more sensory-focused words as needed\n    return float(len(sensory_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Using words of at least 3 letters\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adjectives\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = len([word for word in words if word.lower() in {'beautiful', 'fantastic', 'clear', 'long', 'broken', 'scattered', 'tired', 'endless', 'recurring'}])\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words.\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total punctuation marks.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_mark_count = text.count('?')\n    if punctuation_count == 0:\n        return 0.0\n    return question_mark_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU') or 1\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'am', 'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'go', 'goes', 'said', 'say', 'get', 'gets', 'make', 'makes'})\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain conjunctions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunctions = len(re.findall(r'\\b(and|but|or|so|for|nor|yet|although|while|because)\\b', text.lower()))\n    return conjunctions / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters.\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain more than 20 words to total sentences\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    long_sentences_count = sum(1 for s in sentences if len(s.split()) > 20)\n    return long_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if word.endswith('ly')])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_count = len(re.findall(r'\\\".*?\\\"', text)) + len(re.findall(r'\\'.*?\\'', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that is comprised of dialogue.\"\n    dialogues = len(re.findall(r'\"[^\"]*\"', text)) + len(re.findall(r\"'[^']*'\", text))\n    words = len(re.findall(r'\\w+', text))\n    return dialogues / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain filler words (like 'um', 'uh') to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    filler_sentences_count = sum(1 for sentence in sentences if 'um' in sentence.lower() or 'uh' in sentence.lower())\n    return filler_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for a minimum word count.\"\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences containing dialogue.\"\n    dialogue_sentences = [sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if '\"' in sentence]\n    if not dialogue_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in dialogue_sentences) / len(dialogue_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.findall(r'[,;]', text)\n    total_sentences = len(re.findall(r'[^.!?]+', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(clauses) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that include dialogue markers (e.g., quotation marks).\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\".*?\"|\\'(?:.*?)\\'', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'nor', 'yet')))\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in text.split('.') + text.split('!') + text.split('?'))\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of common conjunctions in the text.\"\n    common_conjunctions = ['and', 'but', 'or', 'nor', 'for', 'yet', 'so']\n    words = text.lower().split()\n    count = sum(1 for word in words if word in common_conjunctions)\n    return count / (len(words) + 1e-6)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing questions in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with over 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 10])\n    if sentences == 0:\n        return 0.0\n    return float(long_sentences) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of total words that are conjunctions.\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(1 for word in words if word.lower() in conjunctions) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases (separated by commas or semicolons).\"\n    phrases = re.findall(r'[^,;]+', text)\n    return len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    return float(len(set(c for c in text if not c.isalnum() and not c.isspace())))\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are commonly used in casual speech.\"\n    common_words = {'the', 'and', 'to', 'is', 'in', 'it', 'you', 'that', 'of', 'a'}\n    words = text.split()\n    if not words:\n        return 0.0\n    common_count = sum(1 for word in words if word.lower() in common_words)\n    return common_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    count_numbers = sum(1 for word in words if any(char.isdigit() for char in word))\n    return count_numbers / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = len(re.findall(r'[,;]', text)) + len(re.findall(r'and|but|or', text))\n    sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    return clauses / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 7 characters.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of descriptive adjectives in the text.\"\n    words = text.split()\n    adjectives = sum(1 for word in words if word.lower() in ['great', 'beautiful', 'wonderful', 'amazing', 'trivial'])  # Example adjectives\n    return adjectives / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain direct speech.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    direct_speech_count = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters.\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words used in the text that are adverbs.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but|or', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with exclamation marks.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return text.count('!') / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    'Average sentence length in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text.\"\n    return float(len(set(text)))\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    comma_count = text.count(',')\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters in the text\"\n    total_uppercase = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    return total_uppercase / total_letters\n\n", "def feature(text: str) -> float:\n    \"Ratio of total words to the number of sentences.\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text, only considering words with 4 or more letters.\"\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quoted speech)\"\n    dialogue_count = len(re.findall(r'\".+?\"', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses (indicated by commas or conjunctions) per sentence\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    clauses_count = sum(text.count(',') + text.count('and') + text.count('but') for sentence in sentences)\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1  # Count sentences\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count the number of exclamation marks in the text\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 5 letters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    dialogue_count = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return dialogue_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use exclamation marks\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words\"\n    words = text.split()\n    number_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    if not words:\n        return 0.0\n    return number_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(re.findall(r'\\band\\b|\\bor\\b', sentence)) > 0)\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text.\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences.\"\n    sentences = text.split('.')\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentences) / (len(sentences) or 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are uncommon based on a predefined list of common words\"\n    common_words = {'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'to', 'that', 'is', 'for', 'you', 'he', 'was', 'on', 'are', 'as', 'with', 'his', 'they', 'at', 'this', 'by', 'from'}\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    if len(words) == 0:\n        return 0.0\n    return uncommon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_sentences = len(re.findall(r'\".*?\"', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words in the text\"\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions in the text.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return (question_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are over 7 characters long\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 12 words to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 12)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    clauses = sum(text.count(',') + text.count('and') + text.count('but') for text in re.findall(r'[^.!?]+[.!?]', text))\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    return exclamation_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of nouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    nouns = len(re.findall(r'\\b\\w+ing\\b|\\b\\w+ed\\b|\\b\\w+s\\b|\\b[a-zA-Z]+\\b', text))  # Simplistic noun detection\n    return nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with dialogue\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Calculates the ratio of sentences with more than 10 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    long_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 10)\n    if sentences == 0:\n        return 0.0\n    return long_sentence_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(sentence.count(',') + sentence.count('and') + sentence.count('or') for sentence in sentences)\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation marks between words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    return punctuation_count / word_count if word_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but', sentence)) + 1 for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    compound_sentences = len(re.findall(r'[,.]', text))  # Assuming compound sentences contain commas.\n    if sentences == 0:\n        return 0.0\n    return compound_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    max_length = max(len(word) for word in words)\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one punctuation mark to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    punctuated_sentences = len(re.findall(r'[^.!?]*[.!?][^.!?]*[.!?]', text))\n    return punctuated_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    dialogue_count = text.count('\"') // 2\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of words that start with an uppercase letter.\"\n    words = text.split()\n    uppercase_words = [word for word in words if word[0].isupper()]\n    if not uppercase_words:\n        return 0.0\n    return sum(len(word) for word in uppercase_words) / len(uppercase_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing direct speech to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    speech_count = sum(1 for sentence in sentences if '\"' in sentence)\n    if not sentences:\n        return 0.0\n    return float(speech_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total number of sentences\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph calculated using double line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    'Ratio of sentences containing dialogue to total sentences in the text.'\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in the text.\"\n    dialogues = re.findall(r'\\\".*?\\\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are contractions to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(s.split()) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of proper nouns to total words in the text\"\n    words = text.split()\n    proper_nouns = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return proper_nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    words = text.split()\n    dialogue = text.count('\"')\n    if len(words) == 0:\n        return 0.0\n    return dialogue / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain emotion-laden language.\"\n    emotion_words = [r'\\b(happy|sad|angry|love|hate|fear|joy|dislike|enjoy)\\b']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotion_count = sum(1 for sentence in sentences if re.search(emotion_words[0], sentence, re.IGNORECASE))\n    return emotion_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words, excluding very short ones\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 3]\n    if not long_sentences:\n        return 0.0\n    return sum(len(s.split()) for s in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of total punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of emotional words to total words in the text\"\n    emotional_words = re.findall(r'\\b(happy|sad|angry|joy|fear|love|hate|surprised|disgust)\\b', text, re.IGNORECASE)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(emotional_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'})\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue = text.count('\"') // 2  # Assuming dialogue is enclosed in quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for common phrases.\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text.\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    if not paragraphs or sentence_count == 0:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are longer than 10 characters to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are at least six letters long to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) >= 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words ending with -ing to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ing_count = sum(1 for word in words if word.endswith('ing'))\n    return ing_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that contain non-alphabetic characters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_alpha_count = sum(1 for word in words if any(not c.isalpha() for c in word))\n    return non_alpha_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are verbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did'})  # Simple verb set\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    words = text.split()\n    return sum(1 for word in words if word.isdigit()) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    dialogue_count = text.count('\"') // 2  # Each dialogue pair is enclosed in quotes\n    return dialogue_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one metaphor or simile.\"\n    metaphor_count = len(re.findall(r'\\b(as (?:\\w+\\s+)?\\w+ as|like)\\b', text, re.IGNORECASE))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return metaphor_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing conjunctions to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunction_sentences = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return conjunction_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum()) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words for sentences without conjunctions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    filtered_sentences = [s for s in sentences if 'and' not in s and 'but' not in s]\n    if not filtered_sentences:\n        return 0.0\n    total_words = sum(len(s.split()) for s in filtered_sentences)\n    return total_words / len(filtered_sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are split into hyphenated forms to total words\"\n    words = text.split()\n    hyphenated_words = sum(1 for word in words if '-' in word)\n    if len(words) == 0:\n        return 0.0\n    return hyphenated_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = len(re.findall(r'!', text))\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in characters, excluding very short words (3 characters or less).\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 3]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 8 characters) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 8)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are verbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(?:be|have|do|go|say|get|make|know|can|will|would|may|might|must|shall|see|come|think|take|look|want|give)\\b', word))\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences\"\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return text.count('?') / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamatory = text.count('!')\n    if sentences == 0:\n        return 0.0\n    return exclamatory / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one independent clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_sentences = len(re.findall(r'\\b(?:and|but|or|nor|for|so|yet)\\b.*?[.!?]', text))\n    return compound_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 0 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing special characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    special_char_count = sum(1 for word in words if not word.isalnum())\n    return special_char_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quotes)\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\"', text)) // 2  # Count pairs of quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 6 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    if len(words) == 0:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are conjunctions to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'so', 'for', 'nor', 'yet', 'either', 'neither', 'whether'})\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamation marks to total punctuation marks\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if re.search(r'ly$', word.lower())])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a question\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = len(re.findall(r'\\?', text))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of question words (who, what, where, when, why) to total words\"\n    question_words = ['who', 'what', 'where', 'when', 'why']\n    words = text.lower().split()\n    if len(words) == 0:\n        return 0.0\n    question_count = sum(1 for word in words if word in question_words)\n    return question_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with fewer than 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if text else 0)\n    short_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) < 10])\n    return short_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for s in sentences if s.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'yet')))\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))  \n    rhetorical_questions = len(re.findall(r'[\\?]', text))\n    if sentences == 0:\n        return 0.0\n    return rhetorical_questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use imagery or figurative language\"\n    imagery_words = re.findall(r'\\b(imagine|dream|wonder|feel|sense|see|taste|hear)\\b', text.lower())\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(imagery_words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing dialogue (quotes)\"\n    dialogue_sentences = len(re.findall(r'\".+?\"', text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing direct speech\"\n    direct_speech = len(re.findall(r'\\\".*?\\\"', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech / sentences\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of pronouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = re.findall(r'\\b(he|she|it|they|him|her|his|their|there|you|we|us|me|my|mine|our|ours)\\b', text, re.IGNORECASE)\n    return float(len(pronouns)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = len(re.findall(r'[\"\\'].*?[\"\\']', text))\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing three or more syllables to total words\"\n    words = text.split()\n    long_syllable_words = sum(1 for word in words if len(re.findall(r'[aeiouy]{2,}', word)) >= 1)\n    return long_syllable_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the proportion of words that are personal pronouns.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = sum(1 for word in words if word.lower() in ['i', 'me', 'my', 'mine', 'you', 'your', 'yours', 'he', 'him', 'his', 'she', 'her', 'hers', 'it', 'its', 'we', 'us', 'our', 'ours', 'they', 'them', 'their', 'theirs'])\n    return pronouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of long sentences (more than 20 words) to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return float(long_sentences / sentences) if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of questions marks to the total number of punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_marks = text.count('?')\n    return question_marks / total_punctuation if total_punctuation > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that include dialogue to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that start with a conjunction.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    start_with_conjunction = sum(1 for sentence in re.split(r'[.!?]', text) if sentence.strip().startswith(('and', 'but', 'or', 'for', 'nor', 'so', 'yet')))\n    return start_with_conjunction / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of exclamation marks to total sentence count\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = text.count('!')\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating sentence complexity\"\n    clause_count = sum(len(re.findall(r'[;,.]', sentence)) + 1 for sentence in re.split(r'[.!?]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return clause_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return complex_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing at least one vowel\"\n    words = text.split()\n    if not words:\n        return 0.0\n    vowel_count = sum(1 for word in words if any(c in 'aeiou' for c in word.lower()))\n    return vowel_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentences = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentences / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct sentences starting with a capital letter\"\n    sentences = [s for s in text.split('.') if s.strip()]\n    return float(sum(1 for s in sentences if s.strip() and s[0].isupper()))\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total number of words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 2 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of quotes in the text indicating dialogue usage\"\n    quote_count = text.count('\"')\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return quote_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Average number of parentheses per sentence, suggesting elaboration or commentary\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return float(text.count('(') + text.count(')')) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 12 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 12)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence, excluding non-dialogue sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = re.findall(r'\\\".*?\\\"', text)\n    word_count = sum(len(sentence.split()) for sentence in dialogue_sentences)\n    if not dialogue_sentences:\n        return 0.0\n    return word_count / len(dialogue_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words containing at least one digit.\"\n    return float(len(re.findall(r'\\w*\\d\\w*', text)))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 3 syllables\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 3)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of compound sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_count = len(re.findall(r'(?:\\w+[,:;]?\\s+)?(?:\\w+\\s*[,;]\\s*)?(?:\\w+)', text))\n    return compound_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    unique_punctuations = len(set(char for char in text if not char.isalnum() and not char.isspace()))\n    return float(unique_punctuations)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with two or more syllables to total words.\"\n    words = text.split()\n    polysyllabic_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 1)\n    if not words:\n        return 0.0\n    return polysyllabic_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if word.lower() in ['good', 'bad', 'happy', 'sad', 'beautiful', 'big', 'small', 'bright', 'dark'])\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of characters that are whitespace characters\"\n    if not text:\n        return 0.0\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences in the text\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return text.count('!') / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph based on line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = len(re.findall(r'\\?+', text))\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(are|is|was|were|be|been|being|have|has|had|do|does|did|doing)\\b', word, re.IGNORECASE))\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 8 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 8)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words.\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return long_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverb usage to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    punctuation = {c for c in text if not c.isalnum() and not c.isspace()}\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one clause to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'[,\\;\\s]and\\s|\\band\\s|\\bor\\s|\\bso\\s', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, helping to identify diversity in vocabulary.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain at least one digit.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with strong emotional words to total sentences\"\n    emotional_words = re.findall(r'\\b(love|hate|fear|joy|mad|happy|sad|excited|angry|disgusted)\\b', text, re.IGNORECASE)\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(emotional_words) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions in the text.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    if len(words) == 0:\n        return 0.0\n    return contractions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouy') for word in words)\n    if not words:\n        return 0.0\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 6 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 5 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    unique_sentences = len(set(re.findall(r'\\S.*?[.!?]', text.strip())))\n    if sentences == 0:\n        return 0.0\n    return unique_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence.\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    'Ratio of words that contain digits to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of contractions to total words\"\n    contractions = re.findall(r\"\\b\\w+'s|\\b\\w+n't|\\b\\w+'ll|\\b\\w+'ve|\\b\\w+'d|\\b\\w+'re\", text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(contractions) / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (more than 3 syllables) in the text\"\n    return len(re.findall(r'\\b\\w*[aeiou]{3,}\\w*\\b', text))\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Counts the number of unique characters in the text\"\n    return float(len(set(text)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of verbs to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.endswith('ing') or word in ['is', 'are', 'was', 'were', 'be', 'being'])\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count the number of distinct sentence structures in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    structures = set()\n    for sentence in re.split(r'[.!?]', text):\n        words = sentence.strip().split()\n        structures.add((len(words), sum(1 for word in words if len(word) > 7)))\n    return float(len(structures))\n\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs that start with a capital letter to total paragraphs.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    capital_start_count = sum(1 for p in paragraphs if p.strip() and p[0].isupper())\n    return capital_start_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words that are often used in AI-generated text.\"\n    common_ai_words = ['there', 'is', 'are', 'the', 'you', 'to', 'and', 'of', 'that']\n    word_list = text.lower().split()\n    ai_word_count = sum(1 for word in word_list if word in common_ai_words)\n    return ai_word_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of uppercase letters to total characters in the text.\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (words with more than 5 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{5,}\\b', text))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of quotes to total sentences in the text.\"\n    quote_count = text.count('\"') + text.count(\"'\")\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(quote_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of quotes to total words in the text.\"\n    quotes = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return quotes / total_words\n\n"], "all_features": ["def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun.lower()) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = re.findall(r'\\b(?:isn\\'t|didn\\'t|aren\\'t|can\\'t|won\\'t|wouldn\\'t)\\b', text, re.IGNORECASE)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with non-standard spelling (e.g., slang, internet lingo)\"\n    non_standard_words = re.findall(r'\\b(?:lol|brb|gtg|omg|idk|tbh|smh|lmao)\\b', text, re.IGNORECASE)\n    if not text.split():\n        return 0.0\n    return float(len(non_standard_words)) / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Density of complex words (words with more than 3 syllables)\"\n    import re\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Count of words that are long\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors and similes in the text\"\n    figurative_language = len(re.findall(r'\\b(as|like)\\b', text))\n    return float(figurative_language)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in number of characters\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Frequency of uncommon words (those not in a common list)\"\n    common_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that'])  # Example common words\n    words = set(text.split())\n    uncommon_word_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_word_count) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(text.split())\n    return word_count / (len(sentences) + 1) if sentences else float(word_count)\n\n", "def feature(text: str) -> float:\n    \"Density of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that contain at least one strong punctuation mark (e.g., !, ?)\"\n    strong_sentences = len(re.findall(r'[.!?]', text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return strong_sentences / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text)) \n    total_words = len(text.split())\n    return adverbs / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Variability in sentence length (standard deviation of sentence lengths)\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation\n\n", "def feature(text: str) -> float:\n    \"Count of self-referential phrases, indicative of human authorship\"\n    self_referential_phrases = ['I think', 'I believe', 'In my opinion', 'I feel']\n    count = sum(text.count(phrase) for phrase in self_referential_phrases)\n    return count / len(text.split()) if len(text.split()) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of rare words (less frequent words based on a predefined list)\"\n    rare_words = {'quaint', 'unparalleled', 'peculiar', 'sentient', 'tapestry'}\n    count = sum(1 for word in text.split() if word.lower() in rare_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions in the text (and, but, or, etc.)\"\n    conjunctions = {'and', 'but', 'or', 'so', 'for', 'nor', 'yet'}\n    count = sum(1 for word in text.split() if word.lower() in conjunctions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = len(re.findall(r'\\w+', text))\n    if not sentences:\n        return 0.0\n    return words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Percentage of capitalized words in the text\"\n    words = text.split()\n    capitalized = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return float(capitalized) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return punctuation_count / total_chars\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    lengths = [len(p.split()) for p in paragraphs if p.strip()]\n    if not lengths:\n        return 0.0\n    return sum(lengths) / len(lengths)\n", "def feature(text: str) -> float:\n    \"Count of words with more than 10 characters\"\n    long_words = len([word for word in text.split() if len(word) > 10])\n    return float(long_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Punctuation diversity: count of different punctuation marks\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Count of clauses based on conjunctions\"\n    conjunctions = ['and', 'but', 'or', 'so', 'because']\n    clauses = sum(text.lower().count(conj) for conj in conjunctions)\n    return float(clauses)\n\n", "def feature(text: str) -> float:\n    \"Presence of specific keywords associated with human-like writing\"\n    keywords = ['I', 'you', 'we', 'our', 'your']\n    presence = any(keyword in text.lower() for keyword in keywords)\n    return float(presence)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice usage based on common passive constructions\"\n    passive_patterns = ['is', 'are', 'was', 'were', 'be', 'being', 'been']\n    count_passive = sum(text.lower().count(pattern) for pattern in passive_patterns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count_passive / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a proportion of total words\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return adverbs / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    num_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    if num_sentences == 0:\n        return 0.0\n    return len(text.split()) / num_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return punctuation_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short words (less than 4 characters) to total words\"\n    short_words = len([word for word in text.split() if len(word) < 4])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return short_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of different types of punctuation marks used in the text\"\n    punctuation_types = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_types))\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of sentences longer than 20 characters\"\n    long_sentences = len([sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if len(sentence) > 20])\n    return float(long_sentences)\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = len(re.findall(r'\\w+', text))\n    if not sentences:\n        return 0.0\n    return words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return word_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of questions in the text\"\n    question_count = text.count('?')\n    return float(question_count)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation points in the text\"\n    exclamation_count = text.count('!')\n    return float(exclamation_count)\n\n", "def feature(text: str) -> float:\n    \"Average character count per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of quoted phrases in the text\"\n    quote_count = text.count('\"')\n    return float(quote_count) / 2  # Each quote usually has a start and an end\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+(?:ly)?\\b', text)  # Basic heuristic to find adjectives\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of overly complex words (more than 4 syllables)\"\n    complex_words = re.findall(r'\\b\\w*?([aeiou]{1,2}){4,}\\w*\\b', text, re.IGNORECASE)\n    return float(len(complex_words))\n\n", "def feature(text: str) -> float:\n    \"Frequency of transition words (e.g., however, moreover) in the text\"\n    transition_words = ['however', 'moreover', 'furthermore', 'consequently', 'therefore']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words in the text\"\n    common_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'of', 'in'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions\"\n    passive_voice_pattern = r'\\b(?:is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    passive_count = len(re.findall(passive_voice_pattern, text))\n    return float(passive_count)\n\n", "def feature(text: str) -> float:\n    \"Density of adverbs in the text\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_pattern, text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of negations in the text\"\n    negation_pattern = r'\\b(?:not|no|never|nobody|nothing|none|nowhere)\\b'\n    negation_count = len(re.findall(negation_pattern, text))\n    return float(negation_count)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks used in the text\"\n    punctuation_marks = set('.!?;,:-()[]{}')\n    count = sum(1 for char in text if char in punctuation_marks)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a conjunction\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunction_count = len(re.findall(r'\\b(and|but|or|nor|for|so|yet)\\s', text, re.IGNORECASE))\n    if sentences == 0:\n        return 0.0\n    return float(conjunction_count) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (defined as words that appear twice or less)\"\n    words = text.lower().split()\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    uncommon_count = sum(1 for count in word_counts.values() if count <= 2)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique terms (after removing stop words)\"\n    stop_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'in'])\n    words = text.lower().split()\n    unique_terms = set(word for word in words if word not in stop_words)\n    return float(len(unique_terms))\n\n", "def feature(text: str) -> float:\n    \"Depth of vocabulary as determined by type-token ratio\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return float(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific technical vocabulary or jargon terms\"\n    technical_terms = set(['consultant', 'SWOT', 'management', 'system', 'justice', 'culture', 'immigration'])\n    count = sum(1 for word in text.split() if word.lower() in technical_terms)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Rate of existential phrases usage (e.g., 'there is', 'there are')\"\n    existential_phrases = re.findall(r'\\b(?:there\\s+(?:is|are))\\b', text, re.IGNORECASE)\n    return float(len(existential_phrases))\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transition words commonly used in human writing\"\n    transition_words = ['however', 'therefore', 'moreover', 'furthermore', 'nevertheless', 'consequently']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return count\n\n", "def feature(text: str) -> float:\n    \"Count of specific jargon or domain-specific terms\"\n    jargon_terms = ['healthcare', 'cognitive', 'community', 'quality', 'well-being']\n    count = sum(text.lower().count(term) for term in jargon_terms)\n    return count\n\n", "def feature(text: str) -> float:\n    \"Average number of different punctuation marks used\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return len(punctuation_marks)\n\n", "def feature(text: str) -> float:\n    \"Measure of emotional content based on sentiment words\"\n    sentiment_words = ['love', 'hate', 'happy', 'sad', 'joy', 'fear']\n    count = sum(text.lower().count(word) for word in sentiment_words)\n    return count\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentence_count = text.count('.') + text.count('!') + question_count\n    return question_count / total_sentence_count if total_sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    'Ratio of uppercase letters to total letters in the text'\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    'Count of instances of the word \"I\" to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    'Average word length for unique words'\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    'Ratio of question marks to total sentences'\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    question_count = text.count('?')\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    'Count of uncommon words (defined as > 6 letters) to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    uncommon_count = sum(1 for word in words if len(word) > 6)\n    return uncommon_count / len(words)\n\n", "def feature(text: str) -> float:\n    'Count of specific conjunctions (and, but, or) to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = ['and', 'but', 'or']\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = len(re.findall(r'\\w+', text))\n    return words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of abstract nouns in the text\"\n    abstract_nouns = re.findall(r'\\b(?:love|fear|happiness|concept|idea|thought|freedom|wisdom|emotion)\\b', text.lower())\n    return float(len(abstract_nouns))\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    max_length = max(len(word) for word in words)\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Count of words starting with a capital letter\"\n    words = text.split()\n    capitalized = len([word for word in words if word[0].isupper()])\n    return float(capitalized) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs ending in 'ly' in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text.lower())\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Punctuation-to-word ratio in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = len(text.split())\n    return punctuation_count / max(1, words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = set(words)\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a ratio of total words\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return float(adverbs) / words\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns as a ratio of total words\"\n    first_person_pronouns = len(re.findall(r'\\b(I|me|my|mine|we|us|our|ours)\\b', text, re.IGNORECASE))\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return float(first_person_pronouns) / words\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return float(punctuation_count) / total_length\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 7 characters to total words\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return float(long_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions marks to total sentences\"\n    question_marks = text.count('?')\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return float(question_marks) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words that are longer than 12 characters as a ratio of total words\"\n    long_words = len([word for word in text.split() if len(word) > 12])\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return float(long_words) / words\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of words with less than 3 characters\"\n    short_word_count = sum(1 for word in text.split() if len(word) < 3)\n    return float(short_word_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of numeric characters in the text\"\n    digit_count = sum(1 for c in text if c.isdigit())\n    if len(text) == 0:\n        return 0.0\n    return digit_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore)\"\n    transition_words = {'however', 'therefore', 'meanwhile', 'furthermore', 'nevertheless'}\n    return float(sum(1 for word in text.split() if word.lower() in transition_words))\n\n", "def feature(text: str) -> float:\n    \"Average length of the three longest words\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    long_words = sorted((len(word) for word in words), reverse=True)[:3]\n    if not long_words:\n        return 0.0\n    return sum(long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain complex words (more than 7 characters)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_word_count = sum(1 for word in re.findall(r'\\w+', text) if len(word) > 7)\n    return complex_word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(not s.strip() for s in sentences):\n        return 0.0\n    return sum(len(s.split()) for s in sentences if s.strip()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text based on common adverb patterns\"\n    adverb_patterns = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_patterns, text))\n    total_words = len(re.findall(r'\\w+', text))\n    return adverb_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of different types of punctuation marks used\"\n    punctuation_types = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_types))\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of all non-alphanumeric characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_alnum_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of different types of punctuation used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 15 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of stop words present in the text\"\n    stop_words = set(['a', 'an', 'the', 'and', 'but', 'in', 'on', 'for', 'to', 'with', 'of'])\n    words = text.lower().split()\n    stop_word_count = sum(1 for word in words if word in stop_words)\n    return float(stop_word_count)\n\n", "def feature(text: str) -> float:\n    \"Number of times the text uses the passive voice structure\"\n    passive_voice_pattern = r'\\b(?:is|are|was|were|be|being|been)\\s+\\w+ed\\b'  # Simplified pattern\n    passive_voice_count = len(re.findall(passive_voice_pattern, text))\n    return float(passive_voice_count)\n", "def feature(text: str) -> float:\n    \"Ratio of the number of different words to the total number of words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    import re\n    adjectives = re.findall(r'\\b(\\w+ed|\\w+ing)\\b', text)\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that have more than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (words with rare letters like q, x, z)\"\n    uncommon_letters = set('qxyz')\n    uncommon_words = sum(1 for word in text.split() if any(c in uncommon_letters for c in word))\n    return float(uncommon_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words containing numbers in the text\"\n    words_with_numbers = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    return float(words_with_numbers)\n\n", "def feature(text: str) -> float:\n    \"Count of words that start with a capital letter\"\n    capitalized_words = sum(1 for word in text.split() if word[0].isupper())\n    return float(capitalized_words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words with uncommon letters (less frequent in English)\"\n    uncommon_letters = set('jxqz')\n    uncommon_word_count = sum(1 for word in text.split() if any(letter in uncommon_letters for letter in word.lower()))\n    return float(uncommon_word_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Assume complex words are those with 3 or more letters\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions in the text\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    conjunction_count = sum(text.lower().count(conjunction) for conjunction in conjunctions)\n    return float(conjunction_count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of the word 'I' in the text\"\n    i_count = text.lower().count('i')\n    total_words = len(text.split())\n    return i_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    capitalized_count = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    return capitalized_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    long_sentence_count = len([sentence for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15])\n    return float(long_sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (longer than 7 characters) in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_word_count = sum(1 for word in words if len(word) > 7)\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = len(text.split())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Total punctuation count in relation to total length of the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., additionally, however) to total words\"\n    transition_words = {'additionally', 'also', 'besides', 'furthermore', 'however', 'moreover', 'therefore'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    transition_count = sum(1 for word in words if word in transition_words)\n    return transition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Diversity of word usage calculated by the ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_word_count = len(set(words))\n    return unique_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text (basic heuristic)\"\n    passive_voice_regex = r'\\b(is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    return len(re.findall(passive_voice_regex, text.lower())) / len(re.findall(r'\\w+', text)) if len(text) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of total unique words to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of numerical digits in the text\"\n    return float(sum(1 for c in text if c.isdigit()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # complex word > 3 characters\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    total_words = sum(len(p.split()) for p in paragraphs)\n    if len(paragraphs) == 0 or total_words == 0:\n        return 0.0\n    return total_words / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density, measured as punctuation characters per total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Ratio of words used in the text that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters (non-space)\"\n    if len(text) == 0:\n        return 0.0\n    total_chars = sum(1 for c in text if not c.isspace())\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average punctuation marks per sentence\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard words (not in common English dictionary)\"\n    non_standard_words = len(re.findall(r'\\b\\w{1,7}\\b', text))\n    return float(non_standard_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (greater than 15 words) to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentences = sum(1 for sentence in text.split('.') if len(sentence.split()) > 15)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = len(set(text))\n    return float(unique_chars)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    word_count = len(text.split())\n    return word_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Punctuation density (ratio of punctuation characters to total characters)\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_chars = len(text)\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (words ending with 'ly')\"\n    adverbs_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverbs_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences (in characters)\"\n    sentences = re.findall(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in text.split('.') if sentence)\n    return total_length / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = len(re.findall(r'\\w+,\\s\\w+|and|or', text))\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words in the text (less frequent than a given threshold)\"\n    common_words = set(['the', 'is', 'in', 'at', 'of', 'and', 'a', 'to', 'that'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of punctuation marks to the total number of words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return punctuation_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    sentence_count = len(sentences) + 1\n    if sentence_count == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Frequency of words greater than 10 characters long\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return long_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_lengths = [len(word) for word in words]\n    mean_length = sum(word_lengths) / len(word_lengths)\n    variance = sum((x - mean_length) ** 2 for x in word_lengths) / len(word_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    vowels = 'aeiou'\n    def syllable_count(word):\n        count = sum(1 for char in word.lower() if char in vowels)\n        return count or 1  # Ensure at least 1 syllable\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_syllables = sum(syllable_count(word) for word in words) / len(words)\n    return avg_syllables\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # counting words with 3 or more letters as a basic proxy\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of specific technical or scientific terms in the text\"\n    terms = ['AI', 'technology', 'scientists', 'advanced', 'condition', 'impact', 'analysis']  # example terms\n    count = sum(text.count(term) for term in terms)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of content words (nouns, verbs, adjectives, adverbs) to total words\"\n    content_words = len(re.findall(r'\\b(?:\\w+)\\b', text))  # this regex should ideally filter out prepositions and conjunctions specifically\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return content_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Measure of lexical diversity: the ratio of unique words to total words\"\n    unique_words = len(set(text.split()))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore, furthermore) in the text\"\n    transitions = ['however', 'therefore', 'furthermore', 'additionally', 'consequently']\n    count = sum(text.lower().count(word) for word in transitions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text as a flag for descriptive language\"\n    adjectives = re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+ly\\b', text)  # simplistic pattern for adjectives\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text (e.g. ended with a '?')\"\n    questions = text.count('?')\n    return float(questions)\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text as a measure of structure\"\n    paragraphs = text.strip().split('\\n')\n    return float(len(paragraphs))\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text as a measure of descriptive language\"\n    adjectives = len(re.findall(r'\\b\\w+(ed|ing|ful|less|ious|able|ive|y)\\b', text))\n    return float(adjectives)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words indicating vocabulary richness\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total sentences as a measure of emotional tone\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of dialog instances as an indicator of conversational tone\"\n    dialog_count = text.count('\"') // 2\n    return float(dialog_count)\n\n", "def feature(text: str) -> float:\n    \"Count of words containing at least one digit to identify technical content\"\n    technical_words = len(re.findall(r'\\w*\\d\\w*', text))\n    return float(technical_words)\n\n", "def feature(text: str) -> float:\n    \"Density of punctuation marks relative to total length of text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions as an indicator of writing style\"\n    passive_count = len(re.findall(r'\\b(are|is|was|were|be|been|being)\\s+\\w+ed\\b', text))\n    return float(passive_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text to assess vocabulary breadth\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Presence of first-person perspective indicative of human touch\"\n    first_person_count = text.lower().count('i') + text.lower().count('my') + text.lower().count('we') + text.lower().count('our')\n    return float(first_person_count)\n", "def feature(text: str) -> float:\n    \"Count of complex sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'\\w+,\\s\\w+', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of specific transition words used in the text\"\n    transition_words = ['however', 'furthermore', 'meanwhile', 'consequently', 'therefore']\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    transition_count = sum(text.lower().count(word) for word in transition_words)\n    return transition_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of unique word appearances\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives to total word ratio\"\n    adjectives = len(re.findall(r'\\b(?:quick|lazy|beautiful|crucial|important|prominent|exotic)\\b', text, flags=re.IGNORECASE))\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return adjectives / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of citation styles (i.e., use of quotes) in the text\"\n    citation_count = text.count('\"')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return citation_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average sentence length (in words)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-proper nouns to total nouns in the text\"\n    proper_nouns = len(re.findall(r'\\b[A-Z][a-z]*\\b', text))\n    total_nouns = len(re.findall(r'\\b\\w+\\b', text))\n    if total_nouns == 0:\n        return 0.0\n    return (total_nouns - proper_nouns) / total_nouns\n", "def feature(text: str) -> float:\n    \"Ratio of complex vocabulary usage: words with more than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(word) > 10)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length: total words divided by total sentences\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions: sentences ending with '?' to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    rhetorical_question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return rhetorical_question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of words that are longer than 7 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Density of non-alphanumeric characters: count of non-alphanumeric to total characters\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_count = len(text)\n    if total_count == 0:\n        return 0.0\n    return non_alnum_count / total_count\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word\"\n    def syllable_count(word):\n        vowels = 'aeiou'\n        count = sum(1 for char in word.lower() if char in vowels)\n        return count or 1  # Return 1 if no vowel found to avoid zero division\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional words: words that signal relation in text (e.g. however, therefore)\"\n    transitional_words = {'however', 'therefore', 'meanwhile', 'additionally', 'consequently'}\n    words = text.split()\n    transition_count = sum(1 for word in words if word.lower() in transitional_words)\n    return float(transition_count)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing questions to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return float(question_count) / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of technical or domain-specific words in the text\"\n    technical_terms = {'automobile', 'communication', 'therapy', 'symptom', 'disorder', 'cancer', 'respiration', 'ATP'}\n    words = set(text.split())\n    technical_word_count = sum(1 for word in words if word.lower() in technical_terms)\n    return float(technical_word_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of instances of passive voice to total clauses\"\n    passive_voice_pattern = r'\\b(?:is|was|were|be|been|being)\\s+\\w+\\b'\n    passive_count = len(re.findall(passive_voice_pattern, text))\n    clause_count = text.count(',') + text.count(';') + text.count('.') + text.count('!')\n    if clause_count == 0:\n        return 0.0\n    return float(passive_count) / clause_count\n\n", "def feature(text: str) -> float:\n    \"Count of transitional words (e.g., however, therefore) in the text\"\n    transitional_words = {'however', 'therefore', 'moreover', 'consequently', 'furthermore'}\n    words = text.split()\n    transitional_count = sum(1 for word in words if word.lower() in transitional_words)\n    return float(transitional_count)\n\n", "def feature(text: str) -> float:\n    \"Sentence length variability: standard deviation of lengths of sentences\"\n    import statistics\n    sentences = [s.strip() for s in re.split(r'[.!?]', text) if s]\n    sentence_lengths = [len(s.split()) for s in sentences]\n    if len(sentence_lengths) < 2:\n        return 0.0\n    return float(statistics.stdev(sentence_lengths))\n\n", "def feature(text: str) -> float:\n    \"Average length of longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) in the text\"\n    complex_words = len(re.findall(r'\\b\\w{1,}\\b', text)) - len(re.findall(r'\\b\\w{1,3}\\b', text))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_voice = len(re.findall(r'(\\bwas\\b|\\bwere\\b|\\bbe\\b)\\s+\\w+ed', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return passive_voice / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns in the text\"\n    first_person_pronouns = len(re.findall(r'\\b(I|me|my|mine|we|us|our|ours)\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    return first_person_pronouns / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total number of sentences\"\n    question_count = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_len = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - avg_len) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions - questions without an answer implied\"\n    rhetorical_questions = len(re.findall(r'\\b(why|how|what|who|when)\\b.*\\?', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return rhetorical_questions / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total number of words\"\n    conjunctions = len(re.findall(r'\\b(and|or|but|nor|for|so|yet)\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    return conjunctions / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Rate of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(count) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rare words (less common) in the text\"\n    common_words = set(['the', 'is', 'and', 'a', 'to', 'of', 'in', 'that', 'it', 'you', 'for'])\n    rare_word_count = sum(1 for word in text.split() if word.lower() not in common_words)\n    return float(rare_word_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(max(len(word) for word in words))\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_voice_count = len(re.findall(r'\\bwas\\b|\\bwere\\b|\\bhas\\b|\\bhave\\b|\\bhad\\b\\s+\\w+ed\\b', text))\n    return float(passive_voice_count)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    word_lengths = [len(word) for word in text.split()]\n    if not word_lengths:\n        return 0.0\n    mean_length = sum(word_lengths) / len(word_lengths)\n    variance = sum((length - mean_length) ** 2 for length in word_lengths) / len(word_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors or similes based on common patterns\"\n    metaphor_count = len(re.findall(r'\\bas\\b|\\blike\\b', text))\n    return float(metaphor_count) / len(text.split()) if text.split() else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of content words to total words in the text\"\n    content_words = re.findall(r'\\b(?:noun|verb|adjective|adverb)\\b', text)\n    total_words = len(text.split())\n    return len(content_words) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    words_count = len(text.split())\n    return words_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard punctuation used in the text\"\n    non_standard_punctuations = [',', ';', ':', '-', '\u201c', '\u201d']\n    punctuation_count = sum(text.count(punct) for punct in non_standard_punctuations)\n    return float(punctuation_count)\n\n", "def feature(text: str) -> float:\n    \"Count of longer words (greater than 7 characters) in the text\"\n    long_words_count = len([word for word in text.split() if len(word) > 7])\n    return float(long_words_count)\n\n", "def feature(text: str) -> float:\n    \"Presence of technical jargon terms in the text\"\n    jargon_terms = ['curriculum', 'significance', 'evaluating', 'effectiveness']\n    jargon_count = sum(text.lower().count(term) for term in jargon_terms)\n    return float(jargon_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    sentences = text.split('.')\n    adjectives = re.findall(r'\\b(?:\\w+ly|quick|beautiful|complex|simple)\\b', text)\n    return len(adjectives) / max(len(sentences), 1)\n\n", "def feature(text: str) -> float:\n    \"Frequency of modal verbs in the text\"\n    modal_verbs = ['can', 'could', 'may', 'might', 'shall', 'should', 'will', 'would']\n    total_modals = sum(text.lower().count(modal) for modal in modal_verbs)\n    words_count = len(text.split())\n    return total_modals / words_count if words_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of characters to words in the text\"\n    num_words = len(text.split())\n    if num_words == 0:\n        return 0.0\n    return float(len(text)) / num_words\n\n", "def feature(text: str) -> float:\n    \"Frequency of personal pronouns in the text\"\n    personal_pronouns = re.findall(r'\\b(I|me|my|mine|you|your|yours|he|him|his|she|her|hers|it|its|we|us|our|ours|they|them|their|theirs)\\b', text, re.IGNORECASE)\n    return float(len(personal_pronouns)) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Distribution of sentence lengths (standard deviation)\"\n    sentences = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentences:\n        return 0.0\n    mean_length = sum(sentences) / len(sentences)\n    variance = sum((x - mean_length) ** 2 for x in sentences) / len(sentences)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of technical terms or jargon in the text\"\n    technical_terms = re.findall(r'\\b(algorithm|data|neural|network|model|AI|machine|learning|deep|analysis|input|output)\\b', text, re.IGNORECASE)\n    return float(len(technical_terms)) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = re.findall(r'[,;]', text)  # Simple approximation of clauses\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return float(len(clauses) + sentences) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs)) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_question_count = len(re.findall(r'\\?\\s*$', text))\n    return float(rhetorical_question_count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    if sentence_count == 0:\n        return 0.0\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs in the text\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_word_count = len(re.findall(r'\\w+', text))\n    if total_word_count == 0:\n        return 0.0\n    return adverb_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of pronouns to total words in the text\"\n    pronouns = ['i', 'me', 'my', 'we', 'us', 'our', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'they', 'them', 'their']\n    word_count = len(text.split())\n    pronoun_count = sum(text.lower().count(pronoun) for pronoun in pronouns)\n    if word_count == 0:\n        return 0.0\n    return pronoun_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Sentiment score based on exclamation usage\"\n    exclamation_count = text.count('!')\n    total_sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if total_sentence_count == 0:\n        return 0.0\n    return exclamation_count / total_sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of embedded clauses in the text\"\n    embedded_clause_count = len(re.findall(r',\\s*which\\s*|\\s*that\\s*|;\\s*', text))\n    return float(embedded_clause_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice in the text based on specific verbs\"\n    passive_voice_indicators = ['is', 'are', 'was', 'were', 'be', 'been', 'being']\n    passive_count = sum(text.lower().count(verb) for verb in passive_voice_indicators)\n    total_word_count = len(re.findall(r'\\w+', text))\n    if total_word_count == 0:\n        return 0.0\n    return passive_count / total_word_count\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences containing more than 15 words\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentences = sum(1 for sentence in text.split('.') if len(sentence.split()) > 15)\n    return float(long_sentences) / max(1, len(sentences))\n\n", "def feature(text: str) -> float:\n    \"Density of first-person singular pronouns (I, me, my)\"\n    first_person_pronouns = ['I', 'me', 'my']\n    count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(count) / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / max(1, len(text))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return word_count / max(1, sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of complex (three or more syllables) words\"\n    complex_word_pattern = r'\\b\\w{3,}\\b'\n    complex_words = re.findall(complex_word_pattern, text)\n    return float(len(complex_words)) / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Proportion of stop words in the text\"\n    stop_words = set(['the', 'and', 'is', 'in', 'to', 'of', 'for', 'that', 'with', 'as', 'on', 'by'])\n    word_list = text.lower().split()\n    count_stop_words = sum(1 for word in word_list if word in stop_words)\n    return float(count_stop_words) / max(1, len(word_list))\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjective_pattern = r'\\b\\w+ly\\b'  # Simplified approach to find potential adjectives\n    adjective_count = len(re.findall(adjective_pattern, text))\n    return float(adjective_count) / max(1, len(text.split()))\n", "def feature(text: str) -> float:\n    \"Count of long sentences (more than 15 words)\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.findall(r'[^.!?]+', text)]\n    long_sentences = sum(1 for length in sentence_lengths if length > 15)\n    return float(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return float(punctuation_count) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Complexity of the vocabulary using the ratio of unique words to total words\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of adjectives in the text relative to total words\"\n    adjective_pattern = r'\\b\\w+(?=\\s+(?:is|are|was|were|seem|be|become|feeling|look))'\n    adjectives = re.findall(adjective_pattern, text)\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return float(len(adjectives)) / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases or words in the text\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'thus', 'therefore', 'consequently']\n    word_list = text.lower().split()\n    return float(sum(word in transitional_phrases for word in word_list))\n\n", "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = ['not', 'no', 'never', 'none', 'nothing', 'nobody', 'neither', 'absence']\n    word_list = text.lower().split()\n    return float(sum(word in negative_words for word in word_list))\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions in the text\"\n    rhetorical_pattern = r'(?<!\\w)(who|what|where|when|why|how)\\s?\\w*?\\?(?=.*?\\?)'\n    rhetorical_questions = len(re.findall(rhetorical_pattern, text, re.IGNORECASE))\n    total_questions = text.count('?')\n    if total_questions == 0:\n        return 0.0\n    return float(rhetorical_questions) / total_questions\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of passive voice constructions in the text\"\n    passive_voice_pattern = r'\\b(is|are|was|were|be|being|been) \\w+ed\\b'\n    matches = len(re.findall(passive_voice_pattern, text))\n    return matches / (len(re.findall(r'\\w+', text)) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are less than 3 characters\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 3)\n    return short_word_count / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Density of numbers in the text\"\n    number_count = len(re.findall(r'\\d+', text))\n    return number_count / (len(text) or 1)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of specialized terminology or jargon in the text\"\n    jargon_words = re.findall(r'\\b(artificial intelligence|Faster Than Light|interstellar|font)\\b', text, re.IGNORECASE)\n    return len(jargon_words) / (len(re.findall(r'\\w+', text)) or 1)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')\n    words = text.split()\n    total_syllables = sum(count_syllables(word) for word in words)\n    return total_syllables / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of quotations in the text as a ratio to total words\"\n    quote_count = text.count('\"')\n    return quote_count / (len(text.split()) or 1)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    words_count = len(text.split())\n    return words_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_lengths = [len(word) for word in words]\n    mean_length = sum(word_lengths) / len(word_lengths)\n    variance = sum((x - mean_length) ** 2 for x in word_lengths) / len(word_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of specific transition words (e.g. however, therefore)\"\n    transition_words = ['however', 'therefore', 'moreover', 'furthermore', 'nevertheless']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of the most common word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    most_common_count = max(word_counts.values())\n    return float(most_common_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # Placeholder for complex word logic\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing rhetorical questions\"\n    rhetorical_questions = re.findall(r'\\b\\?\\s*$', text)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    words_count = len(text.split())\n    return words_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific content-related words in the text\"\n    content_words = ['investment', 'success', 'strategy', 'development', 'market']\n    count = sum(text.lower().count(word) for word in content_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that start with an introductory phrase\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    intro_count = sum(1 for sentence in text.split('.') if sentence.strip().lower().startswith(('according', 'in addition')))\n    return intro_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n", "def feature(text: str) -> float:\n    \"Proportion of technical vocabulary in the text, defined as words longer than 6 characters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    technical_words = sum(1 for word in words if len(word) > 6)\n    return technical_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating complexity of sentence structure.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(text.count(',') + text.count(';') + text.count('and') for _ in sentences)\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (defined as words not in the top 1000 English words).\"\n    common_words = set([\"the\", \"be\", \"to\", \"of\", \"and\", \"a\", \"in\", \"that\", \"have\", \"it\", \"is\", \"was\", \"I\", \"for\", \"not\", \"on\", \"with\", \"he\", \"as\", \"you\", \"do\"])  # extend this set as needed\n    words = set(text.lower().split())\n    uncommon_count = len(words - common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of nested sentences (sentences within sentences) determined by the presence of commas.\"\n    nested_count = text.count(',')\n    return float(nested_count)\n\n", "def feature(text: str) -> float:\n    \"Density of abstract nouns in the text as an indicator of academic or professional style.\"\n    abstract_nouns = set(['freedom', 'justice', 'happiness', 'information', 'knowledge', 'intelligence'])  # expand this set\n    words = set(text.lower().split())\n    abstract_noun_count = sum(1 for word in words if word in abstract_nouns)\n    return float(abstract_noun_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words, indicating descriptive complexity.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if word.endswith('y') or word == 'good' or word == 'bad')  # simplistic adjective detection\n    return float(adjectives) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Measure of directness in statements, calculated as the frequency of 'I' and 'you' as subjects.\"\n    direct_count = text.lower().count(' i ') + text.lower().count(' you ')\n    return float(direct_count) / len(text.split()) if len(text.split()) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    words = len(text.split())\n    if len(sentences) == 0:\n        return 0.0\n    return words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore, furthermore)\"\n    transition_words = ['however', 'therefore', 'furthermore', 'additionally', 'moreover']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return punctuation_count / total_chars\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 7 characters\"\n    long_word_count = len(re.findall(r'\\b\\w{8,}\\b', text))\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of abstract to concrete words in the text\"\n    abstract_words = ['freedom', 'justice', 'democracy', 'culture', 'sovereignty']\n    concrete_words = ['canyon', 'film', 'tourists', 'lecture', 'gaming']\n    abstract_count = sum(text.lower().count(word) for word in abstract_words)\n    concrete_count = sum(text.lower().count(word) for word in concrete_words)\n    if (abstract_count + concrete_count) == 0:\n        return 0.0\n    return abstract_count / (abstract_count + concrete_count)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    return len(re.findall(adverb_pattern, text))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with complex structures (more than 20 words)\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return complex_sentence_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of long words (more than 7 characters)\"\n    long_words = [word for word in text.split() if len(word) > 7]\n    return len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    number_count = sum(1 for word in text.split() if word.isdigit())\n    total_words = len(text.split())\n    return number_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    average_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n    return average_length\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    word_lengths = [len(word) for word in text.split()]\n    mean_length = sum(word_lengths) / len(word_lengths) if word_lengths else 0.0\n    variance = sum((length - mean_length) ** 2 for length in word_lengths) / len(word_lengths) if word_lengths else 0.0\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_question_pattern = r'\\b(what|why|how|who|where|when)\\b.*\\?'\n    return len(re.findall(rhetorical_question_pattern, text))\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters in the text\"\n    unique_chars = len(set(text))\n    total_chars = len(text)\n    return unique_chars / total_chars if total_chars > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of questions marks indicating interrogative sentences\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences to words in the text\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / word_count if word_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = len(re.findall(r'[;,.]', text)) + text.count('and')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return clauses / sentence_count if sentence_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of text that is composed of long words (more than 7 letters)\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on double newline separators\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Count of distinct characters (excluding spaces) in the text\"\n    distinct_chars = len(set(text.replace(' ', '')))\n    return float(distinct_chars)\n\n", "def feature(text: str) -> float:\n    \"Average length of characters in sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    avg_length = sum(len(sentence.strip()) for sentence in sentences) / len(sentences) if sentences else 0.0\n    return avg_length\n\n", "def feature(text: str) -> float:\n    \"Count of exclamations used, indicating strong expressions\"\n    return float(text.count('!'))\n", "def feature(text: str) -> float:\n    \"Ratio of average sentence length to average word length in the text\"\n    word_count = len(re.findall(r'\\w+', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    avg_sentence_length = len(text) / sentence_count if sentence_count else 0.0\n    avg_word_length = sum(len(word) for word in re.findall(r'\\w+', text)) / word_count if word_count else 0.0\n    return avg_sentence_length / avg_word_length if avg_word_length else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain at least one conjunction\"\n    conjunctions = re.findall(r'\\b(and|but|or|nor|for|so|yet)\\b', text, re.IGNORECASE)\n    sentences_with_conjunctions = len(set(re.findall(r'[^.!?]*?[.!?]', text)) & {s for s in conjunctions})\n    return sentences_with_conjunctions / len(re.findall(r'[.!?]', text)) if len(re.findall(r'[.!?]', text)) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    exclamatory_count = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return exclamatory_count / total_sentences if total_sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Number of words that are not commonly used (those that appear less than N times in a standard corpus)\"\n    uncommon_words = len([word for word in re.findall(r'\\b\\w+\\b', text) if word.lower() not in {'the', 'is', 'and', 'to', 'a', 'in', 'of', 'that', 'it', 'for'}])\n    return float(uncommon_words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in the text\"\n    sentence_lengths = [len(sentence) for sentence in re.findall(r'[^.!?]+[.!?]', text)]\n    mean_length = sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average frequency of spelling mistakes per word in the text\"\n    spelling_mistakes = len(re.findall(r'\\b(?:teh|recieve|definately|occuring|wierd)\\b', text, re.IGNORECASE))  # Example set of common misspellings\n    word_count = len(re.findall(r'\\b\\w+\\b', text))\n    return spelling_mistakes / word_count if word_count else 0.0\n", "def feature(text: str) -> float:\n    \"Average character length of unique words in the text\"\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of words that are likely to be found in AI-generated text (e.g., verbs ending in -ing)\"\n    ing_word_count = len(re.findall(r'\\b\\w+ing\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return ing_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of rare or less common words in the text based on a predefined word list\"\n    rare_words = {'impoverished', 'crucial', 'outcomes', 'tirelessly', 'admissibility'}\n    word_list = text.lower().split()\n    rare_word_count = sum(1 for word in word_list if word in rare_words)\n    return float(rare_word_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are short (3 letters or fewer)\"\n    words = text.split()\n    if not words:\n        return 0.0\n    short_word_count = sum(1 for word in words if len(word) <= 3)\n    return short_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions in the text based on the number of question marks\"\n    question_count = text.count('?')\n    total_sentence_count = text.count('.') + text.count('!') + question_count\n    if total_sentence_count == 0:\n        return 0.0\n    return question_count / total_sentence_count\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of the lengths of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of specific connectors (e.g., 'however', 'moreover') that indicate structured arguments\"\n    connectors = {'however', 'moreover', 'therefore', 'consequently', 'furthermore'}\n    word_list = text.lower().split()\n    connector_count = sum(1 for word in word_list if word in connectors)\n    return float(connector_count)\n\n", "def feature(text: str) -> float:\n    \"Count of interjections (e.g., 'wow', 'oh', 'hey') within the text\"\n    interjections = {'wow', 'oh', 'hey', 'ouch', 'hurray'}\n    word_list = text.lower().split()\n    interjection_count = sum(1 for word in word_list if word in interjections)\n    return float(interjection_count)\n", "def feature(text: str) -> float:\n    \"Percentage of words longer than 7 characters in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_characters = len(text)\n    if total_characters == 0:\n        return 0.0\n    return punctuation_count / total_characters\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adjectives)\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    questions = text.count('?')\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of prepositions in the text\"\n    prepositions = re.findall(r'\\b(in|on|at|to|for|with|about|by|from|among|between)\\b', text.lower())\n    return float(len(prepositions))\n\n", "def feature(text: str) -> float:\n    \"Number of paragraphs in the text\"\n    paragraphs = text.strip().split('\\n')\n    return float(len(paragraphs)) if paragraphs else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of long words (greater than 7 characters) in the text\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 7)\n    return long_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    word_count = len(text.split())\n    return word_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct sentence starters (first word of each sentence)\"\n    sentence_starters = set(re.findall(r'(?<=[.!?])\\s*\\w+', text))\n    return float(len(sentence_starters))\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions in the text\"\n    question_count = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = re.findall(r'[,\\s]?\\w+[^\\.\\!\\?]*[,\\s]?\\w+', text)\n    sentences = len(re.findall(r'[.!?]', text))\n    return len(clauses) / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of transition words in the text\"\n    transition_words = ['however', 'moreover', 'furthermore', 'therefore', 'consequently']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraph_count = text.count('\\n') + 1\n    return float(paragraph_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of adjective use in the text\"\n    words = text.split()\n    adjective_count = sum(1 for word in words if word.endswith('y') or word in ['good', 'bad', 'big', 'small', 'great'])\n    return adjective_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of negations (not, no, never) in the text\"\n    negations = ['not', 'no', 'never']\n    count = sum(text.lower().count(word) for word in negations)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of question marks in the text\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Count of all non-alphanumeric characters in the text\"\n    return float(sum(1 for c in text if not c.isalnum() and not c.isspace()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    capitalized = sum(1 for word in words if word[0].isupper())\n    return capitalized / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence]\n    return sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., however, therefore) in the text\"\n    transitional_phrases = ['however', 'therefore', 'moreover', 'furthermore', 'consequently']\n    phrase_count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(phrase_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of negation words (e.g., not, no, never) in the text\"\n    negation_words = ['not', 'no', 'never', 'none', 'nobody']\n    negation_count = sum(text.lower().count(word) for word in negation_words)\n    return float(negation_count)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density calculated as punctuation characters over total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_characters = len(text)\n    return punctuation_count / total_characters if total_characters > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of acronym usage (all uppercase words) in the text\"\n    acronyms = re.findall(r'\\b[A-Z]{2,}\\b', text)\n    return float(len(acronyms))\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in words\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence]\n    if len(sentence_lengths) < 2:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / (len(sentence_lengths) - 1)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing complex structures (e.g., multiple clauses) to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    complex_sentences = sum(1 for s in re.split(r'[.!?]', text) if len(re.findall(r',', s)) > 1)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique capitalized words to total words ratio\"\n    words = text.split()\n    capitalized_words = {word for word in words if word.istitle()}\n    return len(capitalized_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',', s)) + 1 for s in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of parenthetical phrases (using parentheses) to total sentences ratio\"\n    sentences = re.findall(r'[.!?]', text)\n    parenthetical_count = text.count('(') + text.count(')')\n    return parenthetical_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with unusual spellings or jargon to total words\"\n    jargon_pattern = r'\\b(?:algorithm|utilize|sustainability)\\b'\n    words = text.split()\n    jargon_count = len(re.findall(jargon_pattern, text, re.IGNORECASE))\n    return jargon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(text.count('. ') + text.count('! ') + text.count('? ') for text in paragraphs)\n    return sentence_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of the text composed of thematic keywords (defined set) to total words\"\n    keywords = {'sustainability', 'technology', 'innovation', 'relativism'}\n    words = text.lower().split()\n    keyword_count = sum(1 for word in words if word in keywords)\n    return keyword_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions (e.g., questions at the end of sentences) to total questions\"\n    total_questions = text.count('?')\n    rhetorical_count = sum(1 for s in text.split('.') if '?' in s and text.strip().endswith('?'))\n    return rhetorical_count / total_questions if total_questions > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence divided by total word count\"\n    sentences = re.split(r'[.!?]', text)\n    longest_sentence_length = max((len(sentence.split()) for sentence in sentences), default=0)\n    total_words = len(text.split())\n    return longest_sentence_length / total_words if total_words > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if len(words) == 0:\n        return 0.0\n    return float(long_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of negations (e.g., 'not', 'never') in the text\"\n    negations = ['not', 'never', 'no', 'none']\n    count = sum(text.lower().count(neg) for neg in negations)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    word_count = len(re.findall(r'\\w+', text))\n    if len(sentences) == 0:\n        return 0.0\n    return float(word_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+(?:ly|ful|ous|ive|ic)\\b', text, re.IGNORECASE)\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text\"\n    num_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return float(num_punctuation) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters in the text\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return float(long_words_count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Frequency of specific conjunctions (and, but, or) indicating complexity\"\n    conjunctions = ['and', 'but', 'or']\n    count = sum(text.lower().count(conj) for conj in conjunctions)\n    word_count = len(text.split()) or 1\n    return count / word_count\n\n", "def feature(text: str) -> float:\n    \"Variability of sentence lengths measured as standard deviation\"\n    sentences = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence]\n    if not sentences:\n        return 0.0\n    mean_length = sum(sentences) / len(sentences)\n    variance = sum((length - mean_length) ** 2 for length in sentences) / len(sentences)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (less frequent in general usage)\"\n    uncommon_words = set(['pervasively', 'infiltrated', 'socioeconomic', 'fascinating', 'astrophysicist'])\n    words = text.lower().split()\n    count_uncommon = sum(1 for word in words if word in uncommon_words)\n    return float(count_uncommon)\n\n", "def feature(text: str) -> float:\n    \"Entropy of the word distribution (measure of unpredictability)\"\n    from collections import Counter\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    word_counts = Counter(words)\n    total_words = len(words)\n    probabilities = [count / total_words for count in word_counts.values()]\n    entropy = -sum(p * (p ** 0.5) for p in probabilities)\n    return entropy\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of specific modal verbs (may, might, can) indicating uncertainty\"\n    modals = ['may', 'might', 'can']\n    count = sum(text.lower().count(modal) for modal in modals)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    if not words:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore, additionally)\"\n    transition_words = ['however', 'therefore', 'additionally', 'meanwhile', 'furthermore']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (3 or more syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\w{3,}', text))  # Overly simplistic\n    words = text.split()\n    if not words:\n        return 0.0\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return uppercase_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences or not words:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that are longer than 20 characters\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.strip()) > 20)\n    return float(long_sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions used in the text\"\n    conjunctions = ['and', 'or', 'but', 'so', 'for', 'nor', 'yet']\n    words = text.lower().split()\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    return float(conjunction_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    question_count = text.count('?')\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    def syllable_count(word):\n        return max(1, sum(1 for char in word if char in 'aeiouAEIOU'))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing complex structures (subordinate clauses)\"\n    complex_sentence_pattern = r'\\b(?:although|because|since|if|when|while|unless)[^.!?]*[.!?]'\n    matches = re.findall(complex_sentence_pattern, text)\n    return float(len(matches))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    clause_pattern = r'[,;]|\\band\\b|\\bor\\b'\n    clause_count = len(re.findall(clause_pattern, text)) + len(sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Measure of lexical diversity: unique words divided by total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of different punctuation marks in the text\"\n    punctuation_set = set('.,!?;:()[]{}')\n    punctuation_count = sum(1 for c in text if c in punctuation_set)\n    return float(punctuation_count)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences longer than 15 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return long_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words in the text (not in a common stopword list)\"\n    common_words = {'the', 'and', 'is', 'to', 'of', 'a', 'in', 'it', 'that', 'for', 'on', 'with', 'as', 'was', 'at'}\n    words = set(text.lower().split())\n    uncommon_count = len(words - common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_characters = len(text)\n    if total_characters == 0:\n        return 0.0\n    return punctuation_count / total_characters\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = [len(word) for word in text.split()]\n    if len(words) == 0:\n        return 0.0\n    mean_length = sum(words) / len(words)\n    variance = sum((length - mean_length) ** 2 for length in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text based on newline characters\"\n    paragraphs = text.split('\\n')\n    paragraph_count = len([p for p in paragraphs if p.strip() != ''])\n    return float(paragraph_count)\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (words with three or more syllables)\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # This is a simple approximation\n    if complex_words == 0:\n        return 0.0\n    return complex_words / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Count of question marks in the text\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text (ending with 'ly')\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverbs)\n\n", "def feature(text: str) -> float:\n    \"Count of negation words (not, never, no, etc.)\"\n    negation_words = re.findall(r'\\b(not|never|no|none|nothing|nobody|neither|nowhere)\\b', text.lower())\n    return float(len(negation_words))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = len(re.findall(r',|;', text)) + len(re.findall(r'[.!?]', text))\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of specific transition words (e.g., however, therefore, furthermore)\"\n    transition_words = len(re.findall(r'\\b(however|therefore|furthermore|moreover)\\b', text.lower()))\n    return float(transition_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of specific conjunctions used (e.g., 'and', 'but') to indicate complexity\"\n    conjunctions = ['and', 'but', 'or']\n    word_list = text.lower().split()\n    count = sum(word_list.count(conj) for conj in conjunctions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 5 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 5)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of negations (e.g., 'not', 'no') to indicate tone\"\n    negations = ['not', 'no', \"don't\", \"doesn't\", \"isn't\"]\n    word_list = text.lower().split()\n    count = sum(word_list.count(neg) for neg in negations)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Sentence complexity based on average word length in sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    avg_word_length = sum(len(word) for word in text.split()) / len(text.split())\n    return avg_word_length\n\n", "def feature(text: str) -> float:\n    \"Punctuation richness measured as variety of punctuation marks used\"\n    punctuations = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuations))\n\n", "def feature(text: str) -> float:\n    \"Presence of quotes in the text indicating dialogue or citation\"\n    count = text.count('\"') + text.count(\"'\")\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., 'however', 'therefore') to indicate coherence\"\n    transition_words = ['however', 'therefore', 'meanwhile', 'furthermore']\n    word_list = text.lower().split()\n    count = sum(word_list.count(trans) for trans in transition_words)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r',|;', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text.\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    sentence_lengths = [len(sentence.split()) for sentence in sentences]\n    return sum(sentence_lengths) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count the occurrences of passive voice constructions.\"\n    passive_voice_patterns = r'\\bwas\\b|\\bare\\b|\\bwere\\b|\\bhave been\\b|\\bhas been\\b|\\bhad been\\b'\n    return len(re.findall(passive_voice_patterns, text.lower()))\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs that contain questions.\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    question_count = sum(1 for paragraph in paragraphs if '?' in paragraph)\n    return question_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of unique verbs in the text.\"\n    verbs = re.findall(r'\\b(?:is|are|was|were|be|being|been|have|has|had|do|does|did|say|says|said|go|goes|went|get|gets|got|make|makes|made|know|knows|knew|think|thinks|thought)\\b', text)\n    return float(len(set(verbs)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of unconventional punctuation marks (e.g., ~, &, %, $, #) to total punctuation.\"\n    unconventional_punctuation = re.findall(r'[~&%$#@!]', text)\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_punctuation == 0:\n        return 0.0\n    return len(unconventional_punctuation) / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    lengths = [len(word) for word in words]\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / len(lengths)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain complex words (more than 3 syllables)\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Counts words with 3 or more syllables\n    if sentences == 0:\n        return 0.0\n    return complex_words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.split(r'[.!?]+', text)\n    lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not lengths:\n        return 0.0\n    return sum(lengths) / len(lengths)\n\n", "def feature(text: str) -> float:\n    \"Length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(max(len(word) for word in words))\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - avg_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of emotive words in the text (positive or negative)\"\n    emotive_words = {'happy', 'sad', 'love', 'hate', 'excited', 'angry', 'hope', 'fear'}  # Examples\n    words = set(text.lower().split())\n    count = sum(1 for word in emotive_words if word in words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of advice-related words to total words in the text\"\n    advice_words = {'should', 'must', 'recommend', 'suggest', 'advise', 'encourage'}\n    words = text.split()\n    advice_count = sum(1 for word in words if word.lower() in advice_words)\n    return advice_count / float(len(words)) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs in the text to indicate complexity.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (3+ syllables) to total words.\"\n    if not text:\n        return 0.0\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Adjust pattern for complex words\n    return complex_words / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Weighted average of sentence lengths in characters to assess syntactic complexity.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in re.split(r'[.!?]', text)) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Percentage of passive voice constructions in the text.\"\n    passive_voice = len(re.findall(r'\\bis\\b \\w+ed|\\bare\\b \\w+ed|\\bwas\\b \\w+ed|\\bwere\\b \\w+ed', text))\n    return passive_voice / (len(text.split()) or 1)\n\n", "def feature(text: str) -> float:\n    \"Diversity of vocabulary measured by the ratio of unique words to total words.\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of negation words to indicate argumentative style.\"\n    negation_words = len(re.findall(r'\\b(no|not|never|none|nobody|nothing|neither|nor)\\b', text, re.IGNORECASE))\n    return float(negation_words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of numeric expressions to assess technical language.\"\n    numbers = len(re.findall(r'\\b\\d+\\b', text))\n    return numbers / (len(text.split()) or 1)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words with a high degree of complexity based on length\"\n    words = text.split()\n    complex_length_threshold = 7\n    complex_words = sum(1 for word in words if len(word) >= complex_length_threshold)\n    return float(complex_words)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases in the text\"\n    transition_phrases = ['however', 'moreover', 'in addition', 'furthermore', 'conversely']  # Example phrases\n    words = text.lower().split()\n    transition_count = sum(1 for word in words if word in transition_phrases)\n    return float(transition_count)\n\n", "def feature(text: str) -> float:\n    \"Diversity of vocabulary based on the ratio of adjectives to total words\"\n    adjectives = {'good', 'bad', 'happy', 'sad', 'angry'}  # Example adjectives\n    words = text.split()\n    adj_count = sum(1 for word in words if word.lower() in adjectives)\n    if not words:\n        return 0.0\n    return adj_count / len(words)\n", "def feature(text: str) -> float:\n    \"Count of specific emotional language (exclamations and question marks)\"\n    return len(re.findall(r'[!?]', text))\n\n", "def feature(text: str) -> float:\n    \"Count of conjunction words (and, but, or) to total words\"\n    conjunctions = ['and', 'but', 'or']\n    words = text.split()\n    if not words:\n        return 0.0\n    conj_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conj_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+', text.strip())\n    if not sentences:\n        return 0.0\n    capital_start = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].isupper())\n    return capital_start / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of punctuation marks as a ratio of total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the sentences in characters\"\n    sentences = re.findall(r'[^.!?]+', text.strip())\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Frequency of terms indicating uncertainty (e.g., 'maybe', 'might')\"\n    uncertainty_terms = ['maybe', 'might', 'perhaps', 'possibly', 'could']\n    words = text.split()\n    if not words:\n        return 0.0\n    uncertain_count = sum(1 for word in words if word.lower() in uncertainty_terms)\n    return uncertain_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with complex structures (more than 15 words)\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    return complex_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverb usage to total words\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    return adverb_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = len(re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Count of words with uncommon characters (e.g., '\u00e7', '\u00f1')\"\n    uncommon_characters = re.findall(r'[\u00e7\u00f1]', text)\n    return float(len(uncommon_characters))\n\n", "def feature(text: str) -> float:\n    \"Frequency of emotional words in the text\"\n    emotional_words = re.findall(r'\\b(happy|sad|love|hate|joy|fear)\\b', text, re.I)\n    total_words = len(re.findall(r'\\w+', text))\n    return len(emotional_words) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that consists of phrases longer than 10 characters\"\n    phrases = re.findall(r'\\b\\w{10,}\\b', text)\n    total_words = len(re.findall(r'\\w+', text))\n    return len(phrases) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of technological jargon or buzzwords in the text\"\n    buzzwords = re.findall(r'\\b(algorithm|AI|blockchain|data|cloud|network|quantum)\\b', text, re.I)\n    return float(len(buzzwords))\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text as a proportion of total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjective_count = sum(1 for word in words if word.lower().endswith('y') or word.lower() in ['a', 'an', 'the'])\n    return adjective_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(text.count(',') + text.count(';') + text.count('and') for _ in range(len(sentences)))\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverb use in the text as a proportion of total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation points as a proportion of total sentences\"\n    exclamation_count = text.count('!')\n    if text.count('.') + text.count('!') + text.count('?') == 0:\n        return 0.0\n    return exclamation_count / (text.count('.') + text.count('!') + text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are purely numeric\"\n    words = text.split()\n    if not words:\n        return 0.0\n    numeric_count = sum(1 for word in words if word.isdigit())\n    return numeric_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of different punctuation marks in the text\"\n    punctuation = set(char for char in text if not char.isalnum() and not char.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    sentence_length_total = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return sentence_length_total / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs (words ending in 'ly') to total words\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    comma_count = text.count(',')\n    sentence_count = text.count('.') + text.count('!') + text.count('?') or 1\n    return comma_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_pattern = r'\\b(?:why|what|how|who|where|when)\\b.*\\?'\n    rhetorical_questions = re.findall(rhetorical_pattern, text, re.IGNORECASE)\n    return len(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Count of specific keywords related to emotions in the text\"\n    emotion_keywords = ['love', 'hate', 'happy', 'sad', 'angry', 'joy', 'disappointment']\n    count = sum(text.lower().count(word) for word in emotion_keywords)\n    return count\n\n", "def feature(text: str) -> float:\n    \"Proportion of non-capitalized words to total words\"\n    words = text.split()\n    non_capitalized = sum(1 for word in words if not word[0].isupper())\n    return non_capitalized / len(words) if len(words) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of uppercase letters as a proportion of total letters\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_count = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_words = len(text.split())\n    return total_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of text length to the average word length\"\n    words = text.split()\n    if not words:\n        return 0.0\n    average_word_length = sum(len(word) for word in words) / len(words)\n    return len(text) / average_word_length\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Count of different verbs used in the text\"\n    verbs = {'is', 'are', 'was', 'were', 'be', 'being', 'been', 'has', 'have', 'had', 'do', 'does', 'did'}\n    words = text.lower().split()\n    verb_count = sum(1 for word in words if word in verbs)\n    return float(verb_count)\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Percentage of uppercase letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return float(uppercase_count) / total_length * 100\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in words\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((length - mean_length) ** 2 for length in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    number_of_paragraphs = len(paragraphs)\n    if number_of_paragraphs == 0:\n        return 0.0\n    return sum(len(paragraph.split()) for paragraph in paragraphs) / number_of_paragraphs\n\n", "def feature(text: str) -> float:\n    \"Count of different punctuation marks\"\n    punctuation_marks = {c for c in text if not c.isalnum() and not c.isspace()}\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Count of sentences starting with a non-capital letter\"\n    sentences = re.split(r'[.!?]', text)\n    count = sum(1 for sentence in sentences if sentence and not sentence[0].isupper())\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of buzzwords or jargon in the text\"\n    buzzwords = ['synergy', 'disrupt', 'leverage', 'bandwidth']\n    buzzword_count = sum(text.lower().count(word) for word in buzzwords)\n    return float(buzzword_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of exclamatory sentences in the text\"\n    exclamations = text.count('!')\n    return float(exclamations)\n\n", "def feature(text: str) -> float:\n    \"Proportion of first-person plural pronouns (we, us) in the text\"\n    first_person_plural_pronouns = ['we', 'us']\n    words = text.lower().split()\n    pronoun_count = sum(words.count(pronoun) for pronoun in first_person_plural_pronouns)\n    return pronoun_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Count of adjectives per 100 words to assess descriptive quality\"\n    adjectives_pattern = r'\\b(?:a|an|the|this|that|those|these)\\s+\\w+\\s+(\\w+)\\b'\n    adjectives_count = len(re.findall(adjectives_pattern, text, re.IGNORECASE))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    return (adjectives_count / len(words)) * 100\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of different tenses used in the text\"\n    tense_patterns = [r'\\b(am|is|are|was|were|be|being|been)\\b', r'\\b(have|has|had|having)\\b', r'\\b(will|would)\\b']\n    tense_count = sum(len(re.findall(pattern, text, re.IGNORECASE)) for pattern in tense_patterns)\n    return float(tense_count)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore) as a ratio to total words\"\n    transition_words = ['however', 'therefore', 'meanwhile', 'furthermore', 'moreover', 'consequently']\n    words = text.lower().split()\n    transition_count = sum(word in transition_words for word in words)\n    if not words:\n        return 0.0\n    return transition_count / len(words)\n", "def feature(text: str) -> float:\n    \"Count of unique bigrams in the text to assess complexity\"\n    words = text.split()\n    bigrams = set((words[i], words[i + 1]) for i in range(len(words) - 1))\n    return float(len(bigrams))\n\n", "def feature(text: str) -> float:\n    \"Percentage of the text that is made up of questions\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    return float(question_count) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 6 letters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return float(long_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice sentences in the text\"\n    passive_voice_count = len(re.findall(r'\\bbe\\b\\s+\\w+ed', text))  # Simple regex for passive voice indication\n    return float(passive_voice_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of emotive words to total words\"\n    emotive_words = {'love', 'hate', 'joy', 'fear', 'anger', 'sadness', 'happy', 'ecstatic', 'miserable', 'excited'}\n    words = text.split()\n    emotive_count = sum(1 for word in words if word.lower() in emotive_words)\n    return float(emotive_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence in words\"\n    sentences = re.split(r'[.!?]+', text)\n    max_length = max(len(sentence.split()) for sentence in sentences if sentence.strip()) if sentences else 0\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Count of words that contain digits\"\n    return float(len(re.findall(r'\\w*\\d\\w*', text)))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    sentence_lengths = [len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    return sum(sentence_lengths) / len(sentence_lengths)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of capitalized words in the text\"\n    capitalized_words = sum(1 for word in text.split() if word.istitle())\n    return float(capitalized_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unusually short words (1-3 characters) to total words\"\n    short_word_count = sum(1 for word in text.split() if 1 <= len(word) <= 3)\n    if not text.split():\n        return 0.0\n    return short_word_count / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that start with a capital letter\"\n    unique_capitalized = len(set(word for word in text.split() if word.istitle()))\n    return float(unique_capitalized)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total word count\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 10]\n    return float(len(long_words)) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sequence length of repeated characters in the text\"\n    repetitions = re.findall(r'(.)\\1{1,}', text)\n    return sum(len(rep) for rep in repetitions) / len(repetitions) if repetitions else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words containing numbers\"\n    return float(len(re.findall(r'\\b\\w*\\d\\w*\\b', text)))\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    return len(text) / (len(sentences) if sentences else 1)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct uppercase words in the text\"\n    uppercase_words = set(word for word in text.split() if word.isupper())\n    return float(len(uppercase_words))\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    unique_words = set(text.split())\n    return sum(len(word) for word in unique_words) / len(unique_words) if unique_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Punctuation-to-word ratio\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text.split()) if text.split() else 0.0\n", "def feature(text: str) -> float:\n    'Average number of sentences per paragraph'\n    paragraphs = text.split('\\n')\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    if len(paragraphs) == 0:\n        return 0.0\n    return float(sentence_count) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    'Density of sentences relative to total words'\n    word_count = len(text.split())\n    sentence_count = len(re.findall(r'[^.!?]+[.!?]', text))\n    if word_count == 0:\n        return 0.0\n    return sentence_count / word_count\n\n", "def feature(text: str) -> float:\n    'Frequency of hedging language (e.g., might, could, perhaps)'\n    hedging_words = ['might', 'could', 'perhaps', 'seems', 'suggests']\n    count = sum(text.lower().count(word) for word in hedging_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    'Proportion of unique words to total words'\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Count of exclamation marks in the text'\n    exclamation_count = text.count('!')\n    return float(exclamation_count)\n\n", "def feature(text: str) -> float:\n    'Ratio of rhetorical questions to total sentences'\n    rhetorical_questions = len(re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE))\n    sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return rhetorical_questions / sentences\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # words with at least 3 characters\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1  # avoid division by zero\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Percentage of text that is composed of stop words\"\n    stop_words = {'the', 'is', 'at', 'which', 'on', 'for', 'to', 'and', 'a'}  # sample set of stop words\n    words = text.split()\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return stop_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Occurrence count of the conjunctions (and, or, but) in the text\"\n    conjunctions = re.findall(r'\\b(and|or|but)\\b', text, re.IGNORECASE)\n    return float(len(conjunctions))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    capitalized_words = sum(1 for word in text.split() if word.istitle())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return capitalized_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of technical terms (words specific to a field, longer than 6 characters)\"\n    technical_terms = re.findall(r'\\b\\w{6,}\\b', text)\n    return float(len(technical_terms))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per unique word\"\n    unique_words = set(text.split())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_words / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    return float(len(set(words)))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    return float(long_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', p)) for p in paragraphs)\n    return float(sentence_count) / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct uppercase words\"\n    words = text.split()\n    uppercase_words = sum(1 for word in words if word.isupper())\n    return float(uppercase_words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word length in the text\"\n    words = text.split()\n    word_lengths = [len(word) for word in words]\n    mean_length = sum(word_lengths) / len(word_lengths) if word_lengths else 0\n    variance = sum((x - mean_length) ** 2 for x in word_lengths) / len(word_lengths) if word_lengths else 0\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs in the text\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    word_count = len(text.split())\n    return float(adverb_count) / word_count if word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    exclamatory_count = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return float(exclamatory_count) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in characters\"\n    paragraphs = text.split('\\n')\n    char_count = sum(len(p) for p in paragraphs)\n    return float(char_count) / len(paragraphs) if paragraphs else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words compared to total words, highlighting emphasis.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return float(capitalized_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases per sentence, reflecting complexity in sentence structure.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    phrases = len(re.findall(r',', text))\n    if sentences == 0:\n        return 0.0\n    return float(phrases) / sentences\n\n", "def feature(text: str) -> float:\n    \"Median length of sentences in words, indicating variation in sentence structure.\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence]\n    if not sentence_lengths:\n        return 0.0\n    return float(sorted(sentence_lengths)[len(sentence_lengths) // 2])\n\n", "def feature(text: str) -> float:\n    \"Count of unique sentence lengths in the text.\"\n    sentence_lengths = {len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence}\n    return float(len(sentence_lengths))\n\n", "def feature(text: str) -> float:\n    \"Frequency of linking words (e.g., and, but, or) relative to total words, indicating connectivity.\"\n    linking_words = {'and', 'but', 'or', 'so', 'also', 'nor', 'for', 'yet'}\n    words = text.split()\n    if not words:\n        return 0.0\n    linking_count = sum(1 for word in words if word.lower() in linking_words)\n    return float(linking_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text as a ratio to total sentences.\"\n    passive_voice_pattern = re.compile(r'\\b(are|is|was|were|be|been|being) \\w+ed\\b')\n    sentences = re.split(r'[.!?]', text)\n    passive_count = sum(1 for sentence in sentences if passive_voice_pattern.search(sentence))\n    return float(passive_count) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of interjections (e.g., wow, ouch) compared to total words, showcasing emotional expression.\"\n    interjections = {'wow', 'ouch', 'yay', 'oh', 'ah', 'ahem'}\n    words = text.split()\n    if not words:\n        return 0.0\n    interjection_count = sum(1 for word in words if word.lower() in interjections)\n    return float(interjection_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions compared to total sentences, indicating conversational tone.\"\n    rhetorical_question_pattern = re.compile(r'\\?\\s*$')  # Simplification\n    sentences = re.split(r'[.!?]', text)\n    rhetorical_count = sum(1 for sentence in sentences if rhetorical_question_pattern.search(sentence.strip()))\n    return float(rhetorical_count) / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text as a measure of vocabulary diversity\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of capitalized words as a measure of formality\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return float(capitalized_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(max(len(word) for word in words))\n", "def feature(text: str) -> float:\n    \"Calculate the average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of sentences that are longer than 10 words\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentences_count = sum(1 for s in sentences if len(s.split()) > 10)\n    if len(sentences) == 0:\n        return 0.0\n    return float(long_sentences_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Calculate the average length of words that are longer than 6 characters\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 6]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Count the occurrences of the word 'I' or 'me' in the text, indicating personal narrative\"\n    personal_pronouns = text.lower().count('i') + text.lower().count('me')\n    return float(personal_pronouns)\n\n", "def feature(text: str) -> float:\n    \"Measure the number of transitional phrases used in the text\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'therefore', 'meanwhile']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of uppercase letters to total letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    return float(uppercase_count) / total_letters\n\n", "def feature(text: str) -> float:\n    \"Count the number of adverbs in the text, which could indicate descriptive complexity\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_pattern, text))\n    return float(adverb_count)\n", "def feature(text: str) -> float:\n    \"Proportion of punctuated sentences that are questions.\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamation_count = text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of transitional words (e.g., however, therefore) in the text.\"\n    transitional_words = ['however', 'therefore', 'furthermore', 'moreover', 'meanwhile', 'consequently']\n    count = sum(text.lower().count(word) for word in transitional_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs that contain dialogue.\"\n    paragraphs = text.split('\\n')\n    dialogue_count = sum(1 for para in paragraphs if '\"' in para)\n    if not paragraphs:\n        return 0.0\n    return dialogue_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of long sentences (more than 20 words) to total sentences.\"\n    long_sentence_count = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return long_sentence_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.split(r'[,.]', text)\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return len(clauses) / sentence_count\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of emotional or subjective words using a simple list\"\n    subjective_words = {'love', 'hate', 'happy', 'sad', 'angry', 'joy', 'fear', 'surprise', 'disgust'}\n    word_list = text.lower().split()\n    count = sum(1 for word in word_list if word in subjective_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-ASCII characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    return non_ascii_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses (words separated by commas)\"\n    clause_count = text.count(',') + 1\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return clause_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 12 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 12)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Variation in sentence length measured by standard deviation\"\n    word_counts = [len(sentence.split()) for sentence in re.findall(r'[^.!?]*[.!?]', text)]\n    if not word_counts:\n        return 0.0\n    mean = sum(word_counts) / len(word_counts)\n    variance = sum((x - mean) ** 2 for x in word_counts) / len(word_counts)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases or conjunctions in the text\"\n    transitions = ['however', 'furthermore', 'moreover', 'therefore', 'consequently']\n    count = sum(text.lower().count(phrase) for phrase in transitions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Use regex for simplicity\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return complex_words / words\n\n", "def feature(text: str) -> float:\n    \"Average length of non-repeated phrases (more than 5 characters)\"\n    phrases = re.findall(r'\\b\\w{5,}\\b', text)\n    if not phrases:\n        return 0.0\n    unique_phrases = set(phrases)\n    return sum(len(phrase) for phrase in unique_phrases) / len(unique_phrases)\n\n", "def feature(text: str) -> float:\n    \"Density of technical jargon in the text based on predefined jargon list\"\n    jargon = ['algorithm', 'protocol', 'system', 'data', 'framework']\n    jargon_count = sum(text.lower().count(term) for term in jargon)\n    return float(jargon_count) / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+ly\\b', text)  # Basic adjective pattern match\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Identifies presence of narrative elements (e.g., character names)\"\n    narrative_elements = ['he', 'she', 'they', 'them', 'his', 'her']\n    count = sum(text.lower().count(element) for element in narrative_elements)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with complex structures (use of clauses)\"\n    clauses = len(re.findall(r'[,:;]|\\b(?!and)(?:[A-Z][a-z]+)\\b', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 5 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence in words\"\n    sentences = re.split(r'[.!?]+', text)\n    longest_sentence = max(len(sentence.split()) for sentence in sentences if sentence.strip())\n    return float(longest_sentence)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_counts = [len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs]\n    return sum(sentence_counts) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions to total words\"\n    conjunctions = ['and', 'but', 'or', 'so']\n    words = text.lower().split()\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    return conjunction_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of digits to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    digit_count = sum(1 for c in text if c.isdigit())\n    return digit_count / len(text)\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that contain more than 20 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return (long_sentences / len(sentences)) * 100 if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words longer than 6 characters\"\n    words = text.split()\n    unique_long_words = {word for word in words if len(word) > 6}\n    return float(len(unique_long_words))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    word_count = len(text.split())\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = set(text.split())\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., however, therefore, moreover)\"\n    transitional_phrases = ['however', 'therefore', 'moreover', 'consequently', 'furthermore']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of different punctuation marks used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are numeric\"\n    words = text.split()\n    numeric_count = sum(1 for word in words if word.isdigit())\n    return numeric_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest sentence in characters\"\n    sentences = re.split(r'[.!?]', text)\n    max_length = max(len(s) for s in sentences) if sentences else 0\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of underscores or dashes in the text\"\n    return (text.count('_') + text.count('-')) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of questions marks in the text\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences to total words in the text\"\n    word_count = len(re.findall(r'\\w+', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return sentence_count / word_count if word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words with more than 10 characters\"\n    return float(len(re.findall(r'\\b\\w{10,}\\b', text)))\n\n", "def feature(text: str) -> float:\n    \"Average word length in characters\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Whether the text contains a predefined set of keywords indicative of AI-generated content\"\n    keywords = ['algorithm', 'automated', 'machine learning', 'AI', 'model']\n    keyword_count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(keyword_count) / len(re.findall(r'\\w+', text)) if len(re.findall(r'\\w+', text)) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of long words (greater than 7 characters) to total words in the text\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (containing at least one subordinate clause) to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    complex_sentences = sum(1 for sentence in sentences if re.search(r'\\b(when|if|because|although|since)\\b', sentence.lower()))\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+', text)\n    clauses = sum(sentence.count(',') + sentence.count(';') for sentence in sentences)\n    return clauses / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of technical jargon (specific domain-related terms) in the text\"\n    technical_terms = {'protocol', 'stakeholder', 'administrative', 'production', 'protocol'}\n    return sum(1 for word in text.split() if word.lower() in technical_terms)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions (questions that do not require an answer) to total questions\"\n    questions = re.findall(r'\\?+', text)\n    rhetorical_questions = sum(1 for question in questions if re.search(r'\\bwhy\\b|\\bhow\\b|\\bwho\\b|\\bwhat\\b', question.lower()))\n    return rhetorical_questions / len(questions) if questions else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    exclamatory_sentences = sum(1 for sentence in sentences if sentence.endswith('!'))\n    return exclamatory_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique first-person pronouns in the text\"\n    first_person_pronouns = {'i', 'me', 'my', 'we', 'us', 'our'}\n    return len(set(word for word in text.lower().split() if word in first_person_pronouns))\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    question_count = text.count('?')\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'I' relative to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    total_length = sum(len(s) for s in re.split(r'[.!?]', text) if s.strip())\n    if not sentences:\n        return 0.0\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 6 characters) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of the use of the first-person perspective\"\n    first_person_count = sum(text.lower().count(pronoun) for pronoun in ['i', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours'])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return first_person_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    question_count = text.count('?')\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of numerical figures in the text\"\n    return float(len(re.findall(r'\\b\\d+\\b', text)))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text, in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct sentences in the text\"\n    sentences = set(re.findall(r'[^.!?]+[.!?]', text))\n    return float(len(sentences))\n\n", "def feature(text: str) -> float:\n    \"Count of verbs in the text\"\n    # A simplistic approach to count verbs based on common verb endings\n    verbs = re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+s\\b', text)\n    return float(len(verbs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of similes or metaphors in the text\"\n    # A very basic example that looks for patterns like 'as ... as' or 'like ...'\n    similes_metaphors = re.findall(r'\\bas\\b.*\\bas\\b|\\blike\\b.*[.,]', text)\n    return float(len(similes_metaphors))\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (words not in a common English word list) in the text\"\n    common_words = set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'it', 'in', 'that', 'of'])\n    words = text.lower().split()\n    uncommon_count = sum(1 for word in words if word not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence in the text\"\n    sentences = re.split(r'[.!?]+', text)\n    if not sentences:\n        return 0.0\n    longest_sentence_length = max(len(sentence.split()) for sentence in sentences if sentence.strip())\n    return float(longest_sentence_length)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text (words ending with 'ly')\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]+', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    return float(sum(sentence_lengths)) / len(sentence_lengths)\n\n", "def feature(text: str) -> float:\n    \"Count of emotional words (positive or negative) in the text\"\n    emotional_words = {'love', 'hate', 'happy', 'sad', 'joy', 'fear', 'anger'}\n    words = text.lower().split()\n    emotion_count = sum(1 for word in words if word in emotional_words)\n    return float(emotion_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in words\"\n    paragraphs = text.strip().split('\\n')\n    paragraph_lengths = [len(paragraph.split()) for paragraph in paragraphs if paragraph.strip()]\n    if not paragraph_lengths:\n        return 0.0\n    return float(sum(paragraph_lengths)) / len(paragraph_lengths)\n", "def feature(text: str) -> float:\n    \"Count of words containing non-alphanumeric characters indicating creative language use\"\n    return float(len(re.findall(r'\\w*[^\\w\\s]\\w*', text)))\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(sentence.strip()) for sentence in sentences)\n    return total_length / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain non-standard grammar (identified by common grammar mistakes)\"\n    error_patterns = re.findall(r'\\b(?:your|you\\'re|its|it\\'s|their|they\\'re|to|too|two|than|then)\\b', text)\n    sentences = re.split(r'[.!?]', text)\n    return len(error_patterns) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphorical phrases in the text\"\n    metaphors = re.findall(r'\\b(?:like|as|is|was)\\s+\\w+', text)\n    return float(len(metaphors))\n\n", "def feature(text: str) -> float:\n    \"Frequency of narrative techniques (e.g., dialogue) in the text\"\n    dialogue_count = text.count('\"') + text.count(\"'\")\n    return float(dialogue_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of first-person plural pronouns to total pronouns\"\n    words = re.findall(r'\\b(?:I|me|my|we|us|our|ours)\\b', text, re.IGNORECASE)\n    first_person_plural = len(re.findall(r'\\b(?:we|us|our|ours)\\b', text, re.IGNORECASE))\n    return first_person_plural / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique descriptors (adjectives) used in the text\"\n    adjectives = re.findall(r'\\b(?:beautiful|dark|dyslexic|peculiar|extraordinary|significant|cynical)\\b', text)\n    return float(len(set(adjectives)))\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain at least one complex word (more than 5 characters) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    complex_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if any(len(word) > 5 for word in sentence.split()))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    total_clauses = sum(sentence.count(',') + 1 for sentence in sentences if sentence.strip())\n    if len(sentences) == 0:\n        return 0.0\n    return total_clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of the phrase 'I' or 'me'\"\n    return float(text.lower().count(' i ') + text.lower().count(' me '))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of number of words\"\n    sentences = text.split('.')\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return total_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_count = len(re.findall(r'[!?]$', text))  # Assuming rhetorical questions end with ? or !\n    return float(rhetorical_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of the text that is dialogue (indicated by quotations)\"\n    quote_count = text.count('\"')\n    return quote_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of thematic shifts (points where the subject changes) in a paragraph\"\n    paragraphs = text.split('\\n')\n    thematic_shifts = sum(text.lower().count(key) for key in ['but', 'however', 'on the other hand', 'nevertheless', 'in contrast'])\n    return thematic_shifts / len(paragraphs) if len(paragraphs) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+ly\\b', text)  # Simple heuristic for identifying adjectives\n    unique_adj_count = len(set(adjectives))\n    return float(unique_adj_count)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in number of words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 7 characters\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    return float(long_words)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    punctuation_count = len(re.findall(r'[.!?]', text))\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return punctuation_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transition words in the text\"\n    transition_words = ['however', 'therefore', 'moreover', 'consequently', 'furthermore']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = re.findall(r'\\b(?:isn\\'t|don\\'t|couldn\\'t|won\\'t|shouldn\\'t|is|are|do|does)\\s+\\w+', text)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice usage in the text\"\n    passive_phrases = re.findall(r'\\bwas\\s+\\w+ed\\b|\\bwere\\s+\\w+ed\\b', text)\n    return float(len(passive_phrases))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than 20 words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of specific complex words (more than 2 syllables) in the text\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))\n    return complex_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of 'why' or 'how' as a ratio to total words in the text\"\n    word_count = len(text.split())\n    question_word_count = text.lower().count('why') + text.lower().count('how')\n    return question_word_count / word_count if word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Number of different topics introduced in the text, based on specific keywords\"\n    keywords = ['drug', 'fashion', 'culture', 'customer', 'education']\n    topic_count = sum(1 for keyword in keywords if keyword in text.lower())\n    return topic_count\n\n", "def feature(text: str) -> float:\n    \"Count of unique word stems in the text\"\n    words = set(text.split())\n    stems = {word[:-1] for word in words if len(word) > 1}  \n    return len(stems) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of chains of consecutive alphanumeric characters\"\n    return sum(len(word) for word in re.findall(r'\\w+', text)) / len(re.findall(r'\\w+', text)) if len(re.findall(r'\\w+', text)) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    return max(len(s.split()) for s in sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of occurrence of specific high-frequency words (like 'the', 'is', 'it') to total words\"\n    high_freq_words = ['the', 'is', 'it', 'and', 'of', 'to']\n    words = text.lower().split()\n    count = sum(words.count(word) for word in high_freq_words)\n    if len(words) == 0:\n        return 0.0\n    return count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 10 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(sentences) == 0:\n        return 0.0\n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of digits in the text divided by total word count\"\n    words = text.split()\n    digit_count = sum(1 for c in text if c.isdigit())\n    if len(words) == 0:\n        return 0.0\n    return digit_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs (words ending in -ly) to total words\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if len(words) == 0:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    total_words = len(text.split())\n    if len(sentences) == 0:\n        return 0.0\n    return total_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Ratio of sentences to words in the text\"\n    words = len(text.split())\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if words == 0:\n        return 0.0\n    return sentences / words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of specific AI-related keywords in the text\"\n    keywords = ['AI', 'artificial', 'algorithm', 'generate', 'model', 'assistant']\n    count = sum(text.lower().count(keyword) for keyword in keywords)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Punctuation variety: number of unique punctuation marks used\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = text.count('?')\n    return float(questions)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alnum_count / total_chars\n\n", "def feature(text: str) -> float:\n    \"Count of distinctive connector words such as 'and', 'but', 'or', 'so'\"\n    connectors = ['and', 'but', 'or', 'so']\n    count = sum(text.lower().split().count(connector) for connector in connectors)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Count of unique phrases split by certain delimiters (., !, ?) in the text\"\n    phrases = len(re.findall(r'[.!?]', text)) + 1\n    return float(phrases)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return float(uppercase_count) / total_letters if total_letters > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Punctuation density: ratio of punctuation characters to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count) / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of short words (3 characters or fewer) in the text\"\n    short_word_count = sum(1 for word in text.split() if len(word) <= 3)\n    return float(short_word_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the sentences in characters\"\n    sentences = text.split('. ') + text.split('! ') + text.split('? ')\n    sentence_lengths = [len(sentence) for sentence in sentences if sentence]\n    return sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0.0\n\n", "def feature(text: str) -> float:\n    \"Presence of complex vocabulary (words longer than 7 characters)\"\n    complex_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(complex_word_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words based on common adverb patterns\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    word_count = len(text.split())\n    return float(adverb_count) / word_count if word_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of specific thematic words related to emotional expression\"\n    emotional_words = ['happiest', 'good-natured', 'radiant', 'infectious', 'darkest']\n    count = sum(text.lower().count(word) for word in emotional_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.split()) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_pattern, text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_length = sum(len(word) for word in words) / len(words)\n    return avg_length\n\n", "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = ['crisis', 'devastating', 'challenges', 'consequences', 'unveiled']\n    count = sum(text.lower().count(word) for word in negative_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Variability in word usage: standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_lengths = [len(word) for word in words]\n    mean_length = sum(word_lengths) / len(word_lengths)\n    variance = sum((length - mean_length) ** 2 for length in word_lengths) / len(word_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'the' to total words\"\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    the_count = text.lower().count('the')\n    return the_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of first-person plural pronouns (we, us, our)\"\n    plural_pronouns = ['we', 'us', 'our']\n    count = sum(text.lower().count(pronoun) for pronoun in plural_pronouns)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Ratio of numeric digits to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    digit_count = sum(c.isdigit() for c in text)\n    return digit_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    if len(paragraphs) == 0:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions (and, but, or) to total word count\"\n    conjunctions = ['and', 'but', 'or']\n    words = text.lower().split()\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    if len(words) == 0:\n        return 0.0\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density specific to sentence-ending punctuation\"\n    ending_punctuation = ['.', '!', '?']\n    punctuation_count = sum(1 for c in text if c in ending_punctuation)\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]*', text)\n    if len(sentences) == 0:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks to total characters\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return len(punctuation_marks) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Count words longer than 3 characters\n    total_words = len(re.findall(r'\\w+', text))  # Total word count\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of different sentence starters in the text\"\n    sentences = re.split(r'[.!?]', text)\n    starters = set(sentence.strip().split()[0].lower() for sentence in sentences if sentence.strip())\n    return float(len(starters))\n\n", "def feature(text: str) -> float:\n    \"Ratio of emotive words to total words\"\n    emotive_words = len(re.findall(r'\\b(love|hate|happy|sad|joy|anger|fear|excited|bored|wonder)\\b', text, re.IGNORECASE))\n    total_words = len(re.findall(r'\\w+', text))\n    return emotive_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of hypothetical or conditional phrases (e.g., if, could, should)\"\n    conditionals = len(re.findall(r'\\b(if|could|would|should|might|may)\\b', text, re.IGNORECASE))\n    total_sentences = len(re.findall(r'[.!?]', text)) + 1\n    return conditionals / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rows or items marked by bullet points or numbers\"\n    bullet_points = len(re.findall(r'[-*\u2022]|\\d+\\.', text))\n    return float(bullet_points)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word length in the text\"\n    words = text.split()\n    lengths = [len(word) for word in words]\n    mean_length = sum(lengths) / len(lengths) if lengths else 0\n    variance = sum((x - mean_length) ** 2 for x in lengths) / len(lengths) if lengths else 0\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Frequency of questions in the text\"\n    questions = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text)) + 1\n    return questions / total_sentences if total_sentences > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    return float(question_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases in the text\"\n    transitional_phrases = re.findall(r'\\b(however|therefore|moreover|consequently|furthermore)\\b', text.lower())\n    return float(len(transitional_phrases))\n\n", "def feature(text: str) -> float:\n    \"Count of words with repeated letters (e.g., \u2018book\u2019, \u2018letter\u2019)\"\n    repeated_letter_count = len(re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text))\n    return float(repeated_letter_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    clause_count = len(re.findall(r'[,;]|\\band\\b|\\bor\\b|\\bbut\\b', text)) + text.count('.') + text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(clause_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique verb forms used in the text\"\n    verb_forms = re.findall(r'\\b(?:is|are|was|were|be|being|been|has|have|had|do|does|did|doing)\\b', text.lower())\n    return float(len(set(verb_forms)))\n\n", "def feature(text: str) -> float:\n    \"Proportion of filler words (e.g., um, uh) in the text\"\n    filler_count = len(re.findall(r'\\b(um|uh|like|you know|basically)\\b', text.lower()))\n    total_words = len(text.split())\n    return float(filler_count / total_words) if total_words > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Calculate the percentage of non-alphanumeric characters in the text.\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alnum_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of unique words in the text.\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Compute the average sentence length in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the average number of characters per word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Determine the variance of word lengths in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of adjectives to total words in the text.\"\n    adjectives = re.findall(r'\\b\\w+(?:ly)?\\b', text)\n    return len(adjectives) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the emotional tone of the text based on positive and negative words.\"\n    positive_words = {'happy', 'joy', 'love', 'excellent', 'great'}\n    negative_words = {'sad', 'anger', 'hate', 'poor', 'bad'}\n    words = text.lower().split()\n    pos_count = sum(1 for word in words if word in positive_words)\n    neg_count = sum(1 for word in words if word in negative_words)\n    return pos_count - neg_count\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    comma_count = text.count(',')\n    if not sentences:\n        return 0.0\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    question_count = text.count('?')\n    if not sentences:\n        return 0.0\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rare words (defined as words that appear in less than 5% of total texts)\"\n    common_words = set(['the', 'is', 'and', 'a', 'to', 'of', 'in'])  # Example set, expand as needed\n    words = re.findall(r'\\w+', text.lower())\n    rare_word_count = sum(1 for word in words if word not in common_words)\n    return float(rare_word_count)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives_pattern = r'\\b(?:JJ|JJR|JJS)\\b'\n    adjectives = len(re.findall(adjectives_pattern, text))\n    return float(adjectives)\n\n", "def feature(text: str) -> float:\n    \"Proportion of content words (nouns, verbs, adjectives, adverbs) to total words\"\n    content_words_pattern = r'\\b(NN|NNS|NNP|NNPS|VB|VBD|VBG|VBN|VBP|VBZ|JJ|JJR|JJS|RB|RBR|RBS)\\b'\n    words = len(re.findall(r'\\w+', text))\n    content_words = len(re.findall(content_words_pattern, text))\n    if words == 0:\n        return 0.0\n    return content_words / words\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(s.split()) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of technical terms in the text (words from a predefined list)\"\n    technical_terms = set(['epithelium', 'Renaissance', 'philosopher', 'identity', 'vowel'])  # Example set\n    words = re.findall(r'\\w+', text.lower())\n    technical_word_count = sum(1 for word in words if word in technical_terms)\n    return float(technical_word_count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(s) for s in sentences) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Count of words in the text that contain numeric characters\"\n    return float(len(re.findall(r'\\w*\\d\\w*', text)))\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text based on double newlines\"\n    return float(text.count('\\n\\n') + 1)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return float(sum(len(sentence.split()) for sentence in sentences)) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing passive voice constructions\"\n    passive_voice_pattern = r'\\b(is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    passive_count = sum(1 for sentence in sentences if re.search(passive_voice_pattern, sentence))\n    if len(sentences) == 0:\n        return 0.0\n    return float(passive_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives_pattern = r'\\b\\w+ly\\b|\\b(?:a|an|the|this|that|these|those)\\s+\\w+\\b'\n    return float(len(re.findall(adjectives_pattern, text)))\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions in the text\"\n    conjunctions = ['and', 'but', 'or', 'so', 'for', 'nor', 'yet']\n    return float(sum(text.lower().count(conjunction) for conjunction in conjunctions))\n\n", "def feature(text: str) -> float:\n    \"Count of words with non-standard characters (e.g., hyphens, apostrophes)\"\n    return float(len(re.findall(r'[\\w\\'-]+', text)) - len(re.findall(r'\\w+', text)))\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return punctuation_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of stop words compared to total words in the text\"\n    stop_words = {'the', 'is', 'in', 'and', 'to', 'of', 'a', 'that', 'it', 'on'}\n    word_list = text.split()\n    stop_word_count = sum(1 for word in word_list if word.lower() in stop_words)\n    if len(word_list) == 0:\n        return 0.0\n    return stop_word_count / len(word_list)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words longer than six characters in the text\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 6)\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return long_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of nouns in the text using a simple heuristic\"\n    nouns = len(re.findall(r'\\b\\w+(ing|ed|tion|ness|ity)\\b', text))\n    return float(nouns)\n\n", "def feature(text: str) -> float:\n    \"Average character count per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Semantic diversity by measuring the ratio of unique words to total word count\"\n    unique_word_count = len(set(text.split()))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return unique_word_count / total_word_count\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    word_counts = [len(sentence.split()) for sentence in sentences]\n    return sum(word_counts) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (not in the top 1000 English words) to total words\"\n    common_words = set(['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'to'])  # Simplified list\n    words = text.split()\n    uncommon_word_count = sum(1 for word in words if word.lower() not in common_words)\n    return uncommon_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of topic-specific jargon or keywords in the text\"\n    jargon_keywords = ['project', 'govern', 'court', 'king', 'queen']  # Simplified example set\n    words = text.split()\n    jargon_count = sum(1 for word in words if word.lower() in jargon_keywords)\n    return jargon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of adjectives per total words\"\n    words = text.split()\n    adjective_count = sum(1 for word in words if word.lower().endswith('y') or word.lower().endswith('ful'))\n    return adjective_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    question_count = text.count('?')\n    sentences = re.split(r'[.!?]', text)\n    return question_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words, indicating vocabulary variety\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    return unique_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions (and, but, or, so) in the text\"\n    conjunctions = ['and', 'but', 'or', 'so']\n    count = sum(text.lower().count(conj) for conj in conjunctions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text))\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (often ending in -ly) in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return capitalized_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions (questions without a question mark)\"\n    questions = re.findall(r'\\b\\w+.*(?<!\\?)\\b', text)\n    count = sum(1 for sentence in questions if sentence.lower().endswith(('why', 'how', 'what')))\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the three longest sentences in words\"\n    sentences = re.split(r'[.!?]', text)\n    lengths = sorted([len(sentence.split()) for sentence in sentences], reverse=True)\n    return sum(lengths[:3]) / 3 if lengths else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard punctuation characters (e.g., #, $, %, &, @)\"\n    non_standard_punctuation = re.findall(r'[#$%&@]', text)\n    return float(len(non_standard_punctuation))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of exclamation marks per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return text.count('!') / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    first_person_count = sum(1 for word in words if word.lower() in ['i', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours'])\n    return first_person_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Presence of rhetorical questions in the text\"\n    question_pattern = r'\\b(why|how|is|are|do|does|did|can|will|would|should|could)\\b.*?\\?'\n    matches = re.findall(question_pattern, text, re.IGNORECASE)\n    return float(len(matches))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with a frequency of at least one in a list of common words\"\n    common_words = {'the', 'and', 'is', 'to', 'in', 'it', 'that', 'of', 'for', 'on', 'was', 'with', 'as', 'by'}\n    words = text.split()\n    if not words:\n        return 0.0\n    common_count = sum(1 for word in words if word.lower() in common_words)\n    return common_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions (and, but, or) present in the text\"\n    conjunctions = ['and', 'but', 'or']\n    count = sum(text.lower().count(conj) for conj in conjunctions)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length calculated as average word count per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Presence of complex sentences (more than 20 words) in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    complex_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return float(complex_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of compound words in the text\"\n    compound_words = len(re.findall(r'\\w+-\\w+', text))\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return compound_words / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of abstract nouns (indicative of conceptual depth) in the text\"\n    abstract_nouns = ['love', 'justice', 'happiness', 'freedom', 'truth', 'beauty', 'knowledge']\n    count = sum(text.lower().count(noun) for noun in abstract_nouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with 15 or more words to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) >= 15)\n    sentence_count = len(sentences)\n    if sentence_count == 0:\n        return 0.0\n    return long_sentences / sentence_count\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum() and not c.isspace()) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    if len(text.split()) == 0:\n        return 0.0\n    return question_count / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Count of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of substrings before whitespace (indicating long continuous text)\"\n    substrings = text.split()\n    if not substrings:\n        return 0.0\n    long_segments = sum(1 for segment in substrings if len(segment) > 10)\n    return long_segments / len(substrings)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (3+ syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # Example syllable estimate\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of unique letters used in the text\"\n    unique_letters = set(c.lower() for c in text if c.isalpha())\n    return float(len(unique_letters))\n\n", "def feature(text: str) -> float:\n    \"Percentage of paragraphs (newlines) in the text\"\n    paragraph_count = text.count('\\n') + 1\n    if len(text) == 0:\n        return 0.0\n    return paragraph_count / (len(text.split('\\n')) or 1)\n", "def feature(text: str) -> float:\n    \"Ratio of parentheses to total characters in the text\"\n    return text.count('(') / max(len(text), 1)\n\n", "def feature(text: str) -> float:\n    \"Count of multi-word phrases (2 or more words) in the text\"\n    phrases = len(re.findall(r'\\b\\w+\\s+\\w+\\b', text))\n    return float(phrases)\n\n", "def feature(text: str) -> float:\n    \"Presence of common conjunctions (and, but, or) ratio to total words\"\n    conjunctions = sum(text.lower().count(conj) for conj in ['and', 'but', 'or'])\n    total_words = len(text.split())\n    return conjunctions / max(total_words, 1)\n\n", "def feature(text: str) -> float:\n    \"Count of unique non-repeating phrases (3 or more words)\"\n    phrases = re.findall(r'\\b(\\w+\\s+\\w+\\s+\\w+)\\b', text)\n    unique_phrases = len(set(phrases))\n    return float(unique_phrases)\n\n", "def feature(text: str) -> float:\n    \"Average number of nouns per sentence\"\n    sentences = max(len(re.findall(r'[.!?]', text)), 1)\n    nouns = len(re.findall(r'\\b\\w+(ed|ing|s|es)?\\b', text))\n    return nouns / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of first-person plural pronouns to total words\"\n    pronouns = sum(text.lower().count(pronoun) for pronoun in ['we', 'us', 'our', 'ours'])\n    total_words = len(text.split())\n    return pronouns / max(total_words, 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    exclamatory_count = text.count('!')\n    total_sentences = max(text.count('.') + text.count('!') + text.count('?'), 1)\n    return exclamatory_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Frequency of descriptive adjectives compared to total words\"\n    adjectives = ['great', 'big', 'small', 'beautiful', 'bad', 'wonderful']\n    count = sum(text.lower().count(adj) for adj in adjectives)\n    total_words = len(text.split())\n    return count / max(total_words, 1)\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Frequency of the most common word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_frequencies = {}\n    for word in words:\n        word_frequencies[word] = word_frequencies.get(word, 0) + 1\n    most_common_frequency = max(word_frequencies.values())\n    return most_common_frequency / len(words)\n\n", "def feature(text: str) -> float:\n    \"Presence of special characters (e.g., *, -, _) in the text\"\n    special_char_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return 1.0 if special_char_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text divided by total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_word_count = len(set(words))\n    return unique_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Total number of paragraphs as indicated by line breaks\"\n    paragraph_count = text.count('\\n') + 1\n    return float(paragraph_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of questions to the total number of sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Length of the shortest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return min(len(word) for word in words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Presence of numerals in the text\"\n    has_numerals = 1 if any(c.isdigit() for c in text) else 0\n    return float(has_numerals)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = len(re.findall(r',|;', text)) + len(re.findall(r'[.!?]', text))\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if len(text) > 0 else 0)\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks and question marks\"\n    exclamation_count = text.count('!') + text.count('?')\n    return float(exclamation_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of prepositions to total words\"\n    prepositions = set(['in', 'on', 'at', 'for', 'with', 'about', 'against', 'between', 'by', 'during', 'without', 'before', 'after', 'above', 'below'])\n    words = text.split()\n    if not words:\n        return 0.0\n    preposition_count = sum(1 for word in words if word.lower() in prepositions)\n    return preposition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of paragraphs in the text\"\n    return float(text.strip().count('\\n') + 1)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # simplistic complex word check\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words to total words in the text\"\n    capitalized_count = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return capitalized_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of conjunctions per sentence\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    conjunction_count = sum(text.lower().count(conj) for conj in conjunctions)\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return conjunction_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with emotive punctuation (exclamation marks) to total sentences\"\n    exclamation_count = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return exclamation_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (words ending in -ly) in the text\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized = sum(1 for word in words if word[0].isupper())\n    return capitalized / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = set(['and', 'but', 'or', 'so', 'for', 'nor', 'yet'])\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text.\"\n    adverbs = set(['quickly', 'silently', 'softly', 'easily', 'happily', 'sadly', 'suddenly', 'truly', 'definitely'])\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are interjections.\"\n    interjections = set(['wow', 'ouch', 'yay', 'hey', 'oops', 'hmm', 'uh'])\n    words = text.split()\n    if not words:\n        return 0.0\n    interjection_count = sum(1 for word in words if word.lower() in interjections)\n    return interjection_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard words (those not found in common dictionaries).\"\n    common_words = set(['the', 'and', 'is', 'to', 'in', 'that', 'a', 'of'])\n    words = text.split()\n    non_standard_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(non_standard_count)\n", "def feature(text: str) -> float:\n    \"Average sentence length based on characters instead of words\"\n    sentences = [sent for sent in re.split(r'[.!?]+', text) if sent.strip()]\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of narrative to descriptive words in the text\"\n    narrative_keywords = ['said', 'told', 'asked', 'replied', 'answered']\n    words = text.split()\n    narrative_count = sum(1 for word in words if word.lower() in narrative_keywords)\n    return narrative_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of first-person pronouns to total words\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    words = text.split()\n    first_person_count = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return first_person_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors or similes in the text\"\n    return len(re.findall(r'\\b(like|as)\\b.*?\\b(?:a|the)\\b', text, re.IGNORECASE))\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    questions = len(re.findall(r'\\?+', text))\n    sentences = len(re.findall(r'[.!?]+', text))\n    return questions / sentences if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of passive voice constructions detected in the text\"\n    return len(re.findall(r'\\bwas\\b \\w+ed\\b|\\bwere\\b \\w+ed\\b', text)) / len(text.split()) if text.split() else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of words with non-standard characters (e.g., hyphens, apostrophes) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_standard_count = sum(1 for word in words if any(c in word for c in [\"'\", '-', '@']))\n    return non_standard_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in terms of number of characters\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain dialogue (with quotes) to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence)\n    total_sentences = len(sentences) if sentences else 1\n    return dialogue_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are emotive or descriptive (adjectives/adverbs) to total words\"\n    adjectives_adverbs = len(re.findall(r'\\b\\w+ly\\b|\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+ous\\b|\\b\\w+ful\\b', text))\n    words = len(text.split())\n    return adjectives_adverbs / words if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of conjunctions (and, but, or, etc.) in the text\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    total_conjunctions = sum(text.lower().count(conj) for conj in conjunctions)\n    words = len(text.split())\n    return total_conjunctions / words if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = re.split(r'[,.]', text)\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return len(clauses) / sentence_count if sentence_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of parenthetical phrases (e.g., within parentheses) in the text\"\n    parentheticals = len(re.findall(r'\\(.*?\\)', text))\n    return float(parentheticals)\n\n", "def feature(text: str) -> float:\n    \"Percentage of unique words compared to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words that are longer than 10 characters\"\n    long_words = len([word for word in text.split() if len(word) > 10])\n    return float(long_words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific common conjunctions to total words\"\n    conjunctions = ['and', 'but', 'or', 'so', 'for', 'nor', 'yet']\n    words = text.split()\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return float(conjunction_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\W*', text))\n    total_words = len(text.split())\n    return complex_word_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Total count of rhetorical questions in the text\"\n    rhetorical_questions = re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(sentence.count(',') + sentence.count('and') + sentence.count('but') for sentence in sentences)\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Proportion of pronouns to total words\"\n    pronouns = ['I', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'we', 'us', 'our', 'they', 'them', 'their']\n    words = text.split()\n    if not words:\n        return 0.0\n    pronoun_count = sum(1 for word in words if word.lower() in pronouns)\n    return pronoun_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of total words to total sentences in the text\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return sentence_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words that contain digits\"\n    digit_words = len(re.findall(r'\\b\\w*\\d\\w*\\b', text))\n    return float(digit_words)\n\n", "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than three syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', re.sub(r'[^a-zA-Z ]', '', text)))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that exceed 15 words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 15)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of stop words to total words\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'a', 'that', 'it', 'of', 'I', 'we', 'you'])\n    word_list = text.lower().split()\n    stop_word_count = sum(1 for word in word_list if word in stop_words)\n    return stop_word_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation marks in the text\"\n    punctuations = [c for c in text if not c.isalnum() and not c.isspace()]\n    if not punctuations:\n        return 0.0\n    return sum(len(c) for c in punctuations) / len(punctuations)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of paragraphs to total number of sentences in the text\"\n    paragraphs = text.split('\\n')\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return len(paragraphs) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of uppercase words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_words = sum(1 for word in words if word.isupper())\n    return uppercase_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 20 characters) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence) > 20)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Presence of specific rare words indicating unique content\"\n    rare_words = ['incredulous', 'NCP', 'condition']  # Sample rare words\n    words = text.split()\n    rare_count = sum(1 for word in words if word in rare_words)\n    return float(rare_count)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    def syllable_count(word):\n        vowels = 'aeiouy'\n        return sum(1 for char in word.lower() if char in vowels)\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph.\"\n    paragraph_count = text.count('\\n') + 1\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if paragraph_count == 0:\n        return 0.0\n    return sentence_count / paragraph_count\n\n", "def feature(text: str) -> float:\n    \"Frequency of the word 'I' or 'me' as a proportion of total words.\"\n    personal_pronoun_count = text.lower().count('i') + text.lower().count('me')\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return personal_pronoun_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of adverb-like words in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return adverb_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_count = len(re.findall(r'\".*?\"', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Frequency of technical jargon (words that are long or unusual) in the text.\"\n    technical_jargon = len([word for word in text.split() if len(word) > 7])\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return technical_jargon / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of stopwords to total words.\"\n    stopwords = set(['the', 'is', 'in', 'and', 'to', 'a', 'of', 'that', 'it', 'as', 'this', 'for', 'on', 'with', 'was', 'by', 'at', 'an'])\n    stopword_count = len([word for word in text.split() if word.lower() in stopwords])\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return stopword_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of words used in passive voice to the total word count.\"\n    passive_voice_count = len(re.findall(r'\\b(be|being|been|is|are|was|were|am)\\s+\\w+ed\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return passive_voice_count / total_word_count\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with at least 15 characters to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len(re.findall(r'.{15,}[.!?]', text))\n    return long_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average number of ellipses (...) per paragraph\"\n    paragraphs = text.split('\\n')\n    ellipses_count = sum(text.count('...') for text in paragraphs)\n    return ellipses_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of total character count that are non-alphanumeric characters\"\n    total_chars = len(text)\n    non_alnum_chars = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alnum_chars / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of questions marks in the text\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions (and, but, or) to total words\"\n    words = text.split()\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or'})\n    return conjunctions / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in terms of characters\"\n    paragraphs = text.split('\\n')\n    if not paragraphs or all(len(p.strip()) == 0 for p in paragraphs):\n        return 0.0\n    return sum(len(p) for p in paragraphs) / len(paragraphs)\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., 'however', 'moreover', 'meanwhile') in the text\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'nevertheless', 'meanwhile']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions to total sentences in the text\"\n    rhetorical_question_pattern = r'\\b(?:isn\\'t|aren\\'t|didn\\'t|won\\'t|couldn\\'t|shouldn\\'t)\\b.*[?]'\n    questions = len(re.findall(r'[.!?]', text))\n    rhetorical_questions = len(re.findall(rhetorical_question_pattern, text.lower()))\n    return float(rhetorical_questions / questions) if questions > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    total_words = len(text.split())\n    pronoun_count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    return float(pronoun_count) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentence structures (containing multiple clauses) to total sentences\"\n    complex_sentence_pattern = r'[,;]'\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(complex_sentence_pattern, text))\n    return float(complex_sentences) / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in syllables (as a proxy for complexity)\"\n    syllable_count = sum(sum(1 for char in word if char in 'aeiou') for word in text.split())\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return float(syllable_count) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of idiomatic expressions (common phrases) in the text\"\n    idioms = ['a dime a dozen', 'break the ice', 'beat around the bush', 'hit the nail on the head']\n    count = sum(text.lower().count(phrase) for phrase in idioms)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (indicated by quotation marks)\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return float(dialogue_count) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text\"\n    passive_voice_pattern = r'\\b(?:is|are|was|were|be|been|being)\\s+[a-zA-Z]+ed\\b'\n    passive_count = len(re.findall(passive_voice_pattern, text))\n    return float(passive_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with more than 15 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of negation words (e.g., not, no, never)\"\n    negation_words = ['not', 'no', 'never', 'none', 'nobody', 'neither']\n    count_negation = sum(text.lower().count(word) for word in negation_words)\n    return float(count_negation)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = re.findall(r'\\b(?:why|how|what|who|where|when|is|are|do|does)\\b.*[?]', text, re.IGNORECASE)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs (words ending in -ly) to total words\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of figurative language usage (metaphors and similes)\"\n    figurative_patterns = re.findall(r'\\b(as|like|as if)\\b|\\b(is|are|was|were)\\b.*?\\b(like|as)\\b', text, re.IGNORECASE)\n    return float(len(figurative_patterns))\n\n", "def feature(text: str) -> float:\n    \"Count of instances of passive voice usage\"\n    passive_voice_patterns = re.findall(r'\\b(?:is|was|are|were|be|been|being)\\s+[^\\s]+ed\\b', text, re.IGNORECASE)\n    return float(len(passive_voice_patterns))\n\n", "def feature(text: str) -> float:\n    \"Presence of first-person pronouns (I, me, my, we, us, our)\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    count_first_person = sum(text.count(pronoun) for pronoun in first_person_pronouns)\n    return float(count_first_person)\n", "def feature(text: str) -> float:\n    \"Average number of characters per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return float(len(text) / sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamatory_count = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return float(exclamatory_count) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases in the text.\"\n    transitional_phrases = ['however', 'moreover', 'meanwhile', 'furthermore', 'nevertheless']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length based on words in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs to total words in the text.\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return float(len(adverbs)) / total_words\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that are questions.\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return float(question_count) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    unique_punctuations = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuations))\n", "def feature(text: str) -> float:\n    \"Count the number of rhetorical questions in the text.\"\n    return float(len(re.findall(r'\\b(what|who|when|where|why|how)\\b[!?]', text.lower())))\n\n", "def feature(text: str) -> float:\n    \"Calculate the number of distinct words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    distinct_words = len(set(words))\n    return float(distinct_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count the number of times the author uses the first person.\"\n    return float(text.lower().count('i') + text.lower().count('me') + text.lower().count('my'))\n\n", "def feature(text: str) -> float:\n    \"Calculate the average length of words that start with a vowel.\"\n    words = text.split()\n    vowel_words = [word for word in words if word[0].lower() in 'aeiou']\n    if not vowel_words:\n        return 0.0\n    return sum(len(word) for word in vowel_words) / len(vowel_words)\n\n", "def feature(text: str) -> float:\n    \"Measure the depth of nested clauses in the text.\"\n    return float(text.count(',') - text.count('.'))\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of adjectives to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = len(re.findall(r'\\b\\w+y\\b', text))  # simple pattern for adjectives ending in 'y'\n    return float(adjectives) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Measure the count of non-standard punctuation (e.g., ellipsis, dash).\"\n    return float(len(re.findall(r'\u2026|\u2013|-', text)))\n\n", "def feature(text: str) -> float:\n    \"Calculate the average length of quotes in the text.\"\n    quotes = re.findall(r'\"(.*?)\"', text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n", "def feature(text: str) -> float:\n    \"Count of instances where the text expresses a comparison (e.g., 'like', 'as')\"\n    comparison_count = text.lower().count('like') + text.lower().count('as')\n    return float(comparison_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of quoted phrases in the text\"\n    import re\n    quotes = re.findall(r'\"(.*?)\"', text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote.split()) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases used in the text\"\n    transitional_phrases = ['however', 'moreover', 'meanwhile', 'furthermore', 'in addition']\n    transition_count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(transition_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of abstract words (concepts) to total words\"\n    abstract_words = {'freedom', 'love', 'justice', 'happiness', 'thought'}\n    words = text.split()\n    abstract_word_count = sum(1 for word in words if word.lower() in abstract_words)\n    if len(words) == 0:\n        return 0.0\n    return abstract_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of instances where the text uses an ellipsis\"\n    ellipsis_count = text.count('...')\n    return float(ellipsis_count)\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that contain digits\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_word_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    total_chars = len(text.replace(' ', ''))\n    return total_chars / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uncommon words (not in a standard English vocabulary) to total words\"\n    uncommon_words = len(re.findall(r'\\b\\w{12,}\\b', text))\n    total_words = len(text.split())\n    return uncommon_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of exclamation marks per sentence\"\n    exclamation_count = text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return exclamation_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words that are personal pronouns (I, me, my, etc.)\"\n    personal_pronouns = re.findall(r'\\b(I|me|my|you|your|he|him|his|she|her|we|us|our|they|them|their)\\b', text, re.IGNORECASE)\n    return float(len(personal_pronouns))\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of unique words to the total number of words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (more than 3 syllables) in the text\"\n    complex_word_count = len(re.findall(r'\\b\\w*[aeiou]{2,}\\w*\\b', text))  # Simple syllable estimate\n    return float(complex_word_count)\n\n", "def feature(text: str) -> float:\n    \"Count the number of semi-colons in the text.\"\n    return text.count(';')\n\n", "def feature(text: str) -> float:\n    \"Count the number of transitional phrases (e.g., 'however', 'moreover').\"\n    transitions = ['however', 'moreover', 'therefore', 'consequently', 'meanwhile']\n    return sum(text.lower().count(phrase) for phrase in transitions)\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of adverbs to total words in the text.\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(text.split())\n    return adverbs / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of rhetorical questions in the text.\"\n    return len(re.findall(r'\\b\\w+\\?\\s', text))\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of words with less than 3 characters.\"\n    words = text.split()\n    short_words = sum(1 for word in words if len(word) < 3)\n    return short_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in terms of number of words.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    return total_words / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of words that are capitalized (not at the beginning of a sentence).\"\n    words = text.split()\n    capitalized_words = sum(1 for word in words if word[0].isupper() and word != words[0])\n    return capitalized_words\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of sentences that start with conjunctions (e.g., 'and', 'but').\"\n    conjunctions = ['and', 'but', 'or', 'so']\n    sentences = re.findall(r'[^.!?]+', text)\n    conjunction_starting = sum(1 for sentence in sentences if sentence.strip().lower().startswith(tuple(conjunctions)))\n    return conjunction_starting / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of unique words in the text.\"\n    words = set(text.split())\n    return float(len(words))\n", "def feature(text: str) -> float:\n    \"Average sentence length measured by the number of words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions identified by '?' at the end of a sentence\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Density of narrative style words (storytelling) present\"\n    narrative_words = sum(1 for word in text.split() if word.lower() in ['said', 'asked', 'told', 'replied', 'shared'])\n    return float(narrative_words) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words\"\n    sentences = text.split('.')\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases present in the text\"\n    transitions = ['however', 'moreover', 'furthermore', 'meanwhile', 'therefore']\n    transition_count = sum(1 for phrase in transitions if phrase in text.lower())\n    return float(transition_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses in sentences as an indicator of writing style\"\n    clause_count = sum(len(re.findall(r'[,;]', sentence)) for sentence in text.split('.'))\n    sentences = len(text.split('.'))\n    return float(clause_count) / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of direct speech based on quotes\"\n    return float(text.count('\"') // 2)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are adverbs as an indicator of descriptive language\"\n    adverb_list = ['quickly', 'silently', 'gracefully', 'suddenly', 'intentionally']\n    adverb_count = sum(1 for word in text.split() if word.lower() in adverb_list)\n    return adverb_count / len(text.split()) if len(text.split()) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    count_capital_start = sum(1 for sentence in text.split('.') if sentence.strip() and sentence.strip()[0].isupper())\n    return count_capital_start / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbial phrases to total words in the text.\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return len(adverbs) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'but' indicating contrast-related MEs.\"\n    return text.lower().count('but')\n\n", "def feature(text: str) -> float:\n    \"Ratio of technical terms (e.g., scientific, medical) to total words in the text.\"\n    technical_terms = len(re.findall(r'\\b(bio|tech|quantum|neuro|data)\\w*\\b', text, flags=re.IGNORECASE))\n    return technical_terms / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of acronyms present in the text.\"\n    acronyms = re.findall(r'\\b[A-Z]{2,}\\b', text)\n    return len(acronyms)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamations to total sentences in the text.\"\n    exclamations = text.count('!')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return exclamations / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of different writing tones (e.g., humorous, serious).\"\n    tones = ['humorous', 'serious', 'sarcastic', 'poetic', 'technical']\n    count_tones = sum(text.lower().count(tone) for tone in tones)\n    return count_tones / len(tones) if tones else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of emotional words to total words in the text.\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'joy', 'scream', 'laugh', 'cry']\n    words = text.split()\n    if not words:\n        return 0.0\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return emotional_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of first-person pronouns as a ratio to total words in the text.\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    words = text.split()\n    if not words:\n        return 0.0\n    first_person_count = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return first_person_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbial words as a ratio to total words in the text.\"\n    adverbs = ['quickly', 'slowly', 'sadly', 'happily', 'very', 'too', 'almost', 'just']\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'said' or its variations as a ratio to total words.\"\n    said_variations = ['said', 'says', 'saying']\n    words = text.split()\n    if not words:\n        return 0.0\n    said_count = sum(1 for word in words if word.lower() in said_variations)\n    return said_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of passive voice constructions to total sentences.\"\n    passive_voice_pattern = r'\\b(is|are|was|were|be|being|been)\\s+\\w{2,}\\b'\n    passive_count = len(re.findall(passive_voice_pattern, text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return passive_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with negative sentiment to total words in the text.\"\n    negative_words = ['not', 'never', 'nobody', 'nothing', 'nowhere', 'no']\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (defined as words with more than 3 syllables) to total words.\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))\n    total_word_count = len(text.split())\n    return complex_word_count / total_word_count if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Presence of emotive language (count of emotional words divided by total words).\"\n    emotional_words = {'love', 'hate', 'happy', 'sad', 'angry', 'joyful', 'fearful', 'excited'}\n    word_list = text.lower().split()\n    emotional_count = sum(1 for word in word_list if word in emotional_words)\n    return emotional_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (words ending in -ly) divided by total words.\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_word_count = len(text.split())\n    return adverbs / total_word_count if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Presence of jargon or technical terms (defined as commonly recognized terms in a specific domain).\"\n    jargon_words = {'algorithm', 'interface', 'synthesis', 'quantum', 'structure', 'database'}\n    word_list = set(text.lower().split())\n    jargon_count = len(word_list.intersection(jargon_words))\n    return float(jargon_count)\n\n", "def feature(text: str) -> float:\n    \"Count of connectives (words like 'and', 'but', 'however') divided by total words.\"\n    connectives = {'and', 'but', 'however', 'therefore', 'furthermore'}\n    word_list = text.lower().split()\n    connective_count = sum(1 for word in word_list if word in connectives)\n    return connective_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words in the text.\"\n    negative_words = {'no', 'not', 'never', 'nobody', 'nothing', 'none'}\n    word_list = text.lower().split()\n    negative_count = sum(1 for word in word_list if word in negative_words)\n    return negative_count / len(word_list) if word_list else 0.0\n", "def feature(text: str) -> float:\n    \"Count the number of contractions in the text.\"\n    return len(re.findall(r\"\\b\\w+'[t|s|ve|m|ll|d|re]\\b\", text))\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of words that are emotive (e.g. happy, sad).\"\n    emotive_words = ['happy', 'sad', 'angry', 'excited', 'bored', 'frustrated']\n    words = text.split()\n    emotive_count = sum(word in emotive_words for word in words)\n    return emotive_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the frequency of personal pronouns in the text.\"\n    personal_pronouns = ['I', 'you', 'he', 'she', 'we', 'they']\n    words = text.split()\n    pronoun_count = sum(word in personal_pronouns for word in words)\n    return pronoun_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest sentence in the text.\"\n    sentences = re.split(r'[.!?]', text)\n    max_length = max((len(s.split()) for s in sentences), default=0)\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Count the occurrences of the word 'I' as a measure of personal narrative.\"\n    return text.lower().count('i')\n\n", "def feature(text: str) -> float:\n    \"Calculate the overall sentiment score based on positive/negative words.\"\n    positive_words = ['good', 'great', 'excellent', 'fantastic', 'happy']\n    negative_words = ['bad', 'terrible', 'awful', 'hate', 'sad']\n    words = text.split()\n    sentiment_score = sum(word in positive_words for word in words) - sum(word in negative_words for word in words)\n    return float(sentiment_score)\n\n", "def feature(text: str) -> float:\n    \"Calculate the density of first-person narrative style.\"\n    first_person_words = ['I', 'my', 'me', 'we', 'our']\n    words = text.split()\n    first_person_count = sum(word in first_person_words for word in words)\n    return first_person_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of idiomatic expressions in the text.\"\n    idioms = ['kick the bucket', 'piece of cake', 'let the cat out of the bag']\n    return sum(text.lower().count(idiom) for idiom in idioms)\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words (words not in a predefined common English set)\"\n    common_words = set(['the', 'is', 'at', 'of', 'on', 'and', 'a', 'to', 'in', 'it', 'that', 'with', 'as', 'for', 'was', 'by', 'an', 'be', 'this', 'or', 'from'])\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    return float(uncommon_count)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in syllables\"\n    sentences = re.findall(r'[^.!?]+', text)\n    total_syllables = sum(sum(1 for char in word if char in 'aeiou') for sentence in sentences for word in sentence.split())\n    if not sentences:\n        return 0.0\n    return total_syllables / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical devices used in the text (e.g., metaphors, similes)\"\n    rhetorical_devices = re.findall(r'like |as |metaphor|personification|simile', text, re.IGNORECASE)\n    return float(len(rhetorical_devices))\n\n", "def feature(text: str) -> float:\n    \"Count of emotional language (e.g., happy, sad, angry) in the text\"\n    emotional_words = set(['happy', 'sad', 'angry', 'frustrated', 'excited', 'joyful', 'depressed'])\n    words = text.split()\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return float(emotional_count)\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Average number of ideas conveyed per sentence (using conjunctions as indicators)\"\n    sentences = re.findall(r'[^.!?]+', text)\n    total_ideas = sum(sentence.count(',') + sentence.count('and') + sentence.count('but') for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return total_ideas / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing specific vocabulary (e.g., scientific terms)\"\n    scientific_terms = set(['quantum', 'mechanical', 'theory', 'law', 'hypothesis'])\n    sentences = re.findall(r'[^.!?]+', text)\n    scientific_count = sum(1 for sentence in sentences if any(term in sentence for term in scientific_terms))\n    return float(scientific_count) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of 'I' indicating personal narrative style\"\n    return float(text.lower().count('i'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of direct speech (quotes) to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    quotes_count = text.count('\"')\n    return quotes_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamatory_count = text.count('!') + text.count('?')\n    total_sentences = text.count('.') + exclamatory_count\n    return float(exclamatory_count / total_sentences) if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(punctuation_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with less than 4 characters to total words.\"\n    short_word_count = sum(1 for word in text.split() if len(word) < 4)\n    total_word_count = len(text.split())\n    return float(short_word_count / total_word_count) if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words longer than 6 characters.\"\n    long_words = [word for word in text.split() if len(word) > 6]\n    return float(sum(len(word) for word in long_words) / len(long_words)) if long_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing dialogue (quoted text).\"\n    quote_count = text.count('\"') // 2\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return float(quote_count / total_sentences) if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences measured in words.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return float(sum(len(sentence.split()) for sentence in sentences) / len(sentences)) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'I' in the text.\"\n    return float(text.lower().count('i'))\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clauses = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text.\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverbs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adjectives.\"\n    words = re.findall(r'\\w+', text)\n    adjectives = len(re.findall(r'\\b\\w+ful\\b|\\b\\w+ic\\b|\\b\\w+ous\\b|\\b\\w+ive\\b', text))\n    if len(words) == 0:\n        return 0.0\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words that begin with a vowel.\"\n    words_with_vowels = [word for word in text.split() if word[0].lower() in 'aeiou']\n    if len(words_with_vowels) == 0:\n        return 0.0\n    return sum(len(word) for word in words_with_vowels) / len(words_with_vowels)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., 'however', 'moreover').\"\n    transitional_phrases = re.findall(r'\\b(however|moreover|furthermore|meanwhile)\\b', text, re.I)\n    return float(len(transitional_phrases))\n\n", "def feature(text: str) -> float:\n    \"Proportion of informal contractions in the text.\"\n    contractions = len(re.findall(r\"\\b(can't|won't|it's|don't|I'm|you're|they're)\\b\", text))\n    words = len(re.findall(r'\\w+', text))\n    if words == 0:\n        return 0.0\n    return contractions / words\n\n", "def feature(text: str) -> float:\n    \"Percentage of positive sentiment words to total words.\"\n    positive_words = re.findall(r'\\b(happy|joy|love|excellent|fortunate|great)\\b', text, re.I)\n    words = re.findall(r'\\w+', text)\n    if len(words) == 0:\n        return 0.0\n    return len(positive_words) / len(words) * 100\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiouy]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text divided by total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"The presence of exclamatory sentences in the text\"\n    exclamatory_sentences = text.count('!')\n    sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return exclamatory_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of transitional phrases (e.g., 'however', 'moreover') per sentence\"\n    transitional_phrases = re.findall(r'\\b(however|moreover|furthermore|nevertheless|conversely|on the other hand)\\b', text, re.IGNORECASE)\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(transitional_phrases) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions in the text\"\n    rhetorical_questions = text.count('?')\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return rhetorical_questions / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of conjunctions in the text (e.g., 'and', 'but', 'or')\"\n    conjunctions = re.findall(r'\\b(and|but|or|nor|for|so|yet)\\b', text, re.IGNORECASE)\n    return float(len(conjunctions))\n\n", "def feature(text: str) -> float:\n    \"Mean sentiment score of the given text (basic analysis based on counts of positive/negative words)\"\n    positive_words = ['good', 'great', 'excellent', 'happy', 'joy']\n    negative_words = ['bad', 'terrible', 'poor', 'sad', 'angry']\n    positive_count = sum(text.lower().count(word) for word in positive_words)\n    negative_count = sum(text.lower().count(word) for word in negative_words)\n    return (positive_count - negative_count) / max(1, positive_count + negative_count) if (positive_count + negative_count) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count the number of unique words in the text.\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns in the text based on simple heuristic.\"\n    words = text.split()\n    noun_count = sum(1 for word in words if word.lower().endswith('n') or word.lower().endswith('s'))\n    return noun_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain at least one exclamation mark.\"\n    sentence_count = text.count('!') \n    return float(sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 8 characters to total words.\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 8)\n    return long_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'I' (self-reference) in the text.\"\n    return float(text.lower().count('i'))\n\n", "def feature(text: str) -> float:\n    \"Measure the proportion of sentences that use semicolons.\"\n    semicolon_count = text.count(';')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return semicolon_count / sentence_count if sentence_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text (looking for 'isn't', 'aren't', etc.).\"\n    rhetorical_questions = len(re.findall(r'\\b(isn\\'t|aren\\'t|cannot|won\\'t|wouldn\\'t|shouldn\\'t|couldn\\'t)\\b', text, re.IGNORECASE))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (words ending in '-ly') in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional words (e.g., however, therefore) in the text compared to total words\"\n    transitional_words = ['however', 'therefore', 'meanwhile', 'moreover', 'consequently']\n    words = text.split()\n    count_transitional = sum(1 for word in words if word.lower() in transitional_words)\n    return count_transitional / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are common first-person pronouns (I, me, my, mine) to total words\"\n    first_person_pronouns = ['i', 'me', 'my', 'mine']\n    words = text.split()\n    count_pronouns = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return count_pronouns / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Count of phrases that express uncertainty (e.g., might, could, may) to total words\"\n    uncertain_phrases = ['might', 'could', 'may']\n    words = text.split()\n    count_uncertain = sum(1 for word in words if word.lower() in uncertain_phrases)\n    return count_uncertain / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 20 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    return long_sentences / max(sentences, 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of idiomatic expressions (e.g., kick the bucket, break a leg) to total phrases\"\n    idiomatic_expressions = ['kick the bucket', 'break a leg', 'on cloud nine', 'piece of cake']\n    phrases = re.split(r'[.!?]', text)\n    count_idioms = sum(1 for phrase in phrases if any(idiom in phrase.lower() for idiom in idiomatic_expressions))\n    return count_idioms / max(len(phrases), 1)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain direct questions compared to total sentences\"\n    total_sentences = len(re.findall(r'[.!?]', text))\n    question_sentences = text.count('?')\n    return question_sentences / max(total_sentences, 1)\n\n", "def feature(text: str) -> float:\n    \"Density of figurative language (metaphors, similes) in the text relative to total words\"\n    figurative_phrases = ['like', 'as', 'metaphor', 'simile']\n    words = text.split()\n    figurative_count = sum(1 for word in words if word.lower() in figurative_phrases)\n    return figurative_count / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of instances of negation (e.g., not, never) to total words\"\n    negation_words = ['not', 'never']\n    words = text.split()\n    count_negation = sum(1 for word in words if word.lower() in negation_words)\n    return count_negation / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in the text that are derived forms (e.g., running from run) to total words\"\n    derived_forms = ['running', 'jumps', 'swimming', 'eating', 'thinking', 'played']  # Example list of derived forms\n    words = text.split()\n    count_derived = sum(1 for word in words if word.lower() in derived_forms)\n    return count_derived / max(len(words), 1)\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    return float(len(re.findall(r'\\?\\s*$', text)))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(not s.strip() for s in sentences):\n        return 0.0\n    clauses_count = sum(len(re.findall(r'[\\w,]+', s)) for s in sentences)\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = [s for s in re.split(r'[.!?]', text) if s.strip()]\n    if not sentences:\n        return 0.0\n    return sum(len(s) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.lower().split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that start with a capital letter\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    capital_start_count = sum(1 for s in sentences if s and s[0].isupper())\n    return capital_start_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases in the text\"\n    transitional_phrases = ['however', 'moreover', 'therefore', 'furthermore', 'meanwhile']\n    return float(sum(text.lower().count(phrase) for phrase in transitional_phrases))\n", "def feature(text: str) -> float:\n    \"Ratio of character count to word count in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(text) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Average word length based on characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words with more than 6 characters in the text\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (contains quotes)\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of pronouns in the text\"\n    pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    words = text.split()\n    pronoun_count = sum(1 for word in words if word in pronouns)\n    return float(pronoun_count)\n\n", "def feature(text: str) -> float:\n    \"Density of emotional words based on predefined common emotional words\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'angry', 'excited', 'fear', 'surprised']\n    words = text.split()\n    emotional_word_count = sum(1 for word in words if word in emotional_words)\n    return emotional_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = text.split('.')\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)  # assuming each clause is separated by a comma\n    return clause_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Count of the number of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(not s.strip() for s in sentences):\n        return 0.0\n    clauses = sum(len(re.split(r',|;', s.strip())) for s in sentences if s.strip())\n    return float(clauses) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Number of consecutive words with the same ending sound (rhyme)\"\n    words = text.split()\n    rhymes = sum(1 for i in range(len(words) - 1) if words[i][-2:] == words[i + 1][-2:])\n    return float(rhymes)\n\n", "def feature(text: str) -> float:\n    \"Presence of words indicating uncertainty (e.g., 'maybe', 'perhaps')\"\n    uncertainty_words = ['maybe', 'perhaps', 'might', 'could', 'possibly']\n    count = sum(text.lower().count(word) for word in uncertainty_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(not s.strip() for s in sentences):\n        return 0.0\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 15)\n    return float(long_sentences) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Count of the number of exclamation points in the text to indicate emotional intensity.\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions marks to total sentences in the text, representing interrogative engagement.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return float(text.count('?')) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing non-standard characters, indicating complexity or stylistic features.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_standard_count = sum(1 for word in words if not word.isalnum())\n    return float(non_standard_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases indicating flow of thought (e.g., 'however', 'moreover').\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'conversely']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capital letters to total characters, indicating emphasis or stylistic intent.\"\n    if len(text) == 0:\n        return 0.0\n    capital_count = sum(1 for c in text if c.isupper())\n    return float(capital_count) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text, potentially reflecting AI-generated or human-like writing styles.\"\n    adverbs = ['quickly', 'slowly', 'carefully', 'suddenly', 'happily']\n    count = sum(text.lower().count(adverb) for adverb in adverbs)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text to assess vocabulary diversity.\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text, indicating complexity.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical or literary devices used in the text (e.g., metaphors, similes)\"\n    patterns = ['like', 'as', 'metaphor', 'symbolizes', 'represents']\n    count = sum(text.lower().count(pattern) for pattern in patterns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words in the text\"\n    negative_words = ['not', 'never', 'no', 'without', 'fail', 'wrong']\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (indicated by quotes) to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique conjunctions used in the text (e.g., and, but, or, so)\"\n    conjunctions = ['and', 'but', 'or', 'so', 'for', 'nor', 'yet']\n    words = text.lower().split()\n    unique_conjunctions = set(word for word in words if word in conjunctions)\n    return float(len(unique_conjunctions))\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs (words ending in -ly) relative to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentence fragments (sentences missing a subject or a verb) to total sentences\"\n    fragments = re.findall(r'[^.!?]*[.!?]', text)\n    if not fragments:\n        return 0.0\n    fragment_count = sum(1 for fragment in fragments if not re.search(r'\\b(he|she|they|I|we|you).\\s*\\w+', fragment))\n    return fragment_count / len(fragments)\n\n", "def feature(text: str) -> float:\n    \"Count of interjections in the text (e.g., wow, oh, hey) relative to total words\"\n    interjections = ['wow', 'oh', 'hey', 'oops', 'yay']\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    interjection_count = sum(1 for word in words if word in interjections)\n    return interjection_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences ending in exclamation points to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamation_count = sum(1 for sentence in sentences if sentence.strip().endswith('!'))\n    return exclamation_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average length of quoted phrases in the text.\"\n    quotes = re.findall(r\"'(.*?)'\", text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks that signal emotional expressions to total punctuation.\"\n    emotional_punctuations = ['!', '?', '...']\n    total_punctuations = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    emotional_count = sum(text.count(punct) for punct in emotional_punctuations)\n    return emotional_count / total_punctuations if total_punctuations > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of similes or metaphors present in the text.\"\n    simile_metaphor_patterns = [r'as \\w+', r'like \\w+']\n    count = sum(len(re.findall(pattern, text)) for pattern in simile_metaphor_patterns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Measure of narrative flow based on the ratio of conjunctions to total words.\"\n    conjunctions = ['and', 'but', 'or', 'so', 'for', 'nor', 'yet']\n    words = len(text.split())\n    conjunction_count = sum(text.lower().count(conj) for conj in conjunctions)\n    return conjunction_count / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs compared to total words.\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    words = len(text.split())\n    return len(adverbs) / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating complexity.\"\n    sentences = re.split(r'[.!?]', text)\n    clauses_count = sum(len(re.findall(r'[,\\s]', sentence)) + 1 for sentence in sentences)\n    return clauses_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    complex_words = len(re.findall(r'\\b\\w{4,}\\b', text))  # placeholder; replace with proper syllable check.\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of specific syntax structures like questions that indicate engagement.\"\n    question_count = text.count('?')\n    return float(question_count)\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases used in the text.\"\n    transitional_phrases = ['however', 'moreover', 'meanwhile', 'thus', 'therefore', 'consequently']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text.\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiou')\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(sum(count_syllables(word) for word in words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters in the text.\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Average ratio of noun phrases to total sentences in the text.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    noun_phrase_count = len(re.findall(r'\\b(?:the|a|an)?\\s*\\w+\\s+\\w+\\b', text))  # basic noun phrase finder\n    if not sentences:\n        return 0.0\n    return float(noun_phrase_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_question_count = len(re.findall(r'\\b\\w+\\s+\\w+\\s+\\?$', text))\n    return float(rhetorical_question_count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    unique_punctuations = set(char for char in text if not char.isalnum() and not char.isspace())\n    return float(len(unique_punctuations))\n\n", "def feature(text: str) -> float:\n    \"Count of instances of modal verbs in the text.\"\n    modal_verbs = ['can', 'could', 'will', 'would', 'shall', 'should', 'may', 'might', 'must']\n    count = sum(text.lower().count(verb) for verb in modal_verbs)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of quoted phrases in the text.\"\n    quoted_phrases = re.findall(r'\"(.*?)\"', text)\n    if not quoted_phrases:\n        return 0.0\n    return float(sum(len(phrase) for phrase in quoted_phrases)) / len(quoted_phrases)\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions (ends with '?')\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Presence of emotional words (positive or negative)\"\n    emotional_words = ['happy', 'sad', 'love', 'hate', 'excited', 'bored', 'joy', 'anger']\n    words = text.lower().split()\n    matches = sum(1 for word in words if word in emotional_words)\n    return float(matches)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total word count\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return float(capitalized_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (ending with -ly)\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text.lower())\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Percentage of the text that is made up of conjunctions (e.g., and, but, or)\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    if not words:\n        return 0.0\n    return float(conjunction_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique phrases (n-grams with length 2)\"\n    n_grams = set()\n    words = text.split()\n    for i in range(len(words) - 1):\n        n_grams.add((words[i], words[i + 1]))\n    return float(len(n_grams))\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of specific narrative verbs (e.g., said, asked, told) in the text\"\n    narrative_verbs = ['said', 'asked', 'told', 'replied', 'inquired']\n    count = sum(text.lower().count(verb) for verb in narrative_verbs)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs that start with a capital letter\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    capital_start_count = sum(1 for p in paragraphs if p.strip() and p.strip()[0].isupper())\n    return capital_start_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clause_count = sum(len(re.findall(r'\\w+', sentence)) for sentence in sentences)\n    avg_clauses = clause_count / len(sentences) if sentences else 0.0\n    return avg_clauses\n\n", "def feature(text: str) -> float:\n    \"Count of emotion-related words in the text\"\n    emotion_words = ['happy', 'sad', 'angry', 'excited', 'nervous', 'joyful', 'depressed', 'fearful']\n    count = sum(text.lower().count(word) for word in emotion_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(text.count('.') + text.count('!') + text.count('?') for text in paragraphs)\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of compound sentences (containing at least one conjunction) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    compound_count = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return compound_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = sum(len(sentence.split()) for sentence in sentences)\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    return float(len(set(words)))\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text indicating strong emotion\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Proportion of non-standard contractions to total words\"\n    contractions = re.findall(r\"\\b(?:can't|won't|don't|didn't|I'll|he'll|she'll|you'll)\\b\", text)\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(len(contractions)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with special characters (like $, %, &, etc.) to total words\"\n    special_char_count = len(re.findall(r'[^\\w\\s]', text))\n    words = text.split()\n    if not words:\n        return 0.0\n    return special_char_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Presence of rhetorical questions indicated by '?' in the text\"\n    return float(text.count('?') > 0)\n\n", "def feature(text: str) -> float:\n    \"Presence of ellipses indicating hesitation in the text\"\n    return float(text.count('...') > 0)\n", "def feature(text: str) -> float:\n    \"Average sentence length (number of words per sentence)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = len(text.split())\n    return float(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of specific keywords indicating emotional intensity (e.g., love, hate)\"\n    keywords = ['love', 'hate', 'happy', 'sad', 'excited', 'bored']\n    return float(sum(text.lower().count(word) for word in keywords))\n\n", "def feature(text: str) -> float:\n    \"Proportion of longer words (greater than 8 characters) to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 8)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b(?:quick|lazy|beautiful|round|tall|small|old|new|bright|dark)\\b', text.lower())\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Ratio of first-person pronouns to total words\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    words = text.split()\n    first_person_count = sum(1 for word in words if word.lower() in first_person_pronouns)\n    if not words:\n        return 0.0\n    return first_person_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of exclamation marks per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    exclamations = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return float(exclamations) / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of transitions or contrasting words (e.g., however, although)\"\n    transition_words = ['however', 'although', 'but', 'yet', 'on the other hand']\n    return float(sum(text.lower().count(word) for word in transition_words))\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that begin with a conjunction\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = len([s for s in re.split(r'[.!?]', text.strip()) if s.strip().lower().startswith(('and', 'but', 'or', 'so'))])\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences\"\n    sentences = re.split(r'[.!?]', text.strip())\n    if not sentences:\n        return 0.0\n    compound_sentences = len([s for s in sentences if ',' in s and 'and' in s])\n    return compound_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Number of unique words in the text\"\n    words = text.split()\n    return float(len(set(words)))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.split(r'[.!?]', text.strip())\n    if len(sentences) == 0:\n        return 0.0\n    return sum(len(s.split()) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Total number of words that are capitalized\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return float(capitalized_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that consists of non-standard characters\"\n    if len(text) == 0:\n        return 0.0\n    non_standard_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_standard_count / len(text)\n", "def feature(text: str) -> float:\n    \"Count of filler words (e.g., um, like, you know) to total words\"\n    filler_words = len(re.findall(r'\\b(um|like|you know|actually|basically|seriously|totally)\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return filler_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence\"\n    words = text.split()\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return long_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a coordinating conjunction\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    coordinating_conj_sentences = sum(1 for sentence in sentences if re.match(r'\\s*(and|but|or|nor)', sentence.strip(), re.IGNORECASE))\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return coordinating_conj_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of questions to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Presence of self-referential phrases (e.g., I feel, I think) as a ratio\"\n    self_referential_count = len(re.findall(r'\\b(I (feel|think|believe|know|hope|wish|want))\\b', text, re.IGNORECASE))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return self_referential_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total word count\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences to paragraphs in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    paragraph_count = text.count('\\n') + 1\n    if paragraph_count == 0:\n        return 0.0\n    return sentence_count / paragraph_count\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a proportion of total words\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_pattern, text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    lengths = [len(word) for word in words]\n    if not lengths:\n        return 0.0\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / len(lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    question_count = text.count('?')\n    return float(question_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of conjunctions in the text relative to total words\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    conjunction_count = sum(text.lower().count(conj) for conj in conjunctions)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return conjunction_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text\"\n    passive_pattern = r'\\bis\\b \\w+ed|\\bare\\b \\w+ed|\\bwas\\b \\w+ed|\\bwere\\b \\w+ed'\n    passive_count = len(re.findall(passive_pattern, text))\n    return float(passive_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of emojis to total characters in the text\"\n    emoji_pattern = r'[\\U0001F600-\\U0001F64F]'  # Emoji range\n    emoji_count = len(re.findall(emoji_pattern, text))\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return emoji_count / total_chars\n", "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(re.findall(r'\\w+', text))\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b\\w+\\?\\s', text)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per word\"\n    adjectives = re.findall(r'\\b(?:good|bad|happy|sad|beautiful|ugly|big|small)\\b', text.lower())  # Simple adjective list\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(adjectives) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are at least 12 characters long\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) >= 12)\n    if not words:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unusual punctuation marks (e.g., @, #, $, &, *)\"\n    unusual_punctuation = sum(1 for c in text if c in '@#$&*')\n    return float(unusual_punctuation)\n\n", "def feature(text: str) -> float:\n    \"Density of figurative language (e.g., metaphors, similes)\"\n    figurative_language = re.findall(r'\\b(as \\w+ as|like|metaphor)\\b', text.lower())\n    return float(len(figurative_language))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing quotes in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    quote_sentences = len(re.findall(r'\"', text)) // 2  # Each quote pair is a sentence.\n    if sentences == 0:\n        return 0.0\n    return quote_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_voice_patterns = r'\\b(is|was|were|be|been|being)\\s+\\w+ed\\b'\n    matches = len(re.findall(passive_voice_patterns, text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return matches / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard punctuation marks in the text\"\n    non_standard_punctuation = re.findall(r'[;:\u2026]', text)\n    return float(len(non_standard_punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of characters\"\n    sentences = text.split('.')\n    total_length = sum(len(sentence) for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Total number of personal pronouns used in the text\"\n    personal_pronouns = re.findall(r'\\b(I|you|he|she|it|we|they|my|your|his|her|its|our|their)\\b', text, re.IGNORECASE)\n    return float(len(personal_pronouns))\n\n", "def feature(text: str) -> float:\n    \"Proportion of content words (nouns, verbs, adjectives, adverbs) to total words\"\n    content_words_pattern = r'\\b(?:\\w*(?:ed|ing|ly|es|s|ful|ive|tion|ment|ness|ity|ing|ance|ence|al|y|er|or|ist|ism))\\b'\n    total_word_count = len(text.split())\n    content_word_count = len(re.findall(content_words_pattern, text))\n    return content_word_count / total_word_count if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word length in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5  # Standard deviation\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, furthermore) in the text\"\n    transition_words = ['however', 'furthermore', 'therefore', 'meanwhile', 'consequently', 'likewise', 'in addition']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    return questions / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of words\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'I' in the text\"\n    return float(text.lower().count('i'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    complex_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with the word 'you' to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    you_sentences = sum(1 for s in sentences if 'you' in s.lower())\n    return you_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    commas = text.count(',')\n    return commas / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors or similes in the text (simplistically defined)\"\n    metaphors = re.findall(r'\\b(?:as|like)\\s+\\w+', text)\n    return float(len(metaphors))\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    sentence_count = len(sentences)\n    average_length = len(text) / sentence_count if sentence_count > 0 else 0.0\n    return average_length\n\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words to total words\"\n    capitalized_words = sum(1 for word in text.split() if word.istitle())\n    total_words = len(text.split())\n    return float(capitalized_words) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of complex words (words with 3 or more syllables)\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # More simplistic measure for demonstration\n    total_words = len(text.split())\n    return float(complex_word_count) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    total_words = len(text.split())\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return float(total_words) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Use of first-person narration (count of first-person pronouns)\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    pronoun_count = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    total_words = len(text.split())\n    return float(pronoun_count) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = len(re.findall(r'\\b\\w+ly\\b|\\b\\w+ed\\b|\\b\\w+ing\\b', text))  # Rough identifier for adjectives\n    total_words = len(text.split())\n    return float(adjectives) / total_words if total_words > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return punctuation_count / total_length\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text as a float\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Count of phrases containing emotional words\"\n    emotional_words = ['love', 'hate', 'joy', 'sad', 'happy', 'fear']\n    count = sum(text.lower().count(word) for word in emotional_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of first-person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours']\n    total_pronouns = sum(text.lower().count(pronoun) for pronoun in first_person_pronouns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_pronouns / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverb_keywords = ['ly']\n    adverbs = sum(1 for word in text.split() if word.endswith(tuple(adverb_keywords)))\n    return float(adverbs)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in the text\"\n    sentences = re.findall(r'[.!?]', text)  # Count sentences\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return len(unique_words) / len(words)\n\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    adjectives = re.findall(r'\\b\\w+(?:ly|able|ful|less|ic|ous|ive|al)\\b', text)\n    return float(len(adjectives))\n\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b\\w+\\?\\b', text)\n    return float(len(questions))\n\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    total_syllables = sum(sum(1 for c in word if c in 'aeiou') for word in words)\n    if not words:\n        return 0.0\n    return total_syllables / len(words)\n\n\n", "def feature(text: str) -> float:\n    \"Ratio of negation words to total words in the text\"\n    negation_words = re.findall(r'\\b(not|no|never|nobody|nothing|neither|nowhere)\\b', text, re.IGNORECASE)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(negation_words) / len(words)\n\n\n", "def feature(text: str) -> float:\n    \"Count of verbs in past tense in the text\"\n    past_tense_verbs = re.findall(r'\\b\\w+ed\\b', text)\n    return float(len(past_tense_verbs))\n\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives used in the text\"\n    import re\n    adjectives = re.findall(r'\\b\\w+ly\\b', text)  # simple check for adverbs (could also consider adjectives)\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of direct speech to total words\"\n    speech_count = text.count('\"') + text.count(\"'\")\n    words = text.split()\n    if not words:\n        return 0.0\n    return speech_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases used in the text\"\n    transitional_phrases = ['however', 'furthermore', 'therefore', 'meanwhile']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of compound sentences to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    compound_count = sum(1 for sentence in sentences if len(re.findall(r'and|but|or', sentence)) > 0)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return compound_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Average position of first person pronouns in the text\"\n    first_person_pronouns = ['I', 'me', 'my', 'we', 'us', 'our']\n    positions = [text.find(pronoun) for pronoun in first_person_pronouns if text.find(pronoun) != -1]\n    if not positions:\n        return -1.0  # Returning -1.0 to indicate no pronouns found\n    return float(sum(positions)) / len(positions)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = set(words)\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Count of transition words in the text\"\n    transition_words = ['however', 'furthermore', 'moreover', 'thus', 'consequently', 'therefore']\n    count = sum(text.lower().count(word) for word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation marks to total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return float(punctuation_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of long words (more than 7 characters) in the text\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Count of personal pronouns in the text\"\n    personal_pronouns = ['I', 'me', 'my', 'we', 'us', 'our', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'they', 'them', 'their']\n    count = sum(text.lower().count(pronoun) for pronoun in personal_pronouns)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = [s for s in re.split(r'[.!?]', text) if s]\n    if not sentences:\n        return 0.0\n    short_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return float(short_sentence_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average word length in the text, normalized by number of words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Average sentence length before a transition clause\"\n    sentences = re.split(r'[.!?]', text)\n    transition_sentences = [s for s in sentences if 'however' in s or 'furthermore' in s]\n    avg_length = sum(len(s.split()) for s in transition_sentences) / len(transition_sentences) if transition_sentences else 0.0\n    return avg_length\n\n", "def feature(text: str) -> float:\n    \"Count of sensory words (words related to sight, sound, touch, taste, smell)\"\n    sensory_words = re.findall(r'\\b(see|hear|feel|taste|smell)\\b', text, flags=re.IGNORECASE)  # Add more sensory-focused words as needed\n    return float(len(sensory_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    adjectives = len(re.findall(r'\\b\\w+ly\\b', text))  # Simple heuristic for adjectives ending in 'ly'\n    total_words = len(text.split())\n    return float(adjectives) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique rhetorical devices used (e.g., metaphors, similes)\"\n    rhetorical_devices = len(re.findall(r'\\b(like|as if|as though|metaphor|compare|contrast)\\b', text, flags=re.IGNORECASE))\n    return float(rhetorical_devices)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = re.findall(r'[;,\\s]([a-zA-Z0-9].*?)(?=,|;|\\.)', text)  # Counting clauses\n    total_sentences = len(re.split(r'[.!?]', text))\n    return float(len(clauses)) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = len(re.findall(r'\\b\\w+\\?\\s*$', text, flags=re.MULTILINE))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialog lines to total lines of text\"\n    dialog_lines = text.count('\"') + text.count(\"'\")  # Basic counting of dialog indicators\n    total_lines = text.count('\\n') + 1  # Counting lines\n    return float(dialog_lines) / total_lines if total_lines > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Using words of at least 3 letters\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of specific emotion-inducing words (e.g., joy, sadness) in the text\"\n    emotion_words = ['joy', 'happiness', 'sad', 'sadness', 'love', 'afraid', 'fear']\n    count = sum(text.lower().count(word) for word in emotion_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of pronouns in the text\"\n    pronouns = ['i', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'we', 'us', 'our', 'they', 'them', 'their']\n    count = sum(text.lower().count(pronoun) for pronoun in pronouns)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    rhetorical_questions = len(re.findall(r'\\b\\w+\\?\\s', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return rhetorical_questions / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Measure of sentence variety by counting different sentence lengths\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence]\n    if not sentence_lengths:\n        return 0.0\n    return len(set(sentence_lengths)) / len(sentence_lengths)\n\n", "def feature(text: str) -> float:\n    \"Count of unusual punctuation characters in the text\"\n    unusual_punctuation = sum(1 for c in text if c in ['@', '#', '$', '%', '^', '&', '*', '(', ')'])\n    total_characters = len(text)\n    if total_characters == 0:\n        return 0.0\n    return unusual_punctuation / total_characters\n\n", "def feature(text: str) -> float:\n    \"Ratio of the longest word length to average word length\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    average_word_length = sum(len(word) for word in words) / len(words)\n    return longest_word_length / average_word_length\n\n", "def feature(text: str) -> float:\n    \"Count of clauses per sentence, approximated by counts of commas\"\n    clauses = text.count(',') + text.count(';') + text.count(':')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return clauses / total_sentences\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adjectives\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = len([word for word in words if word.lower() in {'beautiful', 'fantastic', 'clear', 'long', 'broken', 'scattered', 'tired', 'endless', 'recurring'}])\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.split('.')\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence]\n    if not sentence_lengths:\n        return 0.0\n    return sum(sentence_lengths) / len(sentence_lengths)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negation words to total words\"\n    negation_words = {'not', 'no', 'never', 'nobody', 'nothing'}\n    words = text.split()\n    negation_count = sum(1 for word in words if word.lower() in negation_words)\n    return negation_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of phrases that suggest a mood (positive or negative)\"\n    positive_moods = ['enjoyed', 'fantastic', 'beautiful', 'great', 'happy']\n    negative_moods = ['tired', 'broken', 'not', 'difficult', 'sad']\n    words = text.split()\n    mood_count = sum(1 for word in words if word.lower() in positive_moods or word.lower() in negative_moods)\n    return mood_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Mean length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Density of connectives (and, but, or, because, however)\"\n    connectives = {'and', 'but', 'or', 'because', 'however'}\n    words = text.split()\n    connective_count = sum(1 for word in words if word.lower() in connectives)\n    return connective_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_words = sum(1 for word in words if word.istitle())\n    return capitalized_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with over 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    number_count = sum(1 for word in words if word.isdigit())\n    return number_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of times the word 'I' appears in the text\"\n    return text.lower().count('i')\n\n", "def feature(text: str) -> float:\n    \"Ratio of pronouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronoun_count = sum(1 for word in words if word.lower() in ['i', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'they', 'them', 'their', 'we', 'us', 'our'])\n    return pronoun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex vocabulary (words with more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) >= 3)\n    return complex_words / len(words)\n", "def feature(text: str) -> float:\n    \"Average sentence length in words.\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_characters = len(text)\n    if total_characters == 0:\n        return 0.0\n    return punctuation_count / total_characters\n\n", "def feature(text: str) -> float:\n    \"Proportion of action verbs in the text.\"\n    action_verbs = ['run', 'walk', 'jump', 'see', 'hit', 'play', 'say', 'eat', 'give', 'take']\n    words = text.lower().split()\n    action_verb_count = sum(1 for word in words if word in action_verbs)\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return action_verb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of negation words (e.g., 'not', 'never') to total words.\"\n    negations = ['not', 'never', 'no', 'none', 'nobody', 'nothing']\n    words = text.lower().split()\n    negation_count = sum(1 for word in words if word in negations)\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return negation_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    comma_count = text.count(',')\n    if not sentences:\n        return 0.0\n    return comma_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total punctuation marks.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_mark_count = text.count('?')\n    if punctuation_count == 0:\n        return 0.0\n    return question_mark_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables in words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in words)\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quotation marks).\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    dialogue_count = text.count('\"')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of non-standard characters (like emojis) per sentence.\"\n    non_standard_count = len(re.findall(r'[^\\x00-\\x7F]+', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return non_standard_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that include digits to total words.\"\n    total_words = len(text.split())\n    digit_word_count = sum(1 for word in text.split() if any(char.isdigit() for char in word))\n    if total_words == 0:\n        return 0.0\n    return digit_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.findall(r'[^.!?]+(?:[.!?]|$)', text)\n    total_clauses = sum(text.count(',') for text in clauses) + len(clauses)\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return total_clauses / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of transition words (e.g., however, therefore).\"\n    transition_words = {'however', 'therefore', 'furthermore', 'moreover', 'consequently', 'meanwhile', 'likewise'}\n    count = sum(1 for word in text.lower().split() if word in transition_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences using gerunds (verbs ending in -ing).\"\n    sentences = re.findall(r'[^.!?]+(?:[.!?]|$)', text)\n    gerund_count = sum(1 for sentence in sentences if re.search(r'\\b\\w+ing\\b', sentence))\n    if len(sentences) == 0:\n        return 0.0\n    return gerund_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 10)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Presence of quotation marks in the text\"\n    return float(text.count('\"')) + float(text.count(\"'\"))\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.lower().split()\n    distinct_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return float(distinct_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation marks in the text\"\n    punctuation = [c for c in text if not c.isalnum() and not c.isspace()]\n    if not punctuation:\n        return 0.0\n    return sum(len(c) for c in punctuation) / len(punctuation)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-repeating words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured by number of words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific conjunctions (and, but, or) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or'})\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of ellipses (...) to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    ellipsis_count = text.count('...')\n    if sentence_count == 0:\n        return 0.0\n    return ellipsis_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a conjunction\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunction_start_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or')))\n    return conjunction_start_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Sentence length variance\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    lengths = [len(sentence.split()) for sentence in sentences]\n    if len(lengths) < 2:\n        return 0.0\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((x - mean_length) ** 2 for x in lengths) / len(lengths)\n    return variance\n\n", "def feature(text: str) -> float:\n    \"Count of different punctuation marks to total punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    different_punctuations = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    if total_punctuation == 0:\n        return 0.0\n    return different_punctuations / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with special characters (like hyphens) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    special_count = sum(1 for word in words if '-' in word or any(char in word for char in ['@', '#', '$', '%', '^', '&', '*']))\n    return special_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU') or 1\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of conjunctions (and, or, but) to total words\"\n    conjunctions = sum(text.lower().count(conj) for conj in ['and', 'or', 'but'])\n    words = len(text.split())\n    return conjunctions / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are compound (containing multiple clauses)\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    compound_sentences = sum(1 for sentence in sentences if len(re.findall(r',', sentence)) > 0)\n    return compound_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the paragraphs in the text\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph.split()) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of quoted speech to total words\"\n    quotes = text.count('\"')\n    words = len(text.split())\n    return quotes / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of uncommon words (below a specific frequency threshold) to total words\"\n    uncommon_words = sum(1 for word in text.split() if len(word) < 4)  # Assuming short words are uncommon\n    words = len(text.split())\n    return uncommon_words / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of parenthetical phrases (like (this)) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    parentheticals = len(re.findall(r'\\(.*?\\)', text))\n    return parentheticals / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'am', 'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'go', 'goes', 'said', 'say', 'get', 'gets', 'make', 'makes'})\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rare words (less common) to total words.\"\n    common_words = set(['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'you', 'he', 'she', 'we', 'they', 'not', 'this', 'but', 'or', 'are'])\n    words = text.split()\n    if not words:\n        return 0.0\n    rare_count = sum(1 for word in words if word.lower() not in common_words)\n    return rare_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use complex phrases (more than 12 words).\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_count = sum(1 for sentence in sentences if len(sentence.split()) > 12)\n    return complex_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = sum(sentence.count(',') for sentence in sentences)\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions.\"\n    passive_voice_patterns = [r'\\b(is|are|was|were|be|been|being) \\w+', r'\\b(get|got) \\w+']\n    matches = sum(len(re.findall(pattern, text)) for pattern in passive_voice_patterns)\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    return matches / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words ending in 'ly' to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ly_words = sum(1 for word in words if word.endswith('ly'))\n    return ly_words / len(words)\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if re.search(r'ly$', word))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuation marks to total punctuation marks.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    non_standard_punctuation_count = sum(1 for c in text if c not in '.,!?;:()[]{}\\\"\\'')\n    if punctuation_count == 0:\n        return 0.0\n    return non_standard_punctuation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.findall(r'[;,]', text)\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(clauses) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    numeric_word_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    return numeric_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are exclamatory.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    exclamatory_count = sum(1 for word in words if word.endswith('!'))\n    return exclamatory_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences.\"\n    question_mark_count = text.count('?')\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return question_mark_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain conjunctions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    conjunctions = len(re.findall(r'\\b(and|but|or|so|for|nor|yet|although|while|because)\\b', text.lower()))\n    return conjunctions / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    return len(words) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of non-alphanumeric characters per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    non_alphanumeric_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alphanumeric_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = text.split()\n    return punctuation_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words in sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    return sum(len(word) for word in words) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of interrogative sentences to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    question_count = text.count('?')\n    return question_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that have more than one clause\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = len(re.findall(r'\\w+(?:,|\\s+)(?:\\w+|(?=and|but|or))', text))\n    return clause_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    comma_count = text.count(',')\n    if len(sentences) == 0:\n        return 0.0\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n", "def feature(text: str) -> float:\n    \"Count of words with a frequency of occurrence higher than the average.\"\n    words = text.split()\n    word_count = len(words)\n    if word_count == 0:\n        return 0.0\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    average_freq = word_count / len(frequency)\n    high_freq_count = sum(1 for count in frequency.values() if count > average_freq)\n    return high_freq_count / len(frequency)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that start with a capital letter to total words.\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of distinct characters divided by total characters (excluding spaces).\"\n    total_chars = len(text.replace(' ', ''))\n    distinct_chars = len(set(text.replace(' ', '')))\n    if total_chars == 0:\n        return 0.0\n    return distinct_chars / total_chars\n\n", "def feature(text: str) -> float:\n    \"Ratio of short words (3 characters or less) to total words.\"\n    words = text.split()\n    short_words_count = sum(1 for word in words if len(word) <= 3)\n    if not words:\n        return 0.0\n    return short_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are exclamatory or interrogative.\"\n    exclamatory = text.count('!') + text.count('?')\n    words = len(re.findall(r'\\w+', text))\n    if words == 0:\n        return 0.0\n    return exclamatory / words\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = len(re.findall(r'[.!?]', text))\n    total_characters = len(text)\n    return total_characters / sentences if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adverbs in the text\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    complex_count = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return complex_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Sum of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    conjunction_count = sum(1 for sentence in sentences if sentence.strip().startswith(('and', 'but', 'or', 'so')))\n    return conjunction_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters.\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Number of unique words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of the longest word length to average word length.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    average_word_length = sum(len(word) for word in words) / len(words)\n    return longest_word_length / average_word_length\n\n", "def feature(text: str) -> float:\n    \"Average syllables per sentence in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    syllables = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in text.split())\n    return syllables / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    adjectives = sum(len(re.findall(r'\\b\\w+ly\\b|\\b\\w+er\\b|\\b\\w+est\\b', sentence)) for sentence in sentences)\n    return adjectives / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words with fewer than four letters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    short_words_count = sum(1 for word in words if len(word) < 4)\n    return short_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of total occurrences of the word 'I' to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard words (jargon/slang) to total words.\"\n    jargon_words = set(['gamer', 'vibe', 'lit', 'sick', 'lowkey'])  # example jargon words\n    words = text.split()\n    if not words:\n        return 0.0\n    jargon_count = sum(1 for word in words if word.lower() in jargon_words)\n    return jargon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average characters per word in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs to total sentences in the text.\"\n    paragraphs = text.split('\\n\\n')\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(paragraphs) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of long words (more than 10 characters) to total words.\"\n    long_words_count = sum(1 for word in text.split() if len(word) > 10)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return long_words_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing adverbs (ending with -ly) to total sentences.\"\n    adverb_sentences = len(re.findall(r'\\b\\w+ly\\b.*?[.!?]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return adverb_sentences / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence in the text.\"\n    comma_count = text.count(',')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain more than 20 words to total sentences\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    long_sentences_count = sum(1 for s in sentences if len(s.split()) > 20)\n    return long_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words_count = len(set(words))\n    return unique_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average word count per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    total_words = sum(len(p.split()) for p in paragraphs)\n    return total_words / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average number of verbs per sentence\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    verbs = ['be', 'have', 'do', 'say', 'get', 'make', 'go', 'know', 'take', 'see']  # Example verbs\n    total_verbs = sum(sum(1 for word in s.split() if word in verbs) for s in sentences)\n    return total_verbs / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = ['quickly', 'silently', 'happily', 'sadly', 'loudly']  # Example adverbs\n    adverb_count = sum(1 for word in words if word in adverbs)\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiou')  # Simple vowel count for approximation\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(count_syllables(word) for word in words)\n    return total_syllables / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if word.endswith('ly')])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if sentence_count == 0:\n        return 0.0\n    return punctuation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are prepositions.\"\n    words = text.split()\n    prepositions = {'in', 'on', 'at', 'to', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during'}\n    count_prepositions = len([word for word in words if word.lower() in prepositions])\n    if not words:\n        return 0.0\n    return count_prepositions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence complexity measured by the average number of clauses per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    clauses = len(re.findall(r',|;', text)) + len(sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_pattern = r'(?i)\\b(isn\\'t it|don\\'t you think|wouldn\\'t it be|is it|aren\\'t they|couldn\\'t we)\\b'\n    rhetorical_questions = len(re.findall(rhetorical_pattern, text))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Difference in length between the longest and shortest sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    lengths = [len(sentence.split()) for sentence in sentences if sentence]\n    if len(lengths) == 0:\n        return 0.0\n    return max(lengths) - min(lengths)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with an interrogative word.\"\n    sentences = re.split(r'[.!?]', text)\n    interrogatives = {'who', 'what', 'when', 'where', 'why', 'how'}\n    count_interrogatives = sum(1 for sentence in sentences if any(sentence.strip().lower().startswith(word) for word in interrogatives))\n    if len(sentences) == 0:\n        return 0.0\n    return count_interrogatives / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_count = len(re.findall(r'\\\".*?\\\"', text)) + len(re.findall(r'\\'.*?\\'', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of rare words to total words based on a predefined set.\"\n    rare_words = {'faraway', 'untruths', 'world', 'commotion', 'pills', 'intently'}\n    words = text.split()\n    if not words:\n        return 0.0\n    rare_word_count = sum(1 for word in words if word.lower() in rare_words)\n    return rare_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of emotive words to total words based on a predefined set.\"\n    emotive_words = {'love', 'hate', 'wonder', 'dream', 'thought', 'realized'}\n    words = text.split()\n    if not words:\n        return 0.0\n    emotive_word_count = sum(1 for word in words if word.lower() in emotive_words)\n    return emotive_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of quotes in characters.\"\n    quotes = re.findall(r'\\\".*?\\\"', text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Frequency of transitional phrases (e.g., however, therefore) per sentence.\"\n    transitional_phrases = {'however', 'therefore', 'meanwhile', 'furthermore'}\n    sentences = re.split(r'[.!?]', text)\n    transitional_count = sum(1 for sentence in sentences if any(phrase in sentence for phrase in transitional_phrases))\n    if len(sentences) == 0:\n        return 0.0\n    return transitional_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain complex punctuation (e.g., colons, semicolons).\"\n    complex_punctuation_count = text.count(';') + text.count(':')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return complex_punctuation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences.\"\n    sentences = text.split('.')\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs containing more than 5 sentences.\"\n    paragraphs = text.split('\\n')\n    long_paragraph_count = sum(1 for paragraph in paragraphs if len(re.findall(r'[.!?]', paragraph)) > 5)\n    if not paragraphs:\n        return 0.0\n    return long_paragraph_count / len(paragraphs)\n", "def feature(text: str) -> float:\n    \"Proportion of text that is comprised of dialogue.\"\n    dialogues = len(re.findall(r'\"[^\"]*\"', text)) + len(re.findall(r\"'[^']*'\", text))\n    words = len(re.findall(r'\\w+', text))\n    return dialogues / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    unique_punctuation = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    return float(unique_punctuation)\n\n", "def feature(text: str) -> float:\n    \"Ratio of characters to words in the text.\"\n    characters = len(text)\n    words = len(text.split())\n    return characters / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing a specific conjunction (e.g., 'and').\"\n    conjunctions = len(re.findall(r'\\b(and|but|or)\\b', text, flags=re.IGNORECASE))\n    sentences = len(re.findall(r'[.!?]', text))\n    return conjunctions / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are in the first person.\"\n    first_person_words = len(re.findall(r'\\b(I|my|me|we|our|us)\\b', text, flags=re.IGNORECASE))\n    total_words = len(text.split())\n    return first_person_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard contractions (e.g., 'I\u2019d', 'you\u2019re').\"\n    contractions = len(re.findall(r\"\\b\\w+'[a-z]{2,3}\\b\", text))\n    total_words = len(text.split())\n    return contractions / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    comma_count = text.count(',')\n    sentences = len(re.findall(r'[.!?]', text))\n    return comma_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Number of adjectives used in the text.\"\n    adjectives = len(re.findall(r'\\b\\w+(?=\\s+(?:is|was|are|were|be|been|am|seem|seemed|taste|savour|feel|smell|look|sound|appear|get|become|remain|continue))\\b', text, flags=re.IGNORECASE))\n    return float(adjectives)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[.!?]+', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of commas to total punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    comma_count = text.count(',')\n    if total_punctuation == 0:\n        return 0.0\n    return comma_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    words = text.split()\n    adjective_count = sum(1 for word in words if word.lower().endswith('y') or word.lower() in ['beautiful', 'happy'])\n    if not words:\n        return 0.0\n    return adjective_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions\"\n    words = text.split()\n    contraction_count = sum(1 for word in words if \"'\" in word)\n    if not words:\n        return 0.0\n    return contraction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Ratio of functional words (prepositions, conjunctions) to total words\"\n    functional_words = set(['in', 'on', 'at', 'for', 'and', 'but', 'or'])\n    words = text.split()\n    functional_count = sum(1 for word in words if word in functional_words)\n    if not words:\n        return 0.0\n    return functional_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain filler words (like 'um', 'uh') to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    filler_sentences_count = sum(1 for sentence in sentences if 'um' in sentence.lower() or 'uh' in sentence.lower())\n    return filler_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique verbs to total unique words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    verbs = {'be', 'have', 'do', 'say', 'get', 'make', 'go', 'know', 'will', 'think', 'take', 'see', 'come', 'want', 'look', 'use', 'find', 'give', 'tell', 'work'}\n    unique_verbs_count = sum(1 for word in unique_words if word.lower() in verbs)\n    return unique_verbs_count / len(unique_words) if unique_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamatory_count = sum(1 for sentence in sentences if sentence.endswith('!'))\n    return exclamatory_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clauses_count = sum(sentence.count(',') + sentence.count(';') + 1 for sentence in sentences)\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of hedging phrases (like 'I think', 'maybe', 'perhaps') to total sentences.\"\n    hedging_phrases = ['I think', 'maybe', 'perhaps', 'it seems', 'implies', 'suggests']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    hedging_count = sum(1 for sentence in sentences for phrase in hedging_phrases if phrase in sentence)\n    return hedging_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average word length of words with more than 10 characters.\"\n    long_words = [word for word in text.split() if len(word) > 10]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives to total words in the text.\"\n    adjectives = {'big', 'small', 'great', 'bad', 'happy', 'sad', 'fast', 'slow', 'new', 'old', 'young', 'old', 'beautiful'}  # Sample adjectives\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives_count = sum(1 for word in words if word.lower() in adjectives)\n    return adjectives_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_syllables = sum(sum(1 for char in word if char in 'aeiou') for sentence in sentences for word in sentence.split())\n    return total_syllables / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for a minimum word count.\"\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 20 words) to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing digits in the text.\"\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of metaphors (words commonly used metaphorically) in the text.\"\n    metaphors = ['light', 'dark', 'storm', 'wave', 'cut', 'break']\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    metaphor_count = sum(1 for word in words if word in metaphors)\n    return metaphor_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of conjunctions in the text.\"\n    conjunctions = ['and', 'but', 'or', 'so']\n    words = text.split()\n    if len(words) < 1:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    total_clauses = sum(text.count(',') + text.count(';') + text.count(' and ') + text.count(' but ') for text in sentences)\n    if len(sentences) < 1:\n        return 0.0\n    return total_clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.split(r'[.!?]', text)\n    if len(sentences) < 1:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain dialogue to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    if len(sentences) < 1:\n        return 0.0\n    dialogue_count = sum(1 for s in sentences if '\"' in s or \"'\" in s)\n    return dialogue_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average length of sentences containing dialogue.\"\n    dialogue_sentences = [sentence for sentence in re.findall(r'[^.!?]+[.!?]', text) if '\"' in sentence]\n    if not dialogue_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in dialogue_sentences) / len(dialogue_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of words that are not in the top 1000 frequently used words.\"\n    common_words = set(['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'with', 'for', 'not', 'on', 'he', 'as', 'you', 'do', 'at', \n                        'by', 'this', 'but', 'from', 'or', 'which', 'one', 'all', 'would', 'say', 'who', 'will', 'there', 'say', 'when', \n                        'this', 'if', 'into', 'then', 'more', 'my', 'no', 'such', 'out', 'up', 'some', 'other', 'about', 'after', \n                        'these', 'most', 'could', 'time', 'also', 'over', 'before', 'things', 'two', 'see', 'him', 'more', \n                        'than', 'first', 'back', 'only', 'know', 'did', 'now', 'get', 'like', 'make', 'new', 'other', 'our', \n                        'only', 'even', 'much', 'see', 'back'])\n    words = text.split()\n    uncommon_words = [word for word in words if word.lower() not in common_words]\n    if not uncommon_words:\n        return 0.0\n    return sum(len(word) for word in uncommon_words) / len(uncommon_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with emotional connotations to total words.\"\n    emotional_words = set(['happy', 'sad', 'angry', 'excited', 'bored', 'joy', 'fear', 'love', 'hate'])\n    words = text.split()\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return float(emotional_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    unique_words = set(text.split())\n    return float(len(unique_words)) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of uncommon words (more than 7 characters) to total words.\"\n    words = text.split()\n    uncommon_count = sum(1 for word in words if len(word) > 7)\n    return uncommon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 15 words) to total sentences.\"\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    complex_sentences = len([sentence for sentence in text.split('. ') if len(sentence.split()) > 15])\n    return complex_sentences / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are informal or slang words to total words.\"\n    slang_words = set(['gonna', 'wanna', 'gotta', 'kinda', 'sorta', 'bueno'])\n    words = text.split()\n    slang_count = sum(1 for word in words if word.lower() in slang_words)\n    return float(slang_count) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = re.findall(r'[,;]', text)\n    total_sentences = len(re.findall(r'[^.!?]+', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(clauses) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Density of emotional words in the text.\"\n    emotional_words = set(['happy', 'sad', 'angry', 'joy', 'fear', 'love', 'hate', 'excited', 'bored', 'anxious'])\n    words = text.lower().split()\n    emotional_count = sum(1 for word in words if word in emotional_words)\n    return emotional_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    complex_words = len(re.findall(r'\\b\\w{4,}\\b', text))  # Count words with 4 or more characters\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = set(text.lower().split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with conjunctions.\"\n    conjunctions = {'and', 'but', 'or', 'yet', 'for', 'nor', 'so'}\n    sentences = re.findall(r'[^.!?]+', text)\n    conjunction_start_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(tuple(conjunctions)))\n    return conjunction_start_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average punctuation marks per sentence.\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    sentences = len(re.findall(r'[^.!?]+', text))\n    return punctuation_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs in the text.\"\n    adverbs = set(['quickly', 'slowly', 'silently', 'happily', 'sadly', 'eagerly', 'well', 'badly', 'so', 'very'])\n    words = text.lower().split()\n    adverb_count = sum(1 for word in words if word in adverbs)\n    return adverb_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that include dialogue markers (e.g., quotation marks).\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\".*?\"|\\'(?:.*?)\\'', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions (sentences ending with a question mark) to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    rhetorical_questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return rhetorical_questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, defined as the number of commas plus one divided by the sentence count.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    clause_count = text.count(',') + sentences\n    if sentences == 0:\n        return 0.0\n    return clause_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamatory_sentences = text.count('!')\n    if sentences == 0:\n        return 0.0\n    return exclamatory_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique uppercase words as a proportion of total unique words.\"\n    words = text.split()\n    unique_uppercase = len(set(word for word in words if word.isupper()))\n    unique_total = len(set(words))\n    if unique_total == 0:\n        return 0.0\n    return unique_uppercase / unique_total\n\n", "def feature(text: str) -> float:\n    \"Frequency of filler words (like 'um', 'uh') in the text.\"\n    filler_words = ['um', 'uh', 'like', 'you know', 'so', 'actually']\n    words = text.lower().split()\n    filler_count = sum(words.count(filler) for filler in filler_words)\n    return float(filler_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in the text.\"\n    dialogues = re.findall(r'\".*?\"|\\'(?:.*?)\\'', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Average length of words that contain five or more characters\"\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 5]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(re.findall(r'\\?[^.!?]*', text)) / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    phrases_count = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    return phrases_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of numeric digits to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if c.isdigit()) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', p)) for p in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions (and, or, but) to total words in the text\"\n    conjunctions = ['and', 'or', 'but']\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Sum of lengths of all sentences in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    lengths_sum = sum(len(sentence) for sentence in sentences)\n    return float(lengths_sum)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with less than 4 characters to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    short_word_count = sum(1 for word in words if len(word) < 4)\n    return short_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'nor', 'yet')))\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = len(re.findall(r'\\w+', text))\n    return words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = len(set(text))\n    return float(unique_chars)\n\n", "def feature(text: str) -> float:\n    \"Density of numeric characters in the text\"\n    numeric_count = sum(1 for c in text if c.isdigit())\n    return numeric_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Number of sentences containing at least one question mark\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    question_sentences = sum(1 for sentence in sentences if '?' in sentence)\n    return question_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue quotes\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Variation in sentence length measured by standard deviation\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if len(sentences) <= 1:\n        return 0.0\n    lengths = [len(sentence.split()) for sentence in sentences]\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / (len(lengths) - 1)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of hyphenated words in the text\"\n    hyphenated_words = re.findall(r'\\b\\w+-\\w+\\b', text)\n    return float(len(hyphenated_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = {word for word in words if word.endswith('ly')}  # Basic adverb heuristic\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of distinctive sentence starters (as with conjunctions or transitions)\"\n    sentence_starters = {'and', 'but', 'so', 'also', 'however', 'therefore', 'meanwhile', 'first', 'next'}\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    starter_count = sum(1 for sentence in sentences if any(sentence.strip().lower().startswith(word) for word in sentence_starters))\n    return starter_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in text.split('.') + text.split('!') + text.split('?'))\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of verbs to total words in the text\"\n    verbs = {'am', 'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'say', 'says', 'said', 'go', 'goes', 'went'}\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in verbs)\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation points in the text\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with more than 10 words\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Total number of punctuation marks in the text\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return float(punctuation_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    adjectives = len(re.findall(r'\\b\\w+ly\\b|\\b(?:a|an|the)\\s+\\w+\\b', text))\n    return adjectives / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.lower().split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / (len(text) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = len(re.findall(r'\\b(?:what|where|when|how|why)\\b\\?.*', text, re.I))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of numeric words in the text\"\n    numeric_words = len(re.findall(r'\\b\\d+\\b', text))\n    return float(numeric_words)\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of calculations or numbers to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    number_count = sum(1 for word in words if word.isdigit())\n    return number_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences starting with a conjunction.\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'}\n    conjunction_start_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(tuple(conjunctions)))\n    return conjunction_start_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words that are uppercase.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return uppercase_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_count = len(text)\n    if total_count == 0:\n        return 0.0\n    return float(uppercase_count) / total_count\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = text.split('.')\n    if not sentences or all(len(s.strip()) == 0 for s in sentences):\n        return 0.0\n    total_chars = sum(len(s) for s in sentences)\n    return float(total_chars) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences longer than 15 words\"\n    sentences = [s for s in re.split(r'[.!?]', text) if len(s.split()) > 15]\n    return float(len(sentences))\n\n", "def feature(text: str) -> float:\n    \"Punctuation to word ratio\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return float(punctuation_count) / word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of quotes in the text\"\n    quote_count = text.count('\"')\n    total_length = len(text)\n    return float(quote_count) / total_length if total_length > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_words = len(text.split())\n    return float(punctuation_count) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(text.split())\n    return float(adverbs) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average character count per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    char_count = len(text)\n    return float(char_count) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences\"\n    question_marks = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(question_marks) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words longer than 10 characters\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 10)\n    return float(long_word_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of common conjunctions in the text.\"\n    common_conjunctions = ['and', 'but', 'or', 'nor', 'for', 'yet', 'so']\n    words = text.lower().split()\n    count = sum(1 for word in words if word in common_conjunctions)\n    return count / (len(words) + 1e-6)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text.\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiou') or 1\n    words = text.split()\n    return sum(syllable_count(word) for word in words) / (len(words) + 1e-6)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that appear more than once.\"\n    words = text.lower().split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return float(sum(1 for count in word_count.values() if count > 1))\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., 'however', 'furthermore') in the text.\"\n    transitional_phrases = ['however', 'furthermore', 'moreover', 'therefore', 'meanwhile']\n    words = text.lower().split()\n    return float(sum(1 for word in words if word in transitional_phrases))\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_markers = ['what', 'how', 'why', 'is it', 'can we']\n    return float(sum(1 for marker in rhetorical_markers if marker in text.lower()))\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives used in the text.\"\n    import re\n    adjectives = re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+ful\\b|\\b\\w+ous\\b', text.lower())\n    return float(len(adjectives)) / (len(text.split()) + 1e-6)\n\n", "def feature(text: str) -> float:\n    \"Diversity of sentences based on their lengths.\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    return float(len(set(sentence_lengths))) / len(sentence_lengths)\n\n", "def feature(text: str) -> float:\n    \"Frequency of metaphoric language in the text.\"\n    metaphors = ['time is a thief', 'the world is a stage', 'broken heart']\n    return float(sum(1 for metaphor in metaphors if metaphor in text.lower()))\n\n", "def feature(text: str) -> float:\n    \"Complexity based on average sentence length.\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    return float(sum(sentence_lengths)) / len(sentence_lengths) if sentence_lengths else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing questions in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, approximated by counting conjunctions\"\n    if len(text) == 0:\n        return 0.0\n    clause_count = text.count(',') + text.count('and') + text.count('but') + text.count('or')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return clause_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that is made up of compound words\"\n    words = text.split()\n    compound_count = sum(1 for word in words if '-' in word)\n    if len(words) == 0:\n        return 0.0\n    return compound_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of passive voice constructions in the text\"\n    passive_count = text.lower().count('was') + text.lower().count('were')\n    if len(text) == 0:\n        return 0.0\n    return passive_count / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentence_count = sum(1 for s in text.split('.') if len(s.split()) > 15)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unusual punctuation marks (like quotes and dashes)\"\n    unusual_punct_count = sum(1 for c in text if c in ['\u201c', '\u201d', '\u2018', '\u2019', '\u2013', '\u2014'])\n    if len(text) == 0:\n        return 0.0\n    return unusual_punct_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words to total words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words as a proportion of total words\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with over 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 10])\n    if sentences == 0:\n        return 0.0\n    return float(long_sentences) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing special characters to total words\"\n    words = text.split()\n    special_words = len([word for word in words if not word.isalnum()])\n    if not words:\n        return 0.0\n    return float(special_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct punctuation marks used in the text\"\n    punctuation = set(char for char in text if not char.isalnum() and not char.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average frequency of rare words (less than 1000 occurrences in a large corpus) in the text\"\n    rare_word_list = {'arcane', 'abstruse', 'esoteric', 'recondite', 'obscure'}\n    words = text.split()\n    rare_count = sum(1 for word in words if word.lower() in rare_word_list)\n    if not words:\n        return 0.0\n    return float(rare_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of compound sentences (with at least one conjunction) to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    compound_sentences = len([s for s in sentences if 'and' in s or 'but' in s or 'or' in s])\n    if not sentences:\n        return 0.0\n    return float(compound_sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = list(set(text.split()))\n    if not words:\n        return 0.0\n    return float(sum(len(word) for word in words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words that are used in a metaphorical or abstract sense\"\n    metaphorical_words = {'storm', 'light', 'wave', 'voice', 'shadow'}\n    words = text.split()\n    metaphorical_count = sum(1 for word in words if word.lower() in metaphorical_words)\n    if not words:\n        return 0.0\n    return float(metaphorical_count) / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of total words that are conjunctions.\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(1 for word in words if word.lower() in conjunctions) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 10 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of repeated phrases to total number of phrases.\"\n    phrases = text.split('.')\n    if not phrases:\n        return 0.0\n    phrase_counts = {}\n    for phrase in phrases:\n        phrase = phrase.strip().lower()\n        if phrase in phrase_counts:\n            phrase_counts[phrase] += 1\n        else:\n            phrase_counts[phrase] = 1\n    repeated = sum(1 for count in phrase_counts.values() if count > 1)\n    return repeated / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain dialogue to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Number of distinct punctuation marks used in the text.\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average number of phrases (separated by commas or semicolons).\"\n    phrases = re.findall(r'[^,;]+', text)\n    return len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain more than one clause.\"\n    sentences = re.split(r'[.!?]+', text)\n    complex_sentences = sum(1 for s in sentences if len(re.findall(r'[,]', s)) > 0)\n    if not sentences:\n        return 0.0\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are both nouns and verbs.\"\n    words = text.split()\n    # Assuming simple heuristic where words that have common noun and verb uses are counted\n    noun_verb_count = sum(1 for word in words if word.lower() in {'run', 'walk', 'play', 'hit', 'light'})\n    return noun_verb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of the longest word length to the average word length.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    avg_word_length = sum(len(word) for word in words) / len(words)\n    return longest_word_length / avg_word_length if avg_word_length else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used.\"\n    punctuation_set = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_set))\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    return float(len(set(c for c in text if not c.isalnum() and not c.isspace())))\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    upper_count = sum(1 for c in text if c.isupper())\n    return upper_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 6 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 6)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if len(sentences) == 0:\n        return 0.0\n    short_count = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words commonly used in AI-generated text (e.g., 'artificial', 'intelligent')\"\n    common_ai_terms = {'artificial', 'intelligent', 'algorithm', 'data', 'machine', 'learning'}\n    words = set(text.lower().split())\n    return float(len(words.intersection(common_ai_terms)))\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest sentence in characters\"\n    sentences = re.split(r'[.!?]+', text)\n    if not sentences or all(not sentence.strip() for sentence in sentences):\n        return 0.0\n    longest_length = max(len(sentence.strip()) for sentence in sentences)\n    return float(longest_length)\n", "def feature(text: str) -> float:\n    \"Percentage of words that are commonly used in casual speech.\"\n    common_words = {'the', 'and', 'to', 'is', 'in', 'it', 'you', 'that', 'of', 'a'}\n    words = text.split()\n    if not words:\n        return 0.0\n    common_count = sum(1 for word in words if word.lower() in common_words)\n    return common_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional phrases to total phrases.\"\n    transitional_phrases = ['however', 'therefore', 'meanwhile', 'furthermore', 'nevertheless']\n    phrases = re.findall(r'[,;]', text)\n    if not phrases:\n        return 0.0\n    transitional_count = sum(1 for phrase in transitional_phrases if phrase in text.lower())\n    return transitional_count / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    clauses = re.findall(r',|;', text)\n    if not sentences:\n        return 0.0\n    return len(clauses) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of the most frequently used word.\"\n    from collections import Counter\n    words = text.split()\n    if not words:\n        return 0.0\n    most_common_word_count = Counter(words).most_common(1)[0][1]\n    return most_common_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of parenthetical statements to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    parentheses = len(re.findall(r'\\(.*?\\)', text))\n    if not sentences:\n        return 0.0\n    return parentheses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of exclamation points relative to total punctuation.\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if total_punctuation == 0:\n        return 0.0\n    return exclamation_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = text.count('?')\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    count_numbers = sum(1 for word in words if any(char.isdigit() for char in word))\n    return count_numbers / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of trailing punctuation marks to total punctuation.\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    trailing_punctuation = sum(1 for c in text if c in [',', '.', '!', '?'] and text.endswith(c))\n    if total_punctuation == 0:\n        return 0.0\n    return trailing_punctuation / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing at least one exclamation mark.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    excitement_sentences = sum(1 for sentence in text.split('.') if '!' in sentence)\n    return excitement_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text.\"\n    paragraphs = text.split('\\n\\n')\n    return len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Count of stop words divided by total word count.\"\n    stop_words = set(['the', 'is', 'in', 'and', 'a', 'to', 'of', 'for', 'that', 'it', 'with'])\n    words = text.lower().split()\n    count_stop_words = sum(1 for word in words if word in stop_words)\n    return count_stop_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return longest_word_length\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = len(re.findall(r'[,;]', text)) + len(re.findall(r'and|but|or', text))\n    sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    return clauses / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique transition words in the text.\"\n    transition_words = {'however', 'therefore', 'consequently', 'in addition', 'furthermore', 'meanwhile'}\n    words = set(text.lower().split())\n    return len(words.intersection(transition_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex vocabulary (words that are less common) to total words.\"\n    common_words = {'the', 'is', 'in', 'and', 'to', 'of', 'that', 'it', 'you', 'for'}\n    unique_words = set(text.lower().split())\n    complex_word_count = sum(1 for word in unique_words if word not in common_words)\n    return complex_word_count / len(unique_words) if unique_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs that start with a question.\"\n    paragraphs = text.split('\\n\\n')\n    question_paragraphs = sum(1 for p in paragraphs if p.strip().startswith('?'))\n    return question_paragraphs / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraph in sentences.\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = sum(len(re.findall(r'[^.!?]+[.!?]', p)) for p in paragraphs)\n    return sentence_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    adjective_count = sum(len(re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b', sentence)) for sentence in sentences)\n    return adjective_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphorical phrases in the text.\"\n    metaphors = re.findall(r'\\b(?:like|as|is|was)\\s+[^.!?]*\\b(?:light|shadow|ocean|fire|storm)\\b', text, re.IGNORECASE)\n    return len(metaphors)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use vivid imagery.\"\n    imagery_indicators = ['glow', 'scent', 'whisper', 'glimmer', 'crimson', 'silent', 'echo']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    imagery_count = sum(1 for sentence in sentences if any(word in sentence.lower() for word in imagery_indicators))\n    return imagery_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    if len(text) == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that include an emotional word\"\n    emotional_words = ['happy', 'sad', 'angry', 'love', 'hate', 'fear', 'joy', 'disappointment']\n    sentences = re.findall(r'[^.!?]+', text)\n    emotional_count = sum(1 for sentence in sentences for word in emotional_words if word in sentence.lower())\n    return emotional_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    lengths = [len(word) for word in words]\n    if not lengths:\n        return 0.0\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((x - mean_length) ** 2 for x in lengths) / len(lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Ratio of one-syllable words to total words\"\n    one_syllable_words = re.findall(r'\\b\\w*[aeiou]{1}\\w*\\b', text)\n    total_words = len(text.split())\n    return len(one_syllable_words) / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique uppercase words in the text\"\n    words = set(word for word in text.split() if word.isupper())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than average word length\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_length = sum(len(word) for word in words) / len(words)\n    long_words_count = sum(1 for word in words if len(word) > avg_length)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a semicolon\"\n    sentences = re.findall(r'[^.!?]+', text)\n    semicolon_count = sum(1 for sentence in sentences if ';' in sentence)\n    return semicolon_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 7 characters.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    exclamatory_count = sum(1 for sentence in sentences if sentence.endswith('!'))\n    if not sentences:\n        return 0.0\n    return exclamatory_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with more than 15 words.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are verbs.\"\n    words = text.split()\n    verb_count = sum(1 for word in words if any(word.endswith(ending) for ending in ['ed', 'ing']))\n    if not words:\n        return 0.0\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that start with a capital letter.\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters in the text.\"\n    unique_chars = set(text)\n    return len(unique_chars) / max(len(text), 1)\n", "def feature(text: str) -> float:\n    \"Density of descriptive adjectives in the text.\"\n    words = text.split()\n    adjectives = sum(1 for word in words if word.lower() in ['great', 'beautiful', 'wonderful', 'amazing', 'trivial'])  # Example adjectives\n    return adjectives / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words used in the text.\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a dialog or quotation.\"\n    dialog_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    return dialog_sentences / total_sentences if total_sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex vocabulary (rare words) to total words.\"\n    rare_words = sum(1 for word in text.split() if len(word) > 7 and word.lower() not in ['another', 'between', 'through', 'without'])  # Example of common words\n    return rare_words / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a ratio to total words.\"\n    adverbs = sum(1 for word in text.split() if word.endswith('ly'))  # Assuming adverbs often end with 'ly'\n    return adverbs / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses (subordinate conjunctions) in the text.\"\n    clauses = text.count(',') + text.count('and') + text.count('but')  # Simple clause indicators\n    return clauses / len(re.findall(r'[^.!?]+[.!?]', text)) if len(re.findall(r'[^.!?]+[.!?]', text)) else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure of emotional language using emotional words.\"\n    emotional_words = sum(1 for word in text.split() if word.lower() in ['love', 'hate', 'happy', 'sad', 'fear', 'joy', 'angry'])  # Example emotional words\n    return emotional_words / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences.\"\n    compound_sentences = text.count(';') + text.count(', and')  # Simple indicators of compound sentences\n    return compound_sentences / len(re.findall(r'[^.!?]+[.!?]', text)) if len(re.findall(r'[^.!?]+[.!?]', text)) else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain direct speech.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    direct_speech_count = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique adjectives in the text.\"\n    words = re.findall(r'\\w+', text)\n    adjectives = [word for word in words if word.lower() in {'big', 'full', 'clear', 'favorite', 'presidential', 'childish', 'straight', 'hitchhiker', 'welcome', 'blasphemy', 'innocent'}]  # Simple adjective list\n    return float(len(set(adjectives)))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain at least one capital letter.\"\n    words = text.split()\n    capital_words = sum(1 for word in words if any(c.isupper() for c in word))\n    if not words:\n        return 0.0\n    return capital_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 6 characters.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = len(re.findall(r'[;,\\s]|\\band\\b|\\bor\\b', text)) + len(re.findall(r'[.!?]', text))\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of exclamatory sentences in the text.\"\n    exclamations = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return float(exclamations)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing punctuation to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return len(sentences) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of transitional phrases in the text.\"\n    transitions = ['however', 'therefore', 'meanwhile', 'consequently', 'furthermore', 'additionally']\n    count = sum(1 for transition in transitions if transition in text.lower())\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of quotes in the text divided by total words.\"\n    quotes = text.count('\"')\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return quotes / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of verbs in the text.\"\n    verbs = re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b', text)\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return len(verbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a proportion of total words.\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions as a proportion of total sentences.\"\n    rhetorical_questions = re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE)\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return len(rhetorical_questions) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters.\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clause components per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clauses_count = sum(len(re.split(r'[;,]', sentence)) for sentence in sentences)\n    return clauses_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Rate of sentences that contain direct speech.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    direct_speech_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return direct_speech_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of total punctuation marks to total characters.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence based on commas.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clauses_count = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    return clauses_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of words used in common speech (less than 5 letters).\"\n    words = text.split()\n    common_speech_count = sum(1 for word in words if len(word) < 5)\n    return common_speech_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence complexity measured by average word length.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    avg_word_length = sum(len(word) for sentence in sentences for word in sentence.split()) / sum(len(sentence.split()) for sentence in sentences) if sentences else 0.0\n    return avg_word_length\n\n", "def feature(text: str) -> float:\n    \"Proportion of words used in the text that are adverbs.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_sentences = sum(1 for s in sentences if '\"' in s)\n    return dialogue_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct dialogue speakers in the text.\"\n    speakers = len(set(re.findall(r'\"([^\"]+)\"', text)))\n    return float(speakers)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_questions = len(re.findall(r'\\b(why|how|what|is|are|do|does|did)\\b\\?+', text, re.I))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex vocabulary (words over 6 characters) to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(word) > 6)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 15)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamations in the text.\"\n    exclamations = text.count('!')\n    return float(exclamations)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(len(re.findall(r'[aeiouy]', word.lower())) for word in words)\n    return syllable_count / len(words) if len(words) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but|or', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with special characters (e.g., &, %, $) to total words.\"\n    words = text.split()\n    special_char_count = sum(1 for word in words if re.search(r'[^a-zA-Z0-9]', word))\n    return special_char_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique sentences to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    unique_sentences = len(set(sentences))\n    return unique_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that end with punctuation marks other than a period.\"\n    sentences = re.split(r'[.!?]', text)\n    non_period_count = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[-1] in ['!', '?'])\n    return non_period_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing the word 'I' to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    i_count = sum(1 for sentence in sentences if 'I' in sentence)\n    return i_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.split(r'[.!?]', text)\n    length_count = sum(len(sentence) for sentence in sentences)\n    return length_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional words (e.g., however, therefore) to total words.\"\n    transitional_words = {'however', 'therefore', 'furthermore', 'moreover', 'thus', 'consequently', 'nevertheless'}\n    words = text.lower().split()\n    transitional_count = sum(1 for word in words if word in transitional_words)\n    return transitional_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words.\"\n    negative_words = {'not', 'no', 'never', 'none', 'nothing', 'nobody'}\n    words = text.lower().split()\n    negative_count = sum(1 for word in words if word in negative_words)\n    return negative_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text.\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences.\"\n    question_count = len(re.findall(r'\\?.*', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with direct speech in the text.\"\n    direct_speech_count = len(re.findall(r'[\"\u201c].*?[\"\u201d]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return direct_speech_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(sentence.count(',') + sentence.count(';') + sentence.count('and') for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in the text that are adverbs.\"\n    adverbs = [word for word in text.split() if word.endswith('ly')]  # Simple heuristic for adverbs\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with exclamation marks.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return text.count('!') / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogues to total sentences.\"\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_sentences / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    comma_count = text.count(',')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentence beginnings with interjections.\"\n    interjections = ['oh', 'ah', 'wow', 'ouch', 'yay', 'oops']\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    interjection_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(tuple(interjections)))\n    if not sentences:\n        return 0.0\n    return interjection_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are verbs based on average common verbs.\"\n    common_verbs = {'is', 'are', 'was', 'were', 'be', 'have', 'do', 'said', 'go', 'get', 'make', 'know'}\n    words = text.split()\n    verb_count = sum(1 for word in words if word.lower() in common_verbs)\n    if not words:\n        return 0.0\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    adjectives = re.findall(r'\\b\\w+ly\\b', text)\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return len(adjectives) / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue excerpts.\"\n    dialogues = re.findall(r'\"([^\"]*)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(d) for d in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex phrases, defined as phrases longer than 5 words.\"\n    phrases = re.split(r'[,.!?]', text)\n    complex_phrase_count = sum(1 for phrase in phrases if len(phrase.split()) > 5)\n    if not phrases:\n        return 0.0\n    return complex_phrase_count / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are technical or jargon terms.\"\n    technical_terms = {'anomaly', 'algorithm', 'architecture', 'bandwidth', 'protocol', 'encryption'}\n    words = text.split()\n    jargon_count = sum(1 for word in words if word.lower() in technical_terms)\n    if not words:\n        return 0.0\n    return jargon_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total punctuation marks in the text\"\n    exclamations = text.count('!')\n    total_punctuation = len(re.findall(r'[.!?]', text))\n    if total_punctuation == 0:\n        return 0.0\n    return exclamations / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a proportion of total words\"\n    words = text.split()\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions in the text\"\n    question_count = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words in the text\"\n    words = text.split()\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) >= 1)\n    if not words:\n        return 0.0\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    syllable_count = sum(len(re.findall(r'[aeiou]', word)) for word in words if word)\n    if not words:\n        return 0.0\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of figurative language (metaphors and similes) in the text\"\n    figurative_phrases = re.findall(r'\\b(as \\w+ as|like)\\b', text, re.IGNORECASE)\n    total_phrases = len(re.findall(r'[,.]', text))\n    if total_phrases == 0:\n        return 0.0\n    return len(figurative_phrases) / total_phrases\n", "def feature(text: str) -> float:\n    'Average sentence length in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    'Proportion of complex words (more than 3 syllables) to total words'\n    words = text.split()\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0)\n    return complex_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    'Average number of phrases (separated by commas or semicolons)'\n    phrases = re.split(r'[;,]', text)\n    return len(phrases)\n\n", "def feature(text: str) -> float:\n    'Count of unique punctuation marks in the text'\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return len(unique_punctuation)\n\n", "def feature(text: str) -> float:\n    'Density of descriptive adjectives in the text'\n    adjectives = len(re.findall(r'\\b\\w+ly\\b|\\b\\w+\\s*(?:adjective)\\b', text))\n    total_words = len(text.split())\n    return adjectives / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    'Proportion of words that are longer than 10 characters'\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    'Average number of clauses per sentence'\n    clauses = re.findall(r'[^,;]+(,[^,;]+)*', text)\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return len(clauses) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    'Proportion of sentences ending with exclamation marks'\n    exclamation_count = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return exclamation_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text.\"\n    return float(len(set(text)))\n\n", "def feature(text: str) -> float:\n    \"Average word length of the top three most frequent words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    from collections import Counter\n    most_common = Counter(words).most_common(3)\n    return float(sum(len(word) for word, _ in most_common)) / len(most_common)\n\n", "def feature(text: str) -> float:\n    \"Density of exclamatory sentences in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamations = text.count('!')\n    return float(exclamations) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of multi-sentence fragments (sentences containing semicolons) to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    fragments = text.count(';')\n    return float(fragments) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of questions marks in the text.\"\n    return float(text.count('?'))\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return float(max(len(word) for word in words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing vowels.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    vowel_count = sum(any(c in 'aeiou' for c in word) for word in words)\n    return float(vowel_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing direct speech (quotes).\"\n    sentences = re.findall(r'\"[^\"]*\"', text)\n    return float(len(sentences))\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    comma_count = text.count(',')\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing complex structures (using conjunctions)\"\n    complex_sentences = len(re.findall(r'\\b(and|but|or|yet|so|for)\\b', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return complex_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of unique capitalized words\"\n    capitalized_words = set(word for word in text.split() if word[0].isupper())\n    return float(len(capitalized_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of phrases (separated by commas or semicolons) to total sentences\"\n    phrase_count = len(re.findall(r'[;,.]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return phrase_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with an exclamation mark\"\n    exclamatory_sentences = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return exclamatory_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that are verbs\"\n    verbs = ['is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'say', 'says', 'said', 'make', 'makes', 'made', 'go', 'goes', 'went']\n    unique_verbs = set(word for word in text.split() if word in verbs)\n    return float(len(unique_verbs))\n\n", "def feature(text: str) -> float:\n    \"Percentage of words with less than 4 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    short_words = sum(1 for word in words if len(word) < 4)\n    return short_words / len(words) * 100.0\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase to total letters in the text\"\n    total_uppercase = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    return total_uppercase / total_letters\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'(?<=[.!?])\\s*', text) if sentence)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of prepositions to total words\"\n    prepositions = {'in', 'on', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during',\n                    'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down'}\n    words = text.split()\n    preposition_count = sum(1 for word in words if word.lower() in prepositions)\n    if len(words) == 0:\n        return 0.0\n    return preposition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text\"\n    # Assuming adjectives can be identified as words ending in -y or -ful just for simplicity's sake\n    adjectives_pattern = r'\\b\\w+ful\\b|\\b\\w+y\\b'\n    adjectives = re.findall(adjectives_pattern, text, re.IGNORECASE)\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    def syllable_count(word):\n        count = 0\n        vowels = 'aeiouy'\n        word = word.lower()\n        if len(word) == 0:\n            return 0\n        if word[0] in vowels:\n            count += 1\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i - 1] not in vowels:\n                count += 1\n        if word.endswith('e'):\n            count -= 1\n        if count == 0:\n            count = 1\n        return count\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words with numbers as characters\"\n    words = text.split()\n    words_with_numbers = sum(1 for word in words if any(c.isdigit() for c in word))\n    return float(words_with_numbers)\n", "def feature(text: str) -> float:\n    \"Ratio of total words to the number of sentences.\"\n    word_count = len(text.split())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return word_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing at least one vowel.\"\n    word_list = text.split()\n    if not word_list:\n        return 0.0\n    vowel_count = sum(1 for word in word_list if any(char in 'aeiouAEIOU' for char in word))\n    return vowel_count / len(word_list)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 5 characters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words that are commonly used conjunctions.\"\n    common_conjunctions = {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'}\n    words = text.split()\n    conjunction_count = sum(1 for word in words if word.lower() in common_conjunctions)\n    return float(conjunction_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words.\"\n    negative_words = {'not', 'no', 'never', 'none', 'without', 'against', 'fail', 'loss'}\n    words = text.split()\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    if not words:\n        return 0.0\n    return negative_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Adjusts punctuation density considering non-standard punctuation.\"\n    non_standard_punctuation = sum(1 for c in text if c in '()[]{}<>')\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return (total_punctuation + non_standard_punctuation) / len(text)\n", "def feature(text: str) -> float:\n    \"Average length of words in the text, only considering words with 4 or more letters.\"\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation to total characters in the text.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    if len(words) == 0:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of uppercase words as a ratio to total words.\"\n    words = text.split()\n    uppercase_words = [word for word in words if word.isupper()]\n    if len(words) == 0:\n        return 0.0\n    return len(uppercase_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 15]\n    if len(sentences) == 0:\n        return 0.0\n    return len(long_sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of specific conjunctions (and, but, or) per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    conjunctions = sum(text.count(conj) for conj in ['and', 'but', 'or'])\n    if len(sentences) == 0:\n        return 0.0\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of narrative to non-narrative sentences in the text.\"\n    narrative_keywords = ['he', 'she', 'they']\n    sentences = re.split(r'[.!?]', text)\n    narrative_count = sum(1 for s in sentences if any(word in s.lower() for word in narrative_keywords))\n    if len(sentences) == 0:\n        return 0.0\n    return narrative_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quoted speech)\"\n    dialogue_count = len(re.findall(r'\".+?\"', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases per sentence, considering commas and semicolons\"\n    phrase_count = sum(text.count(delimiter) + 1 for delimiter in [',', ';'])\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return phrase_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of nouns relative to total word count\"\n    noun_count = len(re.findall(r'\\b[A-Z][a-z]*\\b', text))  # Assuming proper nouns as a simplistic noun approximation\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return noun_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of punctuation marks relative to total character count\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_char_count = len(text)\n    if total_char_count == 0:\n        return 0.0\n    return punctuation_count / total_char_count\n\n", "def feature(text: str) -> float:\n    \"Average word length of words with more than 3 syllables\"\n    three_syl_words = re.findall(r'\\b\\w{4,}[^aeiou]*[aeiou]{1,3}[^aeiou]*[aeiou]{1,3}[^aeiou]*[aeiou]*\\b', text)  # Simplistic syllable counting\n    if not three_syl_words:\n        return 0.0\n    return sum(len(word) for word in three_syl_words) / len(three_syl_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with at least one digit to total words\"\n    digit_word_count = len(re.findall(r'\\b\\w*\\d\\w*\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return digit_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that are longer than 8 characters\"\n    long_words = set(word for word in text.split() if len(word) > 8)\n    return float(len(long_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    capitalized_count = sum(1 for word in text.split() if word.istitle())\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return capitalized_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are function words (with a set of common functions)\"\n    function_words = {'the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'of', 'in', 'that', 'it', 'with'}\n    total_word_count = len(text.split())\n    function_word_count = sum(1 for word in text.lower().split() if word in function_words)\n    if total_word_count == 0:\n        return 0.0\n    return function_word_count / total_word_count\n", "def feature(text: str) -> float:\n    \"Average number of clauses (indicated by commas or conjunctions) per sentence\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    clauses_count = sum(text.count(',') + text.count('and') + text.count('but') for sentence in sentences)\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain exclamations\"\n    exclamation_count = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return exclamation_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text, considering only words starting with a consonant\"\n    words = [word for word in text.split() if word[0].lower() not in 'aeiou']\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words in the text\"\n    negative_words = ['bad', 'sad', 'terrible', 'awful', 'hate', 'dislike', 'angry']\n    words = text.split()\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of total words that are adverbs\"\n    adverb_words = ['quickly', 'silently', 'well', 'badly', 'sadly', 'happily']\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower() in adverb_words)\n    return adverb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct phrases separated by 'and' in the text\"\n    phrases = text.split('and')\n    distinct_phrases = set(phrase.strip() for phrase in phrases)\n    return len(distinct_phrases)\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1  # Count sentences\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with exclamatory punctuation.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamatory_sentences = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamatory_sentences / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence.\"\n    words = len(re.findall(r'\\w+', text))\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique punctuation marks to total punctuation marks.\"\n    punctuation_marks = re.findall(r'[.!?,;:]', text)\n    unique_punctuation = set(punctuation_marks)\n    if len(punctuation_marks) == 0:\n        return 0.0\n    return len(unique_punctuation) / len(punctuation_marks)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain dialogue.\"\n    dialogue_count = len(re.findall(r'\\\".*?\\\"', text))\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 6 characters to total words.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 6)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with at least one uppercase letter to total words.\"\n    words = text.split()\n    uppercase_words = sum(1 for word in words if any(c.isupper() for c in word))\n    if len(words) == 0:\n        return 0.0\n    return uppercase_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases (separated by commas) per sentence.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    phrases = text.count(',')\n    if sentences == 0:\n        return 0.0\n    return phrases / sentences\n", "def feature(text: str) -> float:\n    \"Count the number of exclamation marks in the text\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of uppercase to total letters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_letters = sum(1 for c in text if c.isalpha())\n    return uppercase_count / total_letters if total_letters > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of words that are gerunds (-ing form)\"\n    words = text.split()\n    gerund_count = sum(1 for word in words if word.endswith('ing'))\n    return gerund_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of total punctuation marks to total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the total number of quotes in the text\"\n    return float(text.count('\"'))\n\n", "def feature(text: str) -> float:\n    \"Calculate the average length of sentences in words\"\n    sentences = re.split(r'[.!?]', text.strip())\n    sentence_count = len(sentences)\n    word_count = len(text.split())\n    return word_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of technical jargon in the text\"\n    jargon_words = {'marijuana', 'spice', 'whiskey', 'alien', 'expert'}  # Example jargon\n    words = text.split()\n    jargon_count = sum(1 for word in words if word.lower() in jargon_words)\n    return jargon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that are longer than 7 characters.\"\n    long_words = set(word for word in text.split() if len(word) > 7)\n    return float(len(long_words))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(text.count(',') + text.count('and') + text.count('but') for text in sentences)\n    sentence_count = len(sentences)\n    if sentence_count == 0:\n        return 0.0\n    return clause_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of total punctuation marks that are exclamation marks.\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if total_punctuation == 0:\n        return 0.0\n    return exclamation_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average length of words that contain digits.\"\n    digit_words = [word for word in text.split() if any(char.isdigit() for char in word)]\n    if not digit_words:\n        return 0.0\n    return sum(len(word) for word in digit_words) / len(digit_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue (quoted speech) to total sentences.\"\n    dialogue_count = len(re.findall(r'\"[^\"]*\"', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of total words that are gerunds (ending in -ing).\"\n    gerund_count = len([word for word in text.split() if word.endswith('ing')])\n    words = text.split()\n    if not words:\n        return 0.0\n    return gerund_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average usage of an informal contraction (e.g., don't, can't).\"\n    contractions = re.findall(r\"\\b(?:don't|can't|won't|you're|he's|she's|it's|they're)\\b\", text, re.IGNORECASE)\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return len(contractions) / sentence_count\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = text.split('.')\n    sentence_counts = [len(sentence.split()) for sentence in sentences if sentence]\n    if not sentence_counts:\n        return 0.0\n    return sum(sentence_counts) / len(sentence_counts)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_count = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 5 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    if not words:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentences = text.split('.')\n    comma_counts = [sentence.count(',') for sentence in sentences]\n    if not comma_counts:\n        return 0.0\n    return sum(comma_counts) / len(comma_counts)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quoted speech)\"\n    dialogue_count = text.count('\"')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return dialogue_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are dialogue tags (e.g., said, asked, etc.)\"\n    dialogue_tags = ['said', 'asked', 'replied', 'whispered', 'exclaimed']\n    words = text.lower().split()\n    tag_count = sum(1 for word in words if word in dialogue_tags)\n    return tag_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unusual punctuation marks (other than period, exclamation, and question mark).\"\n    unusual_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace() and c not in ['.', '!', '?'])\n    return unusual_punctuation / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use a first-person perspective (I, we).\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    first_person_count = sum(1 for sentence in sentences if ' I ' in sentence or ' we ' in sentence)\n    return first_person_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rare words (less than 1000 occurrences in the English language) in the text.\"\n    rare_words = set(['example', 'lackluster', 'quintessential', 'bamboozle'])\n    words = text.lower().split()\n    rare_count = sum(1 for word in words if word in rare_words)\n    return rare_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of adjectives to total words in the text.\"\n    adjectives = set(['beautiful', 'happy', 'lame', 'big', 'wonderful'])\n    words = text.lower().split()\n    adjective_count = sum(1 for word in words if word in adjectives)\n    return adjective_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of complex phrases (containing more than one clause) in the text.\"\n    complex_phrases = len(re.findall(r'\\b(?:and|but)\\b', text))  # simplistic complex phrase detection\n    return complex_phrases / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Diversity of vocabulary based on word length variation.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    lengths = [len(word) for word in words]\n    return float(max(lengths) - min(lengths)) / len(words) if len(words) > 1 else 0.0\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words_count = len(set(words))\n    return unique_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word\"\n    def syllable_count(word):\n        return max(1, sum(1 for char in word if char in 'aeiouAEIOU'))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of commas to total punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_punctuation == 0:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Count of idiomatic expressions in the text\"\n    idioms = ['kick the bucket', 'spill the beans', 'barking up the wrong tree', 'break the ice']\n    count = sum(text.lower().count(idiom) for idiom in idioms)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph.split()) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamations to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamation_count = text.count('!')\n    return exclamation_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 5 letters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word\"\n    syllables_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in text.split())\n    words = text.split()\n    if not words:\n        return 0.0\n    return syllables_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation used in the text\"\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    words = text.split()\n    return len(words) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average word length in characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words beginning with a vowel\"\n    words = text.split()\n    vowel_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return float(vowel_count)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain dialogue (quotes)\"\n    dialogue_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    all_sentences = text.count('.') + text.count('!') + text.count('?')\n    return dialogue_sentences / all_sentences if all_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 15 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    question_count = text.count('?')\n    sentence_count = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentence_count:\n        return 0.0\n    return question_count / len(sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    unique_word_count = len(set(words))\n    if not words:\n        return 0.0\n    return unique_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of emojis in the text.\"\n    return len(re.findall(r'[\\U0001F600-\\U0001F64F]', text))\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 15 words) to total sentences.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = len([s for s in sentences if len(s.split()) > 15])\n    if not sentences:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinguishing punctuation marks (exclamation and question marks) to total punctuation.\"\n    exclamations = text.count('!')\n    questions = text.count('?')\n    total_punctuation = exclamations + questions + text.count('.') + text.count(',')\n    if total_punctuation == 0:\n        return 0.0\n    return (exclamations + questions) / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    dialogue_count = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return dialogue_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuations used in the text\"\n    unique_punctuations = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuations))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain ellipses\"\n    sentences = len(re.findall(r'[.!?]', text))\n    ellipsis_count = text.count('...')\n    if sentences == 0:\n        return 0.0\n    return ellipsis_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word)) for word in text.split())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return syllable_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in words\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of non-English words (non-ASCII) in the text\"\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    return float(non_ascii_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions in the text\"\n    rhetorical_question_count = len(re.findall(r'\\b(isn\\'t|don\\'t|won\\'t|couldn\\'t|wasn\\'t)\\s+\\w+', text, re.IGNORECASE))\n    total_question_count = text.count('?')\n    if total_question_count == 0:\n        return 0.0\n    return rhetorical_question_count / total_question_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use exclamation marks\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    total_paragraphs = len(paragraphs)\n    if total_paragraphs == 0:\n        return 0.0\n    return sentence_count / total_paragraphs\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    if len(paragraphs) == 0:\n        return 0.0\n    return word_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation marks that are commas\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    comma_count = text.count(',')\n    if total_punctuation == 0:\n        return 0.0\n    return comma_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Ratio of parenthetical phrases to total words\"\n    parenthetical_count = len(re.findall(r'\\(.*?\\)', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return parenthetical_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of words with a length less than 3\"\n    short_word_count = len(re.findall(r'\\b\\w{1,2}\\b', text))\n    return float(short_word_count)\n", "def feature(text: str) -> float:\n    \"Ratio of words containing numbers to total words\"\n    words = text.split()\n    number_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    if not words:\n        return 0.0\n    return number_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average letter count per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of passive voice constructions in the text\"\n    passive_voice_count = len(re.findall(r'\\bwas\\b|\\bwere\\b|\\bhas been\\b|\\bhave been\\b|\\bis\\b|\\bare\\b|\\bbeen\\b', text, re.I))\n    return float(passive_voice_count)\n\n", "def feature(text: str) -> float:\n    \"Number of hyphenated words in the text\"\n    hyphenated_words = len(re.findall(r'\\w+-\\w+', text))\n    return float(hyphenated_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    if not words:\n        return 0.0\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(re.findall(r'\\band\\b|\\bor\\b', sentence)) > 0)\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks relative to total punctuation marks.\"\n    exclamations = text.count('!')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if punctuation_count == 0:\n        return 0.0\n    return exclamations / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n", "def feature(text: str) -> float:\n    \"Density of emotional words (positive or negative) in the text.\"\n    emotional_words = ['love', 'hate', 'joy', 'fear', 'anger', 'sad','happy', 'disgust']\n    words = text.split()\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    if not words:\n        return 0.0\n    return emotional_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns in the text.\"\n    noun_list = ['the', 'a', 'an', 'they', 'she', 'he', 'this', 'that']  # Simplified noun examples\n    words = text.split()\n    noun_count = sum(1 for word in words if word.lower() in noun_list)\n    if not words:\n        return 0.0\n    return noun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of compound sentences relative to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    compound_count = sum(1 for sentence in sentences if len(re.findall(r'\\b(?:and|but|or)\\b', sentence)) > 0)\n    if not sentences:\n        return 0.0\n    return compound_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word.\"\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word)) for word in text.split())\n    return syllable_count / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a direct question.\"\n    questions = len(re.findall(r'\\?\\s*', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    return questions / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of the number of complex words (more than 3 syllables).\"\n    complex_words = sum(1 for word in text.split() if len(re.findall(r'[aeiouy]+', word)) > 3)\n    return float(complex_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of first-person pronouns to total words.\"\n    first_person_pronouns = sum(1 for word in text.split() if word.lower() in ['i', 'me', 'my', 'we', 'us', 'our'])\n    return first_person_pronouns / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words.\"\n    sentences = text.split('.')  # Simplified for basic sentence splitting\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text.\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    uppercase_letters = sum(1 for c in text if c.isupper())\n    if total_letters == 0:\n        return 0.0\n    return uppercase_letters / total_letters\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than average word length.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_word_length = sum(len(word) for word in words) / len(words)\n    long_words = [word for word in words if len(word) > avg_word_length]\n    return len(long_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks as a fraction of total punctuation.\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    unique_punctuation = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    if total_punctuation == 0:\n        return 0.0\n    return unique_punctuation / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Number of paragraphs per 100 words in the text.\"\n    paragraph_count = text.count('\\n') + 1\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return (paragraph_count / word_count) * 100\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of consecutive vowels in the text as an average per word.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    consecutive_vowel_count = sum(len(re.findall(r'(?:[aeiouAEIOU]{2,})', word)) for word in words)\n    return consecutive_vowel_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words in passive voice constructions.\"\n    passive_voice_pattern = r'\\b(?:is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    passive_voice_count = len(re.findall(passive_voice_pattern, text))\n    word_count = len(re.findall(r'\\w+', text))\n    if word_count == 0:\n        return 0.0\n    return passive_voice_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs to total words in the text.\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_count = len(re.findall(adverb_pattern, text))\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return adverb_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences.\"\n    sentences = text.split('.')\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentences) / (len(sentences) or 1)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than average in the text.\"\n    words = text.split()\n    average_length = sum(len(word) for word in words) / (len(words) or 1)\n    long_words = sum(1 for word in words if len(word) > average_length)\n    return float(long_words) / (len(words) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of phrases (more than 3 words) in the text.\"\n    phrases = re.findall(r'(\\b\\w+\\b.*?\\b\\w+\\b.*?\\b\\w+\\b)', text)\n    return float(len(phrases))\n\n", "def feature(text: str) -> float:\n    \"Average number of times the word 'I' is mentioned per sentence.\"\n    sentences = text.split('.')\n    i_count = text.lower().count('i')\n    return float(i_count) / (len(sentences) or 1)\n\n", "def feature(text: str) -> float:\n    \"Density of metaphors and similes based on common phrases.\"\n    metaphor_pattern = r'(like|as if|as though|similar to|metaphorically)'\n    metaphors = len(re.findall(metaphor_pattern, text, re.IGNORECASE))\n    return float(metaphors) / (len(re.findall(r'[.!?]', text)) or 1)\n\n", "def feature(text: str) -> float:\n    \"Count of compound words (hyphenated) in the text.\"\n    compound_words = re.findall(r'\\b\\w+-\\w+\\b', text)\n    return float(len(compound_words))\n\n", "def feature(text: str) -> float:\n    \"Average length of a word compared to the average sentence length.\"\n    words = text.split()\n    average_word_length = sum(len(word) for word in words) / (len(words) or 1)\n    sentences = text.split('.')\n    average_sentence_length = sum(len(sentence.split()) for sentence in sentences) / (len(sentences) or 1)\n    return average_word_length / (average_sentence_length or 1)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are uncommon based on a predefined list of common words\"\n    common_words = {'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'I', 'to', 'that', 'is', 'for', 'you', 'he', 'was', 'on', 'are', 'as', 'with', 'his', 'they', 'at', 'this', 'by', 'from'}\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    if len(words) == 0:\n        return 0.0\n    return uncommon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiou')\n    \n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(count_syllables(word.lower()) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words in the text\"\n    words = text.split()\n    digit_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    if len(words) == 0:\n        return 0.0\n    return digit_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence in the text\"\n    sentences = text.split('.')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(sentences) == 0:\n        return 0.0\n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences ending with question marks in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    question_count = text.count('?')\n    if len(sentences) == 0:\n        return 0.0\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Variation in sentence length measured by standard deviation of sentence lengths.\"\n    sentences = re.split(r'[.!?]', text)\n    lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if len(lengths) == 0:\n        return 0.0\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / len(lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(word.lower() for word in words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters for sentences longer than 15 characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = [s for s in sentences if len(s) > 15]\n    if not long_sentences:\n        return 0.0\n    return sum(len(s) for s in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain emotional language (e.g., 'love', 'hate', 'fear')\"\n    emotional_words = r'\\b(love|hate|fear|angry|happy|sad)\\b'\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    emotional_sentences = [s for s in sentences if re.search(emotional_words, s, re.IGNORECASE)]\n    if not sentences:\n        return 0.0\n    return len(emotional_sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clauses_count = sum(len(re.findall(r'[,;]', s)) + 1 for s in sentences)\n    if not sentences:\n        return 0.0\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuation marks (e.g., '...', '!!', '??') to total punctuation\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    complex_punctuation = len(re.findall(r'(\\.{3}|[!?]{2,})', text))\n    return complex_punctuation / (total_punctuation + 1e-5)\n\n", "def feature(text: str) -> float:\n    \"Count of words with more than 3 syllables\"\n    long_words = re.findall(r'\\b\\w{3,}ing?\\b', text)\n    return len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Density of swear words in the text\"\n    swear_words = r'\\b(damn|fucking|shit|hell)\\b'\n    return len(re.findall(swear_words, text, re.IGNORECASE)) / (len(text.split()) + 1e-5)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions to total questions\"\n    rhetorical_questions = len(re.findall(r'(?i)^(.*(why|how|do|is|are)\\b.*\\?)$', text, re.MULTILINE))\n    total_questions = text.count('?')\n    if total_questions == 0:\n        return 0.0\n    return rhetorical_questions / total_questions\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one clause to total sentences\"\n    clauses = len(re.findall(r'[,;]', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return clauses / max(1, sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Frequency of dialogue markers (e.g., quotes) in the text\"\n    quote_count = text.count('\"') + text.count(\"'\")\n    return quote_count / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words in each sentence\"\n    sentences = re.split(r'[.!?]+', text)\n    unique_word_count = len(set(text.split()))\n    return unique_word_count / max(1, len(sentences))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{4,}\\b', text))  # Counts all words longer than 3 letters\n    return complex_words / max(1, len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are interjections\"\n    interjections = set(['Oh', 'Wow', 'Hey', 'Alas', 'Ah', 'Ouch', 'Hooray', 'Yay'])\n    words = text.split()\n    if not words:\n        return 0.0\n    interjection_count = sum(1 for word in words if word in interjections)\n    return interjection_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific emotive words related to sentiment analysis\"\n    emotive_words = set(['hate', 'love', 'like', 'dislike', 'angry', 'happy', 'sad', 'excited'])\n    words = text.split()\n    emotive_count = sum(1 for word in words if word.lower() in emotive_words)\n    return emotive_count / max(1, len(words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    dialogue_sentences = len(re.findall(r'\".*?\"', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in words.\"\n    dialogues = re.findall(r'\".*?\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue.split()) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    question_sentences = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return question_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    clauses = sum(len(re.split(r'[;,]', sentence)) for sentence in re.split(r'[.!?]', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return clauses / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total punctuation marks.\"\n    exclamations = text.count('!')\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_punctuation == 0:\n        return 0.0\n    return exclamations / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence.\"\n    words = text.split()\n    unique_words = len(set(words))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return unique_words / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter.\"\n    sentences = re.split(r'[.!?]', text)\n    capital_sentences = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].isupper())\n    if len(sentences) == 0:\n        return 0.0\n    return capital_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return max(len(word) for word in words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words in the text\"\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of quotes to total sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    quote_count = text.count('\"')\n    if sentence_count == 0:\n        return 0.0\n    return quote_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks as a ratio to total punctuation marks\"\n    exclamation_count = text.count('!')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing verbs to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    verb_count = sum(bool(re.search(r'\\b\\w+ed\\b|\\b\\w+ing\\b', sentence)) for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return verb_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 12 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 12)\n    if not words:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average comma usage per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    comma_count = text.count(',')\n    if not sentences:\n        return 0.0\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences ending with a question mark\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    if not sentences:\n        return 0.0\n    return question_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions in the text.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    question_count = text.count('?')\n    return (question_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 15 words) to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 15])\n    return (long_sentences / sentences) if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text.\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')  # Simple syllable estimation\n    words = text.split()\n    syllable_count = sum(count_syllables(word) for word in words)\n    return (syllable_count / len(words)) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text.\"\n    adverbs = len([word for word in text.split() if word.endswith('ly')])\n    total_words = len(text.split())\n    return (adverbs / total_words) if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation points to total punctuation marks.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    return (exclamation_count / punctuation_count) if punctuation_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    longest_word_length = max((len(word) for word in words), default=0)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are over 7 characters long\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with exclamation marks to total sentences\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing commas\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    comma_count = text.count(',')\n    if sentence_count == 0:\n        return 0.0\n    return comma_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of unique words to total words ratio\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words to total words (simple heuristic)\"\n    negative_words = ['not', 'no', 'never', 'hate', 'bad', 'sad']\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of passive voice constructions in the text\"\n    passive_voice_count = len(re.findall(r'\\b(is|was|were|be|being|been)\\s+\\w+ed\\b', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return passive_voice_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 12 words to total sentences.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 12)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    clauses = re.findall(r'[;,:]', text)\n    if not clauses:\n        return 0.0\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return len(clauses) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of characters in the text that are punctuation.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_chars = len(text)\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of consecutive identical characters to total characters.\"\n    consecutive_count = sum(1 for i in range(1, len(text)) if text[i] == text[i - 1])\n    total_chars = len(text)\n    return consecutive_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are technical terminology.\"\n    technical_terms = {'algorithm', 'function', 'variable', 'data', 'structure', 'system'}  # Example set\n    words = text.split()\n    tech_word_count = sum(1 for word in words if word.lower() in technical_terms)\n    return tech_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of jargon or complex words based on a set list.\"\n    jargon_terms = {'synergy', 'paradigm', 'leverage', 'bandwidth', 'scalable'}  # Example set\n    words = text.split()\n    jargon_count = sum(1 for word in words if word.lower() in jargon_terms)\n    return jargon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of consecutive nouns in the text.\"\n    nouns = re.findall(r'\\b(?:\\w+ed|\\w+ing|\\w+tion|\\w+ness|[a-zA-Z]{3,})\\b', text)\n    if not nouns:\n        return 0.0\n    consecutive_nouns = sum(1 for i in range(1, len(nouns)) if nouns[i].isalpha() and nouns[i - 1].isalpha())\n    return consecutive_nouns / len(nouns) if nouns else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    clauses = sum(text.count(',') + text.count('and') + text.count('but') for text in re.findall(r'[^.!?]+[.!?]', text))\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total word count.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogues in characters.\"\n    dialogues = re.findall(r'\"([^\"]*)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 3 syllables to total words.\"\n    words = re.findall(r'\\w+', text)\n    long_words = sum(1 for word in words if len(re.findall(r'[aeiouy]{3,}', word)) > 0)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 10 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per dialogue.\"\n    dialogues = re.findall(r'\"([^\"]*)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue.split()) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a specific number of clauses\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_sentences = sum(1 for sentence in sentences if len(re.findall(r',', sentence)) > 1)\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are polysyllabic (more than 3 syllables)\"\n    words = text.split()\n    if not words:\n        return 0.0\n    polysyllabic_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return polysyllabic_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r'[,]', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b(what|why|how|who|where|when)\\b.*\\?', text, re.IGNORECASE)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that end with a question mark to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words between punctuation marks\"\n    words = len(re.findall(r'\\w+', text))\n    punctuations = len(re.findall(r'[.!?]', text))\n    if punctuations == 0:\n        return 0.0\n    return words / punctuations\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    return exclamation_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences.\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', para)) for para in paragraphs)\n    return sentence_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique character usage in the text.\"\n    unique_chars = len(set(text.strip()))\n    return unique_chars / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a coordinating conjunction.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    conjunction_count = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return conjunction_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text.\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]{1,2}', word.lower()))  # A simple approximation for English\n    words = text.split()\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    compound_count = sum(1 for sentence in sentences if ',' in sentence)\n    return compound_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences with at least one dependent clause.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_count = sum(1 for sentence in sentences if ',' in sentence and 'that' in sentence)\n    return complex_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of conjunctions used per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    conjunctions = text.count('and') + text.count('but') + text.count('or')\n    return conjunctions / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of nouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    nouns = len(re.findall(r'\\b\\w+ing\\b|\\b\\w+ed\\b|\\b\\w+s\\b|\\b[a-zA-Z]+\\b', text))  # Simplistic noun detection\n    return nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of adverbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_pattern = r'\\b\\w+ly\\b'  # Simple pattern for adverbs\n    adverb_count = len(re.findall(adverb_pattern, text))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 15 words) to total sentences\"\n    sentences = text.split('.')\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions in the text\"\n    sentences = text.split('.')\n    question_sentences = sum(1 for sentence in sentences if '?' in sentence)\n    if not sentences:\n        return 0.0\n    return question_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = text.split('.')\n    total_clauses = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return total_clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-ASCII characters to total characters\"\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return non_ascii_count / total_chars\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = text.split('.')\n    total_length = sum(len(sentence) for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return total_length / len(sentences)\n", "def feature(text: str) -> float:\n    \"Count of sentences with dialogue\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of numeric tokens to total words\"\n    words = text.split()\n    numeric_count = sum(1 for word in words if word.isdigit())\n    return numeric_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clauses = sum(text.count(',') + text.count(';') + text.count('and') for text in sentences)\n    return clauses / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words based on a predefined set\"\n    common_words = set(['the', 'and', 'is', 'in', 'to', 'a', 'of', 'that', 'it', 'on'])  # Example common words\n    words = text.split()\n    uncommon_count = sum(1 for word in words if word.lower() not in common_words)\n    return uncommon_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if text else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = text.split()\n    noun_count = sum(1 for word in words if word[0].isupper())  # Basic heuristic for nouns\n    return noun_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Length of the longest sentence in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return max(len(sentence.split()) for sentence in sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain less than 3 letters\"\n    words = text.split()\n    short_words = sum(1 for word in words if len(word) < 3)\n    if not words:\n        return 0.0\n    return short_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words excluding short sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentences = [len(sentence.split()) for sentence in sentences if len(sentence.split()) >= 5]\n    if not long_sentences:\n        return 0.0\n    return sum(long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamatory sentences in the text\"\n    exclamations = text.count('!')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return exclamations / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in characters\"\n    dialogues = re.findall(r'\\\".*?\\\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-ASCII characters to total characters in the text\"\n    total_chars = len(text)\n    non_ascii_count = sum(1 for c in text if ord(c) > 127)\n    if total_chars == 0:\n        return 0.0\n    return non_ascii_count / total_chars\n\n", "def feature(text: str) -> float:\n    \"Percentage of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences shorter than 5 words\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    if not sentences:\n        return 0.0\n    return short_sentences / len(sentences)\n", "def feature(text: str) -> float:\n    \"Calculates the ratio of sentences with more than 10 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    long_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 10)\n    if sentences == 0:\n        return 0.0\n    return long_sentence_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Calculates the average number of syllables per word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word.lower())) for word in words)\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Measures the frequency of non-standard punctuation marks (like ellipses or dashes).\"\n    non_standard_punct_count = text.count('...') + text.count('-')\n    total_punct_count = len(re.findall(r'[.!?]', text)) + non_standard_punct_count\n    if total_punct_count == 0:\n        return 0.0\n    return non_standard_punct_count / total_punct_count\n\n", "def feature(text: str) -> float:\n    \"Calculates the proportion of words that are adverbs in the text.\"\n    # Simple estimation of adverbs could be based on common adverb endings.\n    adverb_count = sum(1 for word in text.split() if word.endswith('ly'))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Computes the average length of dialogue segments, indicated by quotation marks.\"\n    dialogue_segments = re.findall(r'\"(.*?)\"', text)\n    if not dialogue_segments:\n        return 0.0\n    return sum(len(segment.split()) for segment in dialogue_segments) / len(dialogue_segments)\n\n", "def feature(text: str) -> float:\n    \"Measures the frequency of negative sentiment words in the text.\"\n    negative_words = set(['not', 'no', 'never', 'none', 'neither'])\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    negative_count = sum(1 for word in text.split() if word.lower() in negative_words)\n    return negative_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Calculates the proportion of words that are first-person pronouns.\"\n    first_person_pronouns = set(['I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours'])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    first_person_count = sum(1 for word in text.split() if word.lower() in first_person_pronouns)\n    return first_person_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Measures the average sentence length by number of characters.\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(len(sentence.strip()) == 0 for sentence in sentences):\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Calculates how many words are repeated in the text.\"\n    words = text.split()\n    word_count = len(words)\n    if word_count == 0:\n        return 0.0\n    unique_word_count = len(set(words))\n    return (word_count - unique_word_count) / word_count\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    clauses = sum(sentence.count(',') + sentence.count('and') + sentence.count('or') for sentence in sentences)\n    return clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.lower().split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in the text that are multi-syllabic\"\n    words = text.split()\n    if not words:\n        return 0.0\n    multi_syllabic = sum(1 for word in words if len(re.findall(r'[aeiou]', word)) > 2)\n    return multi_syllabic / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 20 words to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are used in technical jargon or specialized terms\"\n    technical_words = {'algorithm', 'data', 'network', 'system', 'model', 'architecture', 'software', 'hardware', 'process'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    jargon_count = sum(1 for word in words if word in technical_words)\n    return jargon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions in the text\"\n    questions = len(re.findall(r'\\?', text))\n    rhetorical_questions = len(re.findall(r'\\b(aren\\'t|isn\\'t|don\\'t|won\\'t|wouldn\\'t|can\\'t)\\b', text))\n    if questions == 0:\n        return 0.0\n    return rhetorical_questions / questions\n\n", "def feature(text: str) -> float:\n    \"Proportion of imperative sentences in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    imperative_sentences = sum(1 for sentence in sentences if sentence.strip().startswith(('do', 'please', 'let', 'go', 'make')))\n    return imperative_sentences / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are imperatives in the text\"\n    words = text.split()\n    imperative_count = sum(1 for word in words if word.endswith('!'))\n    return imperative_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation marks between words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    return punctuation_count / word_count if word_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',', sentence)) + 1 for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks per paragraph\"\n    paragraphs = text.split('\\n')\n    exclamation_count = sum(s.count('!') for s in paragraphs)\n    return exclamation_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text\"\n    words = text.split()\n    adverb_list = {'quickly', 'silently', 'smoothly', 'happily', 'sadly', 'eagerly', 'bravely'}\n    adverb_count = sum(1 for word in words if word.lower() in adverb_list)\n    return adverb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of average word length to sentence length in the text\"\n    words = text.split()\n    sentences = re.split(r'[.!?]', text)\n    avg_word_length = sum(len(word) for word in words) / len(words) if words else 0.0\n    avg_sentence_length = sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n    return avg_word_length / avg_sentence_length if avg_sentence_length > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b(what|why|how|who|where)\\b.+\\?', text, re.I)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that include numbers\"\n    words = text.split()\n    number_count = sum(1 for word in words if any(char.isdigit() for char in word))\n    return number_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|and|but', sentence)) + 1 for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, focusing on lower frequencies.\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a metaphor or simile.\"\n    metaphors = re.findall(r'like|as\\s+\\w+', text)\n    sentences = re.split(r'[.!?]', text)\n    return len(metaphors) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    exclamatory_count = text.count('!')\n    sentences = re.split(r'[.!?]', text)\n    return exclamatory_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of verbs to total words in the text.\"\n    words = text.split()\n    verb_count = sum(1 for word in words if re.search(r'\\b\\w+ed\\b|\\b\\w+s\\b|\\b\\w+ing\\b', word))\n    return verb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words containing digits in the text.\"\n    digit_words = re.findall(r'\\w*\\d\\w*', text)\n    return sum(len(word) for word in digit_words) / len(digit_words) if digit_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    compound_sentences = len(re.findall(r'[,.]', text))  # Assuming compound sentences contain commas.\n    if sentences == 0:\n        return 0.0\n    return compound_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences ending with a question mark.\"\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    question_sentences = text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return question_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing passive voice.\"\n    sentences = re.findall(r'(?<!\\w)(was|were|be|been|is)[ ]{1,}[\\w ]+(?=[.!?])', text)\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return len(sentences) / total_sentences if total_sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words with a minimum length of 4.\"\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    unique_long_words = len(set(long_words))\n    if len(long_words) == 0:\n        return 0.0\n    return unique_long_words / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Count of interjections or filler words in the text.\"\n    fillers = ['uh', 'um', 'like', 'you know', 'actually']  # Example fillers\n    count = sum(text.lower().count(filler) for filler in fillers)\n    total_words = len(text.split())\n    return count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with direct address (using 'you') to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    direct_address_count = sum(1 for sentence in sentences if 'you' in sentence.lower())\n    return direct_address_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of adjectives to total words in the text.\"\n    words = text.split()\n    adjectives = [word for word in words if word.endswith('y') or word.startswith('a')]\n    return len(adjectives) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    max_length = max(len(word) for word in words)\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\".*?\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    clause_count = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if re.search(r'\\b[A-Za-z]+(ly)?\\b', word))\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that are questions\"\n    sentences = re.split(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if sentence.endswith('?'))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words\"\n    sentences = re.split(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    if len(sentences) == 0:\n        return 0.0\n    return short_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs) if len(paragraphs) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one punctuation mark to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    punctuated_sentences = len(re.findall(r'[^.!?]*[.!?][^.!?]*[.!?]', text))\n    return punctuated_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that is dialogue (enclosed in quotation marks).\"\n    dialogue_count = len(re.findall(r'\\\".*?\\\"', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    dialogue_words = sum(len(dialogue.split()) for dialogue in re.findall(r'\\\".*?\\\"', text))\n    return dialogue_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in syllables.\"\n    syllables_count = sum(len(re.findall(r'[aeiouy]+', word.lower())) for word in text.split())\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return syllables_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total words in text.\"\n    words = text.split()\n    unique_words = len(set(words))\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing non-ASCII characters to total words.\"\n    non_ascii_count = sum(1 for word in text.split() if any(ord(char) > 127 for char in word))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return non_ascii_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    dialogue_count = text.count('\"') // 2\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence in the text\"\n    adjectives = len(re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b', text))\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    if sentences == 0:\n        return 0.0\n    return adjectives / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing complex vocabulary (words > 8 characters)\"\n    complex_words = len(re.findall(r'\\b\\w{8,}\\b', text))\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    if sentences == 0:\n        return 0.0\n    return complex_words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuations (like emojis) to total characters\"\n    non_standard_punc = len(re.findall(r'[^\\w\\s.,!?;:]', text))\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return non_standard_punc / total_chars\n\n", "def feature(text: str) -> float:\n    \"Count of exclamatory sentences\"\n    exclamatory_sentences = len(re.findall(r'!', text))\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    if sentences == 0:\n        return 0.0\n    return exclamatory_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return adverbs / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique punctuation marks to total punctuation marks\"\n    unique_punctuation = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_punctuation == 0:\n        return 0.0\n    return unique_punctuation / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest substring without spaces\"\n    substrings = text.split()\n    if not substrings:\n        return 0.0\n    longest_substring_length = max(len(sub) for sub in substrings)\n    return float(longest_substring_length)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are compound (containing conjunctions)\"\n    compound_sentences = len(re.findall(r'\\b(and|but|or|so|for|nor)\\b', text))\n    sentences = len(re.findall(r'[.!?]', text)) + text.count('\\n')\n    if sentences == 0:\n        return 0.0\n    return compound_sentences / sentences\n", "def feature(text: str) -> float:\n    \"Average length of words that start with an uppercase letter.\"\n    words = text.split()\n    uppercase_words = [word for word in words if word[0].isupper()]\n    if not uppercase_words:\n        return 0.0\n    return sum(len(word) for word in uppercase_words) / len(uppercase_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain questions.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if '?' in sentence)\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words excluding very short sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = [sentence for sentence in sentences if len(sentence.split()) > 3]\n    if not long_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) >= 3)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain dialogue.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return float(dialogue_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 10 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with an adverb.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    adverbs = {'quickly', 'slowly', 'silently', 'suddenly', 'carefully', 'happily'}\n    if not sentences:\n        return 0.0\n    adverb_starting = sum(1 for sentence in sentences if sentence.split()[0].lower() in adverbs)\n    return adverb_starting / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamation_count = sum(1 for sentence in sentences if '!' in sentence)\n    return exclamation_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing direct speech to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    speech_count = sum(1 for sentence in sentences if '\"' in sentence)\n    if not sentences:\n        return 0.0\n    return float(speech_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence for sentences containing direct speech.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    speech_sentences = [sentence for sentence in sentences if '\"' in sentence]\n    if not speech_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in speech_sentences) / len(speech_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in direct speech.\"\n    speech_words = re.findall(r'\"([^\"]+)\"', text)\n    if not speech_words:\n        return 0.0\n    words = ' '.join(speech_words).split()\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words.\"\n    adverbs = set(['quickly', 'sadly', 'happily', 'silently', 'well', 'never', 'always', 'often', 'sometimes'])\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    if not words:\n        return 0.0\n    return float(adverb_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in the text that are negatively connotated.\"\n    negative_words = {'fail', 'hate', 'bore', 'useless', 'bad', 'worry', 'fear', 'doom'}\n    words = text.split()\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    if not words:\n        return 0.0\n    return float(negative_count) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    comma_count = sum(sentence.count(',') for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return float(comma_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of characters used for short dialogues (less than 10 characters).\"\n    short_dialogue = re.findall(r'\"([^\"]{1,9})\"', text)\n    character_count = sum(len(dialogue) for dialogue in short_dialogue)\n    if not text:\n        return 0.0\n    return float(character_count) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Number of unique words divided by total words.\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total number of sentences\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with more than one punctuation mark\"\n    sentences = re.findall(r'[.!?]', text)\n    multi_punct_sentences = len(re.findall(r'[^.!?]*[.!?][^.!?]*[.!?]', text))\n    if len(sentences) == 0:\n        return 0.0\n    return multi_punct_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of specific words (e.g., 'I', 'you') per total words\"\n    target_words = ['I', 'you']\n    total_words = len(text.split())\n    target_count = sum(text.lower().count(word) for word in target_words)\n    if total_words == 0:\n        return 0.0\n    return target_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{4,}\\b', text))  # At least 4 letters for consideration\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per punctuation mark\"\n    unique_words = len(set(text.split()))\n    punctuation_count = text.count('.') + text.count(',') + text.count('!') + text.count('?')\n    if punctuation_count == 0:\n        return 0.0\n    return unique_words / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words to total words in the text\"\n    total_words = len(text.split())\n    capitalized_count = sum(1 for word in text.split() if word[0].isupper())\n    if total_words == 0:\n        return 0.0\n    return capitalized_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    long_word_count = sum(1 for word in text.split() if len(word) > 10)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return long_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of syllables per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word)) for word in text.split())\n    if not sentences:\n        return 0.0\n    return syllable_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain references to emotions or feelings\"\n    emotion_words = ['love', 'hate', 'feel', 'happy', 'sad', 'angry', 'fear']\n    emotion_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if any(word in sentence.lower() for word in emotion_words))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return emotion_sentence_count / total_sentences\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph calculated using double line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Density of digit characters as a ratio to total characters.\"\n    digits_count = sum(1 for c in text if c.isdigit())\n    return digits_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to the total number of characters in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words that contain at least one vowel.\"\n    words = text.split()\n    vowel_words = [word for word in words if any(ch in 'aeiouAEIOU' for ch in word)]\n    if not vowel_words:\n        return 0.0\n    return sum(len(word) for word in vowel_words) / len(vowel_words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific interjections ('hey', 'wow', 'oh') to total words.\"\n    interjections = ['hey', 'wow', 'oh']\n    words = text.lower().split()\n    interjection_count = sum(1 for word in words if word in interjections)\n    return interjection_count / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text.\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs (ending with 'ly') to total words in the text.\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing direct quotes to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    quote_count = sum(1 for sentence in sentences if '\"' in sentence)\n    return quote_count / len(sentences) if len(sentences) > 0 else 0.0\n", "def feature(text: str) -> float:\n    'Ratio of sentences containing dialogue to total sentences in the text.'\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    'Average number of words per dialogue segment in the text.'\n    dialogue_segments = re.findall(r'\"[^\"]*\"', text)\n    if not dialogue_segments:\n        return 0.0\n    return sum(len(segment.split()) for segment in dialogue_segments) / len(dialogue_segments)\n\n", "def feature(text: str) -> float:\n    'Proportion of total punctuation marks to total characters in the text.'\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return total_punctuation / len(text)\n\n", "def feature(text: str) -> float:\n    'Average length of words that start with a vowel in the text.'\n    words_starting_with_vowels = [word for word in text.split() if word[0].lower() in 'aeiou']\n    if not words_starting_with_vowels:\n        return 0.0\n    return sum(len(word) for word in words_starting_with_vowels) / len(words_starting_with_vowels)\n\n", "def feature(text: str) -> float:\n    'Proportion of capitalized words to total words in the text.'\n    words = text.split()\n    capitalized_words = sum(1 for word in words if word[0].isupper())\n    if len(words) == 0:\n        return 0.0\n    return capitalized_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Count of sentences that contain an exclamation mark.'\n    sentences = re.split(r'[.!?]', text)\n    exclamation_sentences = sum(1 for sentence in sentences if '!' in sentence)\n    return exclamation_sentences\n\n", "def feature(text: str) -> float:\n    'Ratio of long words (more than 7 letters) to total words in the text.'\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Average number of clauses per sentence in the text.'\n    sentences = re.split(r'[.!?]', text)\n    total_clauses = sum(len(re.findall(r',', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return total_clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in terms of word count\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_len = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - avg_len) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Proportion of hyphenated words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    hyphenated_count = sum(1 for word in words if '-' in word)\n    return hyphenated_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    compound_count = sum(1 for word in words if len(re.findall(r'\\w+-\\w+', word)) > 0)\n    return compound_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rare words to total words in the text based on a predefined list\"\n    rare_words = {'sagacious', 'impecunious', 'vorfreude', 'sonder', 'psithurism'}  # Example rare words\n    words = text.split()\n    if not words:\n        return 0.0\n    rare_count = sum(1 for word in words if word.lower() in rare_words)\n    return rare_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words used in paragraphs\"\n    paragraphs = text.split('\\n')\n    word_sets = [set(p.split()) for p in paragraphs if p.strip()]\n    if not word_sets:\n        return 0.0\n    unique_counts = [len(words) for words in word_sets]\n    return sum(unique_counts) / len(unique_counts)\n\n", "def feature(text: str) -> float:\n    \"Proportion of imperative sentences to total sentences in the text\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    imperative_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith('please'))\n    return imperative_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words that are uncapitalized and follow a punctuation mark\"\n    words = text.split()\n    if not words:\n        return 0.0\n    count = sum(1 for i in range(1, len(words)) if words[i-1].endswith(('.', '!', '?')) and words[i][0].islower())\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in the text.\"\n    dialogues = re.findall(r'\\\".*?\\\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Count of unique dialogue characters in the text.\"\n    dialogues = re.findall(r'\\\".*?\\\"', text)\n    characters = set(re.findall(r'\\b\\w+\\b', ' '.join(dialogues)))\n    return float(len(characters))\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    sentences = len(re.findall(r'[^.!?]*[.!?]', text))\n    exclamatory = text.count('!')\n    return exclamatory / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    adjectives_count = len(re.findall(r'\\b\\w+ly|\\b\\w+(?:al|ful|ic|ous|ive|able)\\b', text))\n    return adjectives_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than 20 words) to total sentences.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    complex_sentences = len([s for s in sentences if len(s.split()) > 20])\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences starting with a conjunction.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    conjunctions = len([s for s in sentences if s.strip().startswith(('and', 'but', 'or', 'nor', 'for', 'so', 'yet'))])\n    return conjunctions / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clauses_count = sum(text.count(',') + text.count(';') for text in sentences)\n    return clauses_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words that are directly followed by punctuation.\"\n    words = re.findall(r'\\b\\w+\\b[^\\w\\s]', text)\n    return float(len(words))\n", "def feature(text: str) -> float:\n    \"Ratio of words that are contractions to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    contractions = sum(1 for word in words if \"'\" in word)\n    return contractions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of fragments of dialogue in the text.\"\n    dialogue_segments = len(re.findall(r'\".+?\"', text))\n    return float(dialogue_segments)\n\n", "def feature(text: str) -> float:\n    \"Proportion of short sentences (less than 5 words) to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words that show emotional expression (positive/negative).\"\n    emotional_words = set(['love', 'hate', 'happy', 'sad', 'angry', 'joy', 'fear', 'surprise'])\n    words = text.lower().split()\n    count = sum(1 for word in words if word in emotional_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 20 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    punctuation_count = sum(text.count(p) for p in ['.', '!', '?']) \n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words ending with 'ing' to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ing_words = sum(1 for word in words if word.endswith('ing'))\n    return ing_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = text.lower().split()\n    unique_words = len(set(words))\n    return float(unique_words)\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(s.split()) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions in the text.\"\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    question_sentences = len(re.findall(r'\\?+', text))\n    if total_sentences == 0:\n        return 0.0\n    return question_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text.\"\n    return float(text.count('!'))\n\n", "def feature(text: str) -> float:\n    \"Count of dialogue segments in the text.\"\n    return float(len(re.findall(r'\".+?\"', text)))\n\n", "def feature(text: str) -> float:\n    \"Average word length of dialogue segments in the text.\"\n    dialogue_segments = re.findall(r'\".+?\"', text)\n    if not dialogue_segments:\n        return 0.0\n    words = [word for segment in dialogue_segments for word in segment.strip('\"').split()]\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 7 characters to total words.\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of proper nouns to total words in the text\"\n    words = text.split()\n    proper_nouns = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return proper_nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain onomatopoeia\"\n    onomatopoeia_list = ['bang', 'boom', 'splash', 'buzz', 'whisper', 'crash', 'clang']  # Example list\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    onomatopoeia_count = sum(1 for sentence in sentences if any(word in sentence.lower() for word in onomatopoeia_list))\n    if len(sentences) == 0:\n        return 0.0\n    return onomatopoeia_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of quotes in the text\"\n    quotes = re.findall(r'\\\"(.*?)\\\"', text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Distinctiveness score based on the use of uncommon adjectives\"\n    common_adjectives = set(['good', 'bad', 'big', 'small', 'happy', 'sad'])  # Example set\n    adjectives = [word for word in text.split() if word.lower() in common_adjectives]\n    if len(text.split()) == 0:\n        return 0.0\n    return 1.0 - (len(adjectives) / len(text.split()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sensory descriptive words to total words in the text\"\n    sensory_words = ['see', 'hear', 'smell', 'taste', 'touch', 'feel']  # Example list\n    words = text.split()\n    sensory_word_count = sum(1 for word in words if word in sensory_words)\n    if len(words) == 0:\n        return 0.0\n    return sensory_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamatory sentences divided by total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    exclamatory_count = sum(1 for sentence in sentences if sentence.strip().endswith('!'))\n    if len(sentences) == 0:\n        return 0.0\n    return exclamatory_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    words = text.split()\n    dialogue = text.count('\"')\n    if len(words) == 0:\n        return 0.0\n    return dialogue / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    if len(words) == 0:\n        return 0.0\n    return contractions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that end with a question mark\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    question_sentences = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return question_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Number of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total words in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return punctuation_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 10 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 10)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    capitalized = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return capitalized / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are transitions or discourse markers.\"\n    transition_words = ['however', 'therefore', 'meanwhile', 'furthermore', 'additionally', 'consequently']\n    words = text.split()\n    if not words:\n        return 0.0\n    transition_count = sum(1 for word in words if word.lower() in transition_words)\n    return transition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain emotion-laden language.\"\n    emotion_words = [r'\\b(happy|sad|angry|love|hate|fear|joy|dislike|enjoy)\\b']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotion_count = sum(1 for sentence in sentences if re.search(emotion_words[0], sentence, re.IGNORECASE))\n    return emotion_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    punctuation_count = sum(sum(1 for char in sentence if not char.isalnum() and not char.isspace()) for sentence in sentences)\n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that include a narrative element.\"\n    narrative_words = [r'\\b(I|we|he|she|they|us)\\b']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    narrative_count = sum(1 for sentence in sentences if re.search(narrative_words[0], sentence, re.IGNORECASE))\n    return narrative_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length calculated by number of clauses.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Density of unique sentence starters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    unique_starters = set(sentence.strip().split()[0] for sentence in sentences if sentence.strip())\n    return len(unique_starters) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text.\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiou')  # Simple syllable count approximation\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words, excluding very short ones\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 3]\n    if not long_sentences:\n        return 0.0\n    return sum(len(s.split()) for s in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    adverbs = len([w for w in words if w.endswith('ly')])\n    if len(words) == 0:\n        return 0.0\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs to total sentences in the text\"\n    paragraphs = text.count('\\n') + 1\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return paragraphs / sentences\n\n", "def feature(text: str) -> float:\n    \"Average word length in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 10 letters to total words in the text\"\n    words = text.split()\n    long_words = sum(1 for w in words if len(w) > 10)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+', text)\n    clause_count = sum(len(re.findall(r',|;', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clause_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of total punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return float(long_sentence_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word.istitle())\n    if len(words) == 0:\n        return 0.0\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 5 letters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 5)\n    if len(words) == 0:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of dialogue sentences in the text\"\n    dialogue_sentences = re.findall(r'\\\".*?\\\"', text)\n    total_sentences = len(re.findall(r'[^.!?]+[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(dialogue_sentences) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue lines in the text.\"\n    dialogue_lines = re.findall(r'\\\".*?\\\"', text)\n    if not dialogue_lines:\n        return 0.0\n    return sum(len(line) for line in dialogue_lines) / len(dialogue_lines)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing at least one action or descriptor verb.\"\n    action_verbs = re.findall(r'\\b(look|see|find|finish|have|get|make|take|give|go|do)\\b', text, re.IGNORECASE)\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(action_verbs) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of uncommon words compared to a common word list.\"\n    common_words = set(['the', 'is', 'in', 'at', 'of', 'and', 'to', 'a', 'that', 'it', 'on', 'for', 'as', 'by', 'this'])\n    words = text.split()\n    uncommon_word_count = sum(1 for word in words if word.lower() not in common_words and word.isalpha())\n    return float(uncommon_word_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of parenthetical phrases per sentence.\"\n    parenthetical_phrases = re.findall(r'\\(.*?\\)', text)\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(parenthetical_phrases) / sentences\n\n", "def feature(text: str) -> float:\n    \"Percentage of sentences that include interruptions or incomplete thoughts (e.g., dashes).\"\n    interrupted_sentences = len(re.findall(r'[.?!]-', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return interrupted_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of interjections (e.g., 'wow', 'hey', 'oh') to total words.\"\n    interjections = re.findall(r'\\b(wow|hey|oh|ouch|whoa)\\b', text, re.IGNORECASE)\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return len(interjections) / words\n\n", "def feature(text: str) -> float:\n    \"Average number of different types of punctuation marks per sentence.\"\n    punctuation_marks = re.findall(r'[.,!?;:]', text)\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(punctuation_marks) / sentences\n", "def feature(text: str) -> float:\n    \"Ratio of emotional words to total words in the text\"\n    emotional_words = re.findall(r'\\b(happy|sad|angry|joy|fear|love|hate|surprised|disgust)\\b', text, re.IGNORECASE)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(emotional_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences that contain at least one exclamatory phrase\"\n    sentences = re.split(r'[.!?]', text)\n    exclamatory_sentences = sum(1 for s in sentences if '!' in s)\n    if len(sentences) == 0:\n        return 0.0\n    return exclamatory_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain non-standard sentence structures (e.g., unusual punctuation)\"\n    non_standard_sentences = len(re.findall(r'[!@#$%^&*()-_=+\\[\\]{};:\\'\",<>./?]+', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return non_standard_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Number of rhetorical questions in the text\"\n    rhetorical_questions = len(re.findall(r'(?i)\\b(isn\\'t?|aren\\'t?|don\\'t?|won\\'t?|can\\'t?)\\b', text))\n    return float(rhetorical_questions)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of adverbs in the text\"\n    adverbs = re.findall(r'\\b(\\w+ly)\\b', text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(adverbs) / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than one clause) to total sentences\"\n    complex_sentences = len(re.findall(r',', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return complex_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of first-person pronouns to total words in the text\"\n    first_person_pronouns = re.findall(r'\\b(I|me|my|mine|we|us|our|ours)\\b', text, re.IGNORECASE)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(first_person_pronouns) / total_words\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'})\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing an emotion word to total sentences\"\n    emotion_words = {'happy', 'sad', 'angry', 'excited', 'fear', 'love', 'hate'}\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotion_count = sum(1 for sentence in sentences if any(word in emotion_words for word in sentence.split()))\n    return emotion_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of informal contractions (e.g., can't, won't) to total words\"\n    contractions = {'can\\'t', 'won\\'t', 'don\\'t', 'isn\\'t', 'aren\\'t', 'wasn\\'t', 'you\\'re', 'they\\'re', 'it\\'s'}\n    words = text.split()\n    if not words:\n        return 0.0\n    contraction_count = sum(1 for word in words if word in contractions)\n    return contraction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use dialogue to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_count = sum(1 for sentence in sentences if '\"' in sentence or \"'\" in sentence)\n    return dialogue_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than one clause to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_sentences = sum(1 for sentence in sentences if ',' in sentence)\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with varying punctuation marks to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    varied_punct_count = sum(1 for sentence in sentences if len(set(c for c in sentence if not c.isalnum() and not c.isspace())) > 1)\n    return varied_punct_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_count = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return dialogue_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique dialogue words to total words in the text.\"\n    words = text.split()\n    dialogues = re.findall(r'\"(.*?)\"', text)\n    dialogue_words = set(word for dialogue in dialogues for word in dialogue.split())\n    if len(words) == 0:\n        return 0.0\n    return len(dialogue_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of unique sentences in the text.\"\n    unique_sentences = set(re.findall(r'[^.!?]+', text.strip()))\n    return float(len(unique_sentences))\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.split(r'[.!?]+', text)\n    comma_count = text.count(',')\n    if len(sentences) == 0:\n        return 0.0\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use conditional statements.\"\n    sentences = re.split(r'[.!?]+', text)\n    conditional_count = sum(1 for s in sentences if 'if ' in s)\n    if len(sentences) == 0:\n        return 0.0\n    return conditional_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.split(r'[.!?]+', text)\n    adjectives_count = sum(len(re.findall(r'\\b\\w+ly\\b', s)) for s in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return adjectives_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing at least one exclamation mark.\"\n    sentences = re.split(r'[.!?]+', text)\n    exclamation_count = sum(1 for s in sentences if '!' in s)\n    if len(sentences) == 0:\n        return 0.0\n    return exclamation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one clause.\"\n    sentences = re.split(r'[.!?]+', text)\n    clause_count = sum(s.count(',') + s.count('and') + s.count('but') for s in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clause_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences in the text.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue = text.count('\"') // 2  # Assuming dialogue is enclosed in quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with emotional language (e.g., joy, anger).\"\n    emotional_words = {'groovy', 'angry', 'bloody', 'despair', 'nervous'}\n    sentences = len(re.findall(r'[.!?]', text))\n    emotional_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if any(word in sentence.lower() for word in emotional_words))\n    if sentences == 0:\n        return 0.0\n    return emotional_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text.\"\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of whimsical words (e.g., groovy, dork) to total words.\"\n    whimsical_words = {'groovy', 'dork', 'bloody', 'loser'}\n    total_words = len(text.split())\n    whimsical_count = sum(1 for word in text.split() if word.lower() in whimsical_words)\n    if total_words == 0:\n        return 0.0\n    return whimsical_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of words that are dialogue.\"\n    dialogue_words = [word.strip('\"') for word in re.findall(r'\"(.*?)\"', text)]\n    if not dialogue_words:\n        return 0.0\n    return sum(len(word) for word in dialogue_words) / len(dialogue_words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that start with an interjection (e.g., 'Oh', 'Wow').\"\n    interjections = {'oh', 'wow', 'hey', 'oops'}\n    sentences = re.split(r'[.!?]', text)\n    interjection_count = sum(1 for sentence in sentences if sentence.strip() and any(sentence.lower().startswith(i) for i in interjections))\n    return float(interjection_count)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence lengths in words.\"\n    sentences = [sentence.split() for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentences:\n        return 0.0\n    lengths = [len(sentence) for sentence in sentences]\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / len(lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that involve dialogue.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if '\"' in sentence)\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, adjusted for common phrases.\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence in the text.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / sentence_count if sentence_count else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    dialogue_sentences = sum(1 for s in sentences if '\"' in s)\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average word length of words that are longer than 5 characters.\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 5]\n    return sum(len(word) for word in long_words) / len(long_words) if long_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words.\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))  # complex words (4+ letters, assuming at least one syllable).\n    total_word_count = len(text.split())\n    return complex_word_count / total_word_count if total_word_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words in sentences containing dialogue.\"\n    sentences_with_dialogue = [s for s in re.split(r'[.!?]', text) if '\"' in s]\n    word_counts = [len(s.split()) for s in sentences_with_dialogue]\n    return sum(word_counts) / len(word_counts) if word_counts else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain more than one punctuation mark to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    multi_punctuation_sentences = sum(1 for s in sentences if sum(c in s for c in ['.', '!', '?']) > 1)\n    return multi_punctuation_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions (questions that imply answers) as a ratio to total questions.\"\n    rhetorical_question_count = len(re.findall(r'\\bWhat\\b.*\\?', text)) + len(re.findall(r'\\bWhy\\b.*\\?', text))\n    total_questions = text.count('?')\n    return rhetorical_question_count / total_questions if total_questions > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words in sentences longer than 10 words.\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 10]\n    return sum(len(s.split()) for s in long_sentences) / len(long_sentences) if long_sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph in the text.\"\n    paragraphs = text.split('\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    if not paragraphs or sentence_count == 0:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain exclamatory expressions.\"\n    sentences = re.findall(r'[.!?]', text)\n    exclamatory_count = text.count('!')\n    if not sentences:\n        return 0.0\n    return exclamatory_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of interjections to total words in the text.\"\n    interjections = re.findall(r'\\b(wow|ouch|oops|yay)\\b', text.lower())\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return len(interjections) / words\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 15 words) to total sentences in the text.\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard words (slang, made-up) to total words in the text.\"\n    non_standard_words = re.findall(r'\\b(yeet|lit|fam|hangry|binge-watch)\\b', text.lower())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(non_standard_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with emotional connotations to total words in the text.\"\n    emotional_words = re.findall(r'\\b(happy|sad|excited|angry|love|hate)\\b', text.lower())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(emotional_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of technical jargon or domain-specific vocabulary to total words in the text.\"\n    technical_words = re.findall(r'\\b(database|algorithm|circuit|compile|syntax)\\b', text.lower())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(technical_words) / total_words\n", "def feature(text: str) -> float:\n    \"Ratio of words that are longer than 10 characters to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that have more than 20 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences_count = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return long_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue exchanges in the text\"\n    dialogues = re.findall(r'\"(.*?)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue.split()) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuation (like emojis, symbols) to total characters in the text\"\n    non_standard_count = sum(1 for c in text if not c.isalnum() and not c.isspace() and c not in '.,!?')\n    if len(text) == 0:\n        return 0.0\n    return non_standard_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain an emotional word\"\n    emotional_words = {'happy', 'sad', 'love', 'hate', 'angry', 'excited', 'fear', 'joy', 'disgust'}\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotional_sentence_count = sum(1 for sentence in sentences if any(word in emotional_words for word in sentence.split()))\n    return emotional_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text\"\n    words = text.split()\n    adverbs = {'quickly', 'slowly', 'very', 'extremely', 'well', 'badly', 'often', 'never'}\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = list(set(text.split()))\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of words that are at least six letters long to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) >= 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    # Sample method for estimating syllables based on vowels\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU') or 1  # At least one syllable\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one punctuation mark\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    multi_punctuation_sentences = len(re.findall(r'[^.!?]*[.!?][^.!?]*[.!?]', text))\n    return multi_punctuation_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on newline characters\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are longer than 12 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 12)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average count of exclamation marks per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamations = text.count('!')\n    return exclamations / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that include numbers to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    numeric_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return numeric_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph based on newline characters\"\n    paragraphs = text.strip().split('\\n')\n    if not paragraphs:\n        return 0.0\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    return word_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences.\"\n    paragraphs = text.split('\\n')\n    sentence_counts = [len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs]\n    if not sentence_counts:\n        return 0.0\n    return sum(sentence_counts) / len(sentence_counts)\n\n", "def feature(text: str) -> float:\n    \"Proportion of very short sentences (less than 5 words) to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    short_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    words = text.split()\n    unique_word_count = len(set(words))\n    if not sentences:\n        return 0.0\n    return unique_word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total punctuation marks.\"\n    exclamation_count = text.count('!')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Average length of longest sentence in the text.\"\n    sentences = re.split(r'[.!?]+', text)\n    if not sentences:\n        return 0.0\n    longest_sentence_length = max(len(sentence.split()) for sentence in sentences if sentence)\n    return longest_sentence_length\n\n", "def feature(text: str) -> float:\n    \"Average number of words in dialogue segments.\"\n    dialogues = re.findall(r'\\\"(.*?)\\\"', text)\n    if not dialogues:\n        return 0.0\n    words_in_dialogue = sum(len(dialogue.split()) for dialogue in dialogues)\n    return words_in_dialogue / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Average character length of all words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    character_count = sum(len(word) for word in words)\n    return character_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of words ending with -ing to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ing_count = sum(1 for word in words if word.endswith('ing'))\n    return ing_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of quoted sentences in the text.\"\n    quoted_sentences = re.findall(r'\"(.*?)\"', text)\n    if not quoted_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in quoted_sentences) / len(quoted_sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of exclamation marks per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    exclamation_count = text.count('!')\n    return exclamation_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words.\"\n    words = text.split()\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return len(adverbs) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words that start with capital letters.\"\n    words = text.split()\n    capitalized_words = {word for word in words if word[0].isupper()}\n    return len(capitalized_words) / len(set(words)) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of emotive words to total words.\"\n    emotive_words = {'joy', 'sad', 'anger', 'happiness', 'love', 'fear', 'hate'}  # Sample list; can be expanded\n    words = text.lower().split()\n    emotive_count = sum(1 for word in words if word in emotive_words)\n    return emotive_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that contain non-alphabetic characters.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    non_alpha_count = sum(1 for word in words if any(not c.isalpha() for c in word))\n    return non_alpha_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average punctuation marks per sentence.\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a dialogue tag.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_tag_count = sum(1 for s in sentences if 'said' in s.lower() or 'asked' in s.lower() or 'replied' in s.lower())\n    return dialogue_tag_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue sentences in words.\"\n    dialogue_sentences = re.findall(r'\"([^\"]+)\"', text)\n    if not dialogue_sentences:\n        return 0.0\n    return sum(len(s.split()) for s in dialogue_sentences) / len(dialogue_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 10 words.\"\n    sentences = text.split('.')\n    long_sentence_count = sum(1 for s in sentences if len(s.split()) > 10)\n    return long_sentence_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(s.count(',') + s.count('and') + s.count('but') for s in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are part of common slang phrases.\"\n    common_slang = {'gonna', 'wanna', 'gotta', 'ain\\'t', 'y\\'all'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    slang_count = sum(1 for word in words if word in common_slang)\n    return slang_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing 'ly' at the end to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ly_count = sum(1 for word in words if word.endswith('ly'))\n    return ly_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that begin with an emotion.\"\n\n    emotion_starters = {'I feel', 'I think', 'I remember', 'I notice', 'I believe'}\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    emotion_start_count = sum(1 for s in sentences if any(s.strip().startswith(emotion) for emotion in emotion_starters))\n    return emotion_start_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of words that are verbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.lower() in {'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'do', 'does', 'did'})  # Simple verb set\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Mean length of dialogue segments in characters\"\n    dialogues = re.findall(r'\"(.*?)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(d) for d in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = {'and', 'but', 'or', 'for', 'nor', 'so', 'yet'}\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases in each sentence\"\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    if not sentences:\n        return 0.0\n    phrases_count = sum(len(re.findall(r'[,]', s)) + 1 for s in sentences)  # Count commas as phrase delimiters\n    return phrases_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of personal pronouns to total words in the text\"\n    personal_pronouns = {'I', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'we', 'us', 'our', 'they', 'them', 'their'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    pronoun_count = sum(1 for word in words if word in personal_pronouns)\n    return pronoun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Density of non-standard phrases (slang, idioms) in the text\"\n    non_standard_phrases = {'check out', 'groovy', 'loser', 'fucking', 'lost track'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    phrase_count = sum(1 for word in words if word in non_standard_phrases)\n    return phrase_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    words = re.findall(r'\\w+', text)\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    if not sentences:\n        return 0.0\n    adjectives = {'good', 'bad', 'happy', 'sad', 'big', 'small', 'interesting', 'boring', 'beautiful', 'ugly'}  # Simple adjective set\n    adjective_count = sum(1 for word in words if word.lower() in adjectives)\n    return adjective_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of numbers to total words in the text\"\n    words = text.split()\n    return sum(1 for word in words if word.isdigit()) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs to total words in the text\"\n    adverb_list = {'quickly', 'silently', 'happily', 'sadly', 'angrily', 'quietly', 'eagerly'}  # Sample adverbs\n    words = text.split()\n    return sum(1 for word in words if word in adverb_list) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of ambiguous pronouns (he, she, they) to total words in the text\"\n    ambiguous_pronouns = {'he', 'she', 'they'}\n    words = text.lower().split()\n    return sum(1 for word in words if word in ambiguous_pronouns) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    def syllable_count(word):\n        return sum(1 for char in word if char in 'aeiou')\n    words = text.split()\n    return sum(syllable_count(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing exclamations in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    exclamatory_sentences = len(re.findall(r'!', text))\n    return exclamatory_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Difference in character count between the longest and shortest sentence in the text\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.strip()) for sentence in sentences if sentence.strip()]\n    return max(sentence_lengths) - min(sentence_lengths) if sentence_lengths else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing metaphors to total sentences in the text\"\n    metaphor_keywords = {'like', 'as', 'is', 'were'}  # Sample keywords suggesting metaphorical language\n    sentences = re.split(r'[.!?]', text)\n    metaphorical_sentences = sum(1 for sentence in sentences if any(word in sentence for word in metaphor_keywords))\n    return metaphorical_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence in the text\"\n    sentences = re.split(r'[.!?]', text)\n    adjectives = ['happy', 'sad', 'blue', 'bright', 'dark']  # Sample adjectives\n    adjective_count = sum(sum(1 for word in sentence.split() if word in adjectives) for sentence in sentences)\n    return adjective_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text.\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    dialogue_count = text.count('\"') // 2  # Each dialogue pair is enclosed in quotes\n    return dialogue_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of phrases enclosed in quotations.\"\n    quoted_phrases = re.findall(r'\"(.*?)\"', text)\n    if not quoted_phrases:\n        return 0.0\n    return sum(len(phrase.split()) for phrase in quoted_phrases) / len(quoted_phrases)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters in the text.\"\n    unique_chars = len(set(text))\n    total_chars = len(text)\n    if total_chars == 0:\n        return 0.0\n    return unique_chars / total_chars\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text.\"\n    adverbs = [word for word in text.split() if word.endswith('ly')]\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(adverbs) / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence in the text.\"\n    sentences = re.split(r'[.!?]', text)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    adjectives_count = sum(1 for sentence in sentences for word in sentence.split() if word.endswith('y'))\n    return adjectives_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Percentage of words containing numbers in the text.\"\n    words = text.split()\n    numeric_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    if len(words) == 0:\n        return 0.0\n    return numeric_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence with more than 5 words.\"\n    sentences = text.split('. ')\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences if len(sentence.split()) > 5)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 5)\n    if long_sentences == 0:\n        return 0.0\n    return clause_count / long_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in the text that are proper nouns.\"\n    proper_nouns = [word for word in text.split() if word[0].isupper()]\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(proper_nouns) / total_words\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that are longer than 20 words to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    if sentences == 0:\n        return 0.0\n    return long_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if sentences == 0:\n        return 0.0\n    return punctuation_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one adjective.\"\n    sentences = re.split(r'[.!?]', text)\n    adjective_sentences = len([s for s in sentences if any(word.endswith('y') for word in s.split())])\n    if len(sentences) == 0:\n        return 0.0\n    return adjective_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of words that contain non-alphabetic characters.\"\n    words = text.split()\n    non_alpha_words = [word for word in words if not word.isalpha()]\n    if not non_alpha_words:\n        return 0.0\n    return sum(len(word) for word in non_alpha_words) / len(non_alpha_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words in texts containing contractions.\"\n    words = text.split()\n    contraction_count = sum(1 for word in words if \"'\" in word)\n    unique_words = len(set(words))\n    if unique_words == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions to total questions in the text.\"\n    total_questions = len(re.findall(r'\\?', text))\n    rhetorical_questions = len(re.findall(r'\\b(should|could|would|might)\\b', text))\n    if total_questions == 0:\n        return 0.0\n    return rhetorical_questions / total_questions\n\n", "def feature(text: str) -> float:\n    \"Count of unique first words in each sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    first_words = {s.strip().split()[0].lower() for s in sentences if s.strip()}\n    return len(first_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one metaphor or simile.\"\n    metaphor_count = len(re.findall(r'\\b(as (?:\\w+\\s+)?\\w+ as|like)\\b', text, re.IGNORECASE))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return metaphor_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average length of words that are verbs in the text.\"\n    verbs = [word for word in text.split() if re.search(r'\\b(?:is|are|was|were|be|being|been|have|has|had|do|does|did|can|could|will|would|shall|should|may|might|must)\\b', word, re.IGNORECASE)]\n    if not verbs:\n        return 0.0\n    return sum(len(verb) for verb in verbs) / len(verbs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of repeated phrases (two consecutive identical phrases) to total phrases.\"\n    phrases = re.findall(r'\\b\\w+(?:\\s+\\w+){0,5}\\b', text)\n    repeated_count = sum(1 for i in range(1, len(phrases)) if phrases[i] == phrases[i - 1])\n    if not phrases:\n        return 0.0\n    return repeated_count / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Count of unique idiomatic expressions in the text.\"\n    idioms = re.findall(r'\\b(once in a blue moon|break the ice|hit the nail on the head|spill the beans|costs an arm and a leg)\\b', text, re.IGNORECASE)\n    return float(len(set(idioms)))\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs to total words in the text.\"\n    words = text.split()\n    adverbs = len([word for word in words if re.search(r'\\w+ly\\b', word)])\n    if not words:\n        return 0.0\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with emotional tones to total sentences.\"\n    emotional_sentences = len(re.findall(r'\\b(happy|sad|angry|excited|confused|frustrated)\\b', text, re.IGNORECASE))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return emotional_sentences / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of direct addresses (e.g., 'you', 'hey' followed by a name).\"\n    addresses = len(re.findall(r'\\b(hey|you)\\s+[A-Z][a-z]*\\b', text))\n    return float(addresses)\n\n", "def feature(text: str) -> float:\n    \"Proportion of verbs that are in the passive voice.\"\n    passive_voice_count = len(re.findall(r'\\bwas\\s+\\w+ed\\b', text, re.IGNORECASE))\n    words = text.split()\n    if not words:\n        return 0.0\n    return passive_voice_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (containing at least one subordinate clause) to total sentences.\"\n    complex_sentences = len(re.findall(r'\\b(?:although|because|since|unless|if)\\b', text))\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return complex_sentences / sentence_count\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing conjunctions to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunction_sentences = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return conjunction_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    # A basic list of common adverbs for demonstration\n    adverbs = {'quickly', 'slowly', 'happily', 'sadly', 'very', 'really', 'well', 'often', 'never'}\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words that are more than 7 characters long\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = {word for word in words if len(word) > 7}\n    return len(long_words) / len(set(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of first-person pronouns to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    first_person_pronouns = {'I', 'me', 'my', 'mine', 'we', 'us', 'our', 'ours'}\n    pronoun_count = sum(1 for word in words if word.lower() in first_person_pronouns)\n    return pronoun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of question marks per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = text.count('?')\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of emotional words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    # Example list of common emotional words\n    emotional_words = {'happy', 'sad', 'angry', 'excited', 'scared', 'joyful', 'depressed'}\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return emotional_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than one clause) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_count = sum(1 for sentence in sentences if sentence.count(',') > 1)  # More than one clause\n    return complex_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words, considering only longer sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = [s for s in sentences if len(s.split()) > 5]\n    if not long_sentences:\n        return 0.0\n    return sum(len(s.split()) for s in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Punctuation density in the text.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    words = text.split()\n    complex_words = len([word for word in words if len(re.findall(r'[aeiouy]{3,}', word.lower())) > 0])\n    return complex_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for s in sentences if len(s.split()) < 5)\n    return short_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    adverb_count = len([word for word in words if word.endswith('ly')])\n    return adverb_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clauses_count = sum(len(re.findall(r',|;', s)) + 1 for s in sentences)\n    return clauses_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters\"\n    if len(text) == 0:\n        return 0.0\n    return sum(1 for c in text if not c.isalnum()) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use passive voice\"\n    passive_voice_pattern = r'\\b(is|are|was|were|be|being|been)\\s+\\w+ed\\b'\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    passive_count = len(re.findall(passive_voice_pattern, text))\n    return passive_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    adjectives = len(re.findall(r'\\b\\w+ly\\b|\\b(?:a|an|the) \\w+\\b', text))\n    return adjectives / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with complex punctuation\"\n    complex_punctuation_count = len(re.findall(r'[;:(){}\\[\\]]', text))\n    sentence_count = len(re.findall(r'[.!?]', text)) + 1\n    if sentence_count == 0:\n        return 0.0\n    return complex_punctuation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in words\"\n    dialogues = re.findall(r'\\\"(.*?)\\\"', text) + re.findall(r'\\'(.*?)\\'', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue.split()) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one instance of alliteration\"\n    alliterative_pattern = r'\\b(\\w)\\1\\w*\\s+\\1\\w*'\n    alliterative_count = len(re.findall(alliterative_pattern, text))\n    sentence_count = len(re.findall(r'[.!?]', text)) + 1\n    if sentence_count == 0:\n        return 0.0\n    return alliterative_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    rhetorical_question_pattern = r'\\b(?:is|are|do|does|did)\\s+\\w+\\?'\n    rhetorical_count = len(re.findall(rhetorical_question_pattern, text))\n    sentence_count = len(re.findall(r'[.!?]', text)) + 1\n    if sentence_count == 0:\n        return 0.0\n    return rhetorical_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of verbs per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    verb_count = len(re.findall(r'\\b\\w+(ed|ing)\\b', text))  # Simplified verb pattern\n    return verb_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverb_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of narrative sentences (contain main actions) to total sentences\"\n    narrative_pattern = r'\\b(is|are|was|were|seems|look|sounds|tastes|feels|smells|be|become)\\b'\n    sentences = len(re.findall(r'[.!?]', text))\n    narrative_sentences = len(re.findall(narrative_pattern, text))\n    if sentences == 0:\n        return 0.0\n    return narrative_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters, excluding punctuation\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    length_without_punct = sum(len(re.sub(r'[.!?]', '', sentence).strip()) for sentence in text.split('.') if sentence)\n    return length_without_punct / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of total characters that are whitespace\"\n    total_chars = len(text)\n    whitespace_chars = sum(1 for c in text if c.isspace())\n    if total_chars == 0:\n        return 0.0\n    return whitespace_chars / total_chars\n\n", "def feature(text: str) -> float:\n    \"Average length of words in complex sentences (more than 15 words)\"\n    complex_sentences = [sentence for sentence in text.split('.') if len(sentence.split()) > 15]\n    if not complex_sentences:\n        return 0.0\n    total_length = sum(len(word) for sentence in complex_sentences for word in sentence.split())\n    total_words = sum(len(sentence.split()) for sentence in complex_sentences)\n    return total_length / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of direct speech to total number of sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    direct_speech = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return direct_speech / sentences\n\n", "def feature(text: str) -> float:\n    \"Variation in average word length across sentences\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    avg_lengths = [sum(len(word) for word in sentence.split()) / len(sentence.split()) if len(sentence.split()) > 0 else 0 for sentence in sentences]\n    return max(avg_lengths) - min(avg_lengths) if avg_lengths else 0.0\n", "def feature(text: str) -> float:\n    \"Average sentence length in words for sentences without conjunctions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    filtered_sentences = [s for s in sentences if 'and' not in s and 'but' not in s]\n    if not filtered_sentences:\n        return 0.0\n    total_words = sum(len(s.split()) for s in filtered_sentences)\n    return total_words / len(filtered_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing emotional words to total sentences\"\n    emotional_words = set(['love', 'hate', 'happy', 'sad', 'angry', 'excited'])\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    emotional_sentence_count = sum(1 for s in sentences if any(word in s.lower() for word in emotional_words))\n    if not sentences:\n        return 0.0\n    return emotional_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a pronoun\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    pronouns = {'I', 'you', 'he', 'she', 'it', 'we', 'they'}\n    pronoun_sentences = sum(1 for s in sentences if s.strip().split()[0].capitalize() in pronouns)\n    if not sentences:\n        return 0.0\n    return pronoun_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clause_count = sum(s.count(',') + s.count('and') + s.count(';') for s in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text\"\n    adverbs = set(['quickly', 'quietly', 'happily', 'sadly', 'softly', 'loudly'])\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    sentence_lengths = [len(s.split()) for s in sentences]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 10 words to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentence_count = sum(1 for s in sentences if len(s.split()) > 10)\n    if not sentences:\n        return 0.0\n    return long_sentence_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of words that are split into hyphenated forms to total words\"\n    words = text.split()\n    hyphenated_words = sum(1 for word in words if '-' in word)\n    if len(words) == 0:\n        return 0.0\n    return hyphenated_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with a question mark\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of words that contain at least one vowel\"\n    words = text.split()\n    vowel_words = [word for word in words if any(c in 'aeiouAEIOU' for c in word)]\n    if not vowel_words:\n        return 0.0\n    return sum(len(word) for word in vowel_words) / len(vowel_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one complex word\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_words = sum(1 for word in re.findall(r'\\w+', text) if len(word) > 3)  # Assuming complex is >3\n    if sentences == 0:\n        return 0.0\n    return complex_words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that include a quotation mark to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    quoted_sentences = text.count('\"')\n    if sentences == 0:\n        return 0.0\n    return quoted_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Density of modifiers (adverbs) in the text\"\n    words = text.split()\n    adverbs = sum(1 for word in words if word.endswith('ly'))  # Naive adverb detection\n    if len(words) == 0:\n        return 0.0\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of statements that use the first person to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    first_person_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if 'I ' in sentence or 'we ' in sentence)\n    if sentences == 0:\n        return 0.0\n    return first_person_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of occurrences of the word 'you' to total words\"\n    words = text.split()\n    you_count = words.count('you')\n    if len(words) == 0:\n        return 0.0\n    return you_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one exclamation mark.\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = len(re.findall(r'!', text))\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses in each sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r',|;', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than six characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of the word 'I' as a proportion of total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique punctuation marks to total punctuation marks.\"\n    punctuation_marks = re.findall(r'[!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]', text)\n    unique_punctuation = set(punctuation_marks)\n    if not punctuation_marks:\n        return 0.0\n    return len(unique_punctuation) / len(punctuation_marks)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in characters.\"\n    dialogues = re.findall(r'\\\"[^\\\"]*\\\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain direct address.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    direct_address_count = sum(1 for sentence in sentences if ',' in sentence)\n    return direct_address_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    avg_length = sum(len(p.split('. ')) for p in paragraphs) / len(paragraphs)\n    return avg_length\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    compound_count = len([s for s in sentences if ',' in s and 'and' in s])  # Simple compound check\n    if not sentences:\n        return 0.0\n    return compound_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are technical or jargonistic\"\n    common_terms = {'the', 'and', 'is', 'in', 'to', 'of', 'that', 'it', 'a', 'for', 'on'}  # Example set of common words\n    words = text.split()\n    jargon_count = len([word for word in words if word.lower() not in common_terms])\n    if not words:\n        return 0.0\n    return jargon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of emotive language to total words\"\n    emotive_words = {'love', 'hate', 'joy', 'sad', 'happy', 'angry', 'fear', 'hope', 'disgust'}  # Sample emotive words\n    words = text.split()\n    emotive_count = len([word for word in words if word.lower() in emotive_words])\n    if not words:\n        return 0.0\n    return emotive_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of non-trivial words (more than 5 characters)\"\n    words = text.split()\n    long_word_lengths = [len(word) for word in words if len(word) > 5]\n    if not long_word_lengths:\n        return 0.0\n    return sum(long_word_lengths) / len(long_word_lengths)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, considering 'and', 'but', 'or' as clause connectors\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(text.count(connector) + 1 for connector in ['and', 'but', 'or'] for text in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of emotional words to total words in the text\"\n    emotional_words = set(['happy', 'sad', 'angry', 'excited', 'fear', 'love', 'hate', 'dislike'])  # Example emotional words\n    words = text.split()\n    if not words:\n        return 0.0\n    emotion_count = sum(1 for word in words if word.lower() in emotional_words)\n    return emotion_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue sentences in words\"\n    dialogues = re.findall(r'\"(.*?)\"', text)\n    if not dialogues:\n        return 0.0\n    return sum(len(dialogue.split()) for dialogue in dialogues) / len(dialogues)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one proper noun\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    proper_noun_count = sum(1 for sentence in sentences if re.search(r'\\b[A-Z][a-z]*\\b', sentence))\n    return proper_noun_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average character length of each word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing exclamations to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    exclamation_count = sum(1 for sentence in sentences if '!' in sentence)\n    return exclamation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    conjunctions = set(['and', 'but', 'or', 'nor', 'for', 'so', 'yet'])\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences in the text\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    rhetorical_question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return rhetorical_question_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average length of words in characters, excluding very short words (3 characters or less).\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 3]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of total numbers to total words in the text.\"\n    word_list = text.split()\n    total_words = len(word_list)\n    number_count = sum(1 for word in word_list if word.isdigit())\n    if total_words == 0:\n        return 0.0\n    return number_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words consisting of uppercase letters to total unique words.\"\n    words = text.split()\n    unique_words = set(words)\n    upper_words = {word for word in unique_words if word.isupper()}\n    if not unique_words:\n        return 0.0\n    return len(upper_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a capitalized word.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    capitalized_sentences = sum(1 for sentence in sentences if sentence.strip()[0].isupper())\n    if not sentences:\n        return 0.0\n    return capitalized_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text as a proportion of total sentences.\"\n    question_sentences = len(re.findall(r'\\b\\w+\\?\\s*', text))\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return question_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text.\"\n    def syllable_count(word):\n        return max(1, sum(1 for vowel in 'aeiou' if vowel in word.lower()))  # Naive syllable count\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(syllable_count(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing a modal verb (can, could, may, might, shall, should, will, would).\"\n    modal_verbs = r'\\b(can|could|may|might|shall|should|will|would)\\b'\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    modal_count = sum(1 for sentence in sentences if re.search(modal_verbs, sentence, re.IGNORECASE))\n    if not sentences:\n        return 0.0\n    return modal_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Density of complex words (more than 3 syllables) in the text.\"\n    def is_complex(word):\n        return sum(1 for vowel in 'aeiou' if vowel in word.lower()) >= 3\n    words = text.split()\n    complex_words = sum(1 for word in words if is_complex(word))\n    if len(words) == 0:\n        return 0.0\n    return complex_words / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 8 characters) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 8)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one dialogue indicator (quotes)\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of stop words to total words\"\n    common_words = set(['the', 'is', 'in', 'and', 'to', 'of', 'a', 'for', 'that', 'on', 'it', 'with'])\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    stop_word_count = sum(1 for word in words if word in common_words)\n    return stop_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = re.findall(r'[,\\;]', text)\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(clauses) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of technical jargon (specific terms) to total words\"\n    technical_terms = set(['algorithm', 'model', 'data', 'function', 'system', 'analysis'])\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    jargon_count = sum(1 for word in words if word in technical_terms)\n    return jargon_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing at least one adverb\"\n    adverbs = set(['quickly', 'silently', 'beautifully', 'really', 'often'])\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    adverb_sentences = sum(1 for sentence in sentences if any(adverb in sentence.split() for adverb in adverbs))\n    return adverb_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    rhetorical_questions = sum(1 for sentence in sentences if sentence.strip().endswith('?') and 'you' in sentence)\n    return rhetorical_questions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in sentences\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_counts = [len(re.findall(r'[.!?]', para)) for para in paragraphs]\n    return sum(sentence_counts) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if not words:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if len(sentences) == 0:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard punctuations (e.g., *!?) in the text\"\n    return sum(1 for c in text if c in ['*', '!', '?'])\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions (e.g., and, but, if) to total words\"\n    conjunctions = set(['and', 'but', 'if', 'or', 'so'])\n    words = text.split()\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    if not words:\n        return 0.0\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Presence of rhetorical questions (indicated by a question mark at the end)\"\n    return 1.0 if text.strip().endswith('?') else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Count of emotional words (happy, sad, etc.) in the text\"\n    emotional_words = set(['happy', 'sad', 'angry', 'excited', 'bored'])\n    words = text.split()\n    emotional_count = sum(1 for word in words if word.lower() in emotional_words)\n    return float(emotional_count)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = set(['quickly', 'slowly', 'very', 'too', 'extremely'])  # Sample adverbs\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Presence of first-person pronouns (I, me, my) in the text\"\n    pronouns = set(['I', 'me', 'my'])\n    words = text.split()\n    pronoun_count = sum(1 for word in words if word.lower() in pronouns)\n    return float(pronoun_count)\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    question_count = len(re.findall(r'\\b\\w+\\?\\b', text))\n    return float(question_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences measured in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of emojis in the text\"\n    emoji_count = len(re.findall(r'[\\U0001F600-\\U0001F64F]', text))\n    return float(emoji_count)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 6 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_word_count = len([word for word in words if len(re.findall(r'[aeiouy]{3,}', word)) > 0])\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs to total sentence length\"\n    paragraph_count = text.count('\\n\\n') + 1\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if sentence_count == 0:\n        return 0.0\n    return paragraph_count / sentence_count\n", "def feature(text: str) -> float:\n    \"Proportion of words that are verbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(?:be|have|do|go|say|get|make|know|can|will|would|may|might|must|shall|see|come|think|take|look|want|give)\\b', word))\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique bigrams in the text\"\n    words = text.split()\n    bigrams = set(zip(words, words[1:]))\n    return float(len(bigrams))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[.!?]+', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if re.search(r'\\b\\w+ly\\b', word))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of emojis or special symbols in the text\"\n    special_symbols = re.findall(r'[^\\w\\s]', text)\n    return float(len(special_symbols))\n\n", "def feature(text: str) -> float:\n    \"Average number of distinctive characters used in words (diversity)\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_chars = set(''.join(words))\n    return float(len(unique_chars)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences to total sentences\"\n    sentences = re.findall(r'[.!?]+', text)\n    compound_count = sum(1 for sent in sentences if ',' in sent)\n    if not sentences:\n        return 0.0\n    return compound_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of negative sentiment words in the text\"\n    negative_words = set(['not', 'no', 'never', 'none', 'nothing', 'nobody', 'nowhere', 'neither', 'lack'])\n    words = text.split()\n    negative_count = sum(1 for word in words if word in negative_words)\n    return float(negative_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences with multiple clauses to total sentences\"\n    sentences = re.findall(r'[.!?]+', text)\n    complex_count = sum(1 for sent in sentences if len(re.findall(r',', sent)) > 1)\n    if not sentences:\n        return 0.0\n    return complex_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of question marks to total sentences\"\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return text.count('?') / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 10)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words that are longer than average word length\"\n    words = text.split()\n    if not words:\n        return 0.0\n    avg_word_length = sum(len(word) for word in words) / len(words)\n    long_words_count = sum(1 for word in words if len(word) > avg_word_length)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than one independent clause)\"\n    complex_count = len(re.findall(r'[,;]', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    return complex_count / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word\"\n    words = text.split()\n    syllable_count = sum(sum(c in 'aeiou' for c in word.lower()) for word in words)\n    return syllable_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences in the text\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of personal pronouns to total words\"\n    personal_pronouns = ['I', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'we', 'us', 'our', 'they', 'them', 'their']\n    words = text.split()\n    count = sum(1 for word in words if word.lower() in personal_pronouns)\n    return count / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with less than 4 letters to total words\"\n    words = text.split()\n    short_word_count = sum(1 for word in words if len(word) < 4)\n    return short_word_count / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]+', word.lower()))  # Simple vowel grouping for syllables\n    \n    words = text.split()\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) if len(sentences) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences) if len(sentences) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences starting with a conjunction to total sentences\"\n    conjunctions = ['and', 'but', 'or', 'nor', 'for', 'so', 'yet']\n    sentences = re.split(r'[.!?]', text)\n    conjunction_start_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(tuple(conjunctions)))\n    return conjunction_start_count / len(sentences) if len(sentences) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'said' in the text\"\n    return float(text.lower().count('said'))\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 15 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    complex_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Frequency of exclamation marks to total punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if total_punctuation == 0:\n        return 0.0\n    return exclamation_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph based on newline characters\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    word_count = sum(len(paragraph.split()) for paragraph in paragraphs)\n    return word_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of uppercase words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_words = sum(1 for word in words if word.isupper())\n    return uppercase_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unusual characters (not alphanumeric or space) in the text\"\n    unusual_chars = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(unusual_chars)\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs that contain dialogue (quotes)\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    dialogue_paragraphs = sum(1 for paragraph in paragraphs if '\"' in paragraph)\n    return dialogue_paragraphs / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamatory = text.count('!')\n    if sentences == 0:\n        return 0.0\n    return exclamatory / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing numbers\"\n    words = text.split()\n    number_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    if len(words) == 0:\n        return 0.0\n    return number_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    total_chars = sum(len(word) for word in words)\n    return total_chars / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 10 characters to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 10)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of prepositions in the text\"\n    prepositions = {'in', 'of', 'to', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'over', 'under'}\n    words = text.lower().split()\n    preposition_count = sum(1 for word in words if word in prepositions)\n    return float(preposition_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    total_words = sum(len(paragraph.split()) for paragraph in paragraphs)\n    return total_words / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that start with a capital letter to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].isupper())\n    if len(sentences) == 0:\n        return 0.0\n    return capital_start_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than one independent clause.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_sentences = len(re.findall(r'\\b(?:and|but|or|nor|for|so|yet)\\b.*?[.!?]', text))\n    return compound_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Number of metaphors or similes used in the text.\"\n    metaphors = len(re.findall(r'\\b(?:like|as)\\b.*?(?:\\w+\\s+)?(?!as|like)\\w+', text))\n    return float(metaphors)\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_adjectives = sum(len(re.findall(r'\\b\\w+ly\\b|\\b(?:red|green|tall|short|quick|slow|happy|sad|bad|good)\\b', sentence)) for sentence in sentences)\n    return total_adjectives / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamatory sentences to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    exclamatory_sentences = text.count('!')\n    return exclamatory_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 0 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph.\"\n    paragraphs = text.split('\\n')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return sentence_count / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    return sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words.\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of certain emotionally charged words.\"\n    emotional_words = ['love', 'hate', 'sad', 'happy', 'cry', 'joy']\n    count = sum(text.lower().count(word) for word in emotional_words)\n    return count / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words that are longer than 10 characters.\"\n    long_words = len([word for word in text.split() if len(word) > 10])\n    return long_words / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences.\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence.\"\n    comma_count = text.count(',')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return comma_count / sentence_count if sentence_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of words containing special characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    special_char_count = sum(1 for word in words if not word.isalnum())\n    return special_char_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuation))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences exceeding 20 words to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 20)\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of times the word 'I' appears per 100 words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = text.lower().count('i')\n    return (i_count / len(words)) * 100\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quotes)\"\n    sentences = len(re.findall(r'[.!?]', text))\n    dialogue_sentences = len(re.findall(r'\\\"', text)) // 2  # Count pairs of quotes\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    def count_syllables(word):\n        return max(1, sum(c in 'aeiou' for c in word.lower()))  # Simplified syllable count\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(count_syllables(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of specific slang or colloquial terms in the text\"\n    slang_terms = ['fucking', 'shit', 'seriously', 'ummm', 'yeah']\n    count = sum(text.lower().count(term) for term in slang_terms)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain numerical digits\"\n    words = text.split()\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    if not words:\n        return 0.0\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Presence of brackets or parentheses in the text\"\n    count = text.count('[') + text.count(']') + text.count('(') + text.count(')')\n    return float(count > 0)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than 10 words\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return float(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of filler words (e.g., um, uh, like) to total words\"\n    filler_words = ['um', 'uh', 'like', 'you know']\n    total_filler = sum(text.lower().split().count(filler) for filler in filler_words)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_filler / total_words\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 10 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    total_length = len(text.replace('\\n', ''))  # Counting characters excluding new lines\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Sentence complexity ratio calculated as long sentences to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    long_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if len(sentence.split()) > 15)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = re.findall(r'[.!?]', text)\n    question_sentences = sum(1 for sentence in re.split(r'[.!?]', text) if sentence.strip().endswith('?'))\n    if len(sentences) == 0:\n        return 0.0\n    return question_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunction words (and, or, but) to total words\"\n    conjunctions = {'and', 'or', 'but'}\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return float(len(adverbs))\n\n", "def feature(text: str) -> float:\n    \"Proportion of capitalized words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word.istitle())\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 6 characters to total words\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    if len(words) == 0:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    words = text.split()\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in words)\n    if len(words) == 0:\n        return 0.0\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are in past tense\"\n    past_tense_words = re.findall(r'\\b\\w+ed\\b', text)\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return len(past_tense_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., however, moreover)\"\n    transitional_phrases = ['however', 'moreover', 'furthermore', 'nevertheless']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamations to total sentences\"\n    exclamations = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return exclamations / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Count of unique words\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation characters to total characters\"\n    total_chars = len(text)\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / total_chars if total_chars > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that start with a capital letter\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word and word[0].isupper())\n    return capitalized_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of characters in non-space words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    char_count = sum(len(word) for word in words)\n    return char_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions (e.g., 'don't', 'it's')\"\n    contractions = re.findall(r\"\\b\\w+'\\w+\\b\", text)\n    words = text.split()\n    return len(contractions) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of words that are longer than 5 characters\"\n    words = text.split()\n    long_words_count = sum(1 for word in words if len(word) > 5)\n    return long_words_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue punctuation (e.g., quotations)\"\n    sentences = re.split(r'[.!?]', text)\n    dialogue_sentences_count = sum(1 for sentence in sentences if '\"' in sentence or \"'\" in sentence)\n    return dialogue_sentences_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    complex_word_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) >= 1)  # Roughly counts syllables\n    return complex_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with exclamation marks\"\n    sentences = re.split(r'[.!?]', text)\n    exclamatory_count = sum(1 for sentence in sentences if '!' in sentence)\n    return exclamatory_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of words that are conjunctions to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'so', 'for', 'nor', 'yet', 'either', 'neither', 'whether'})\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total sentences\"\n    exclamations = text.count('!')\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return exclamations / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total sentences\"\n    dialogue = len(re.findall(r'\"[^\"]*\"', text))\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return dialogue / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of parenthetical phrases in the text\"\n    parentheses = len(re.findall(r'\\([^()]*\\)', text))\n    return float(parentheses)\n\n", "def feature(text: str) -> float:\n    \"Average length of parenthetical phrases measured in characters\"\n    phrases = re.findall(r'\\([^()]*\\)', text)\n    if not phrases:\n        return 0.0\n    return sum(len(phrase) for phrase in phrases) / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of complex sentences (more than 20 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_sentences = sum(1 for s in sentences if len(s.split()) > 20)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text\"\n    words = text.split()\n    total_syllables = sum(sum(1 for char in word if char in 'aeiouAEIOU') for word in words)\n    return total_syllables / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text relative to total words\"\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverbs = len(re.findall(adverb_pattern, text))\n    return adverbs / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    unique_words = set(text.split())\n    return sum(len(word) for word in unique_words) / len(unique_words) if unique_words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain direct speech\"\n    direct_speech_pattern = r'\".+?\"'\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    speech_count = sum(1 for s in sentences if re.search(direct_speech_pattern, s))\n    return speech_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    noun_pattern = r'\\b\\w+ing\\b|\\b(?:a|an|the|this|that)\\b|\\b[a-zA-Z]+\\b'\n    nouns = len(re.findall(noun_pattern, text))\n    return nouns / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words in the text that are longer than 12 characters\"\n    long_words = len([word for word in text.split() if len(word) > 12])\n    return long_words / len(text.split()) if text.split() else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text.split()) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that contain digits to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_word_count = len([word for word in words if any(char.isdigit() for char in word)])\n    return digit_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 5 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = len([word for word in words if len(word) > 5])\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Counts the average number of unique words in each sentence\"\n    sentences = re.split(r'[.!?]', text)\n    unique_word_counts = []\n    for sentence in sentences:\n        words = set(word.lower().strip() for word in sentence.split() if word)\n        unique_word_counts.append(len(words))\n    if not unique_word_counts:\n        return 0.0\n    return sum(unique_word_counts) / len(unique_word_counts)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks divided by total punctuation characters\"\n    exclamation_count = text.count('!')\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions as a ratio of total sentences\"\n    question_regex = r'\\b(\\w+\\s*[\\?\\!]{1})'\n    question_count = len(re.findall(question_regex, text))\n    sentences_count = text.count('.') + text.count('!') + text.count('?')\n    if sentences_count == 0:\n        return 0.0\n    return question_count / sentences_count\n", "def feature(text: str) -> float:\n    \"Proportion of exclamation marks to total punctuation marks\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    exclamation_count = text.count('!')\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of personal pronouns to total words\"\n    words = text.split()\n    personal_pronouns = {'I', 'me', 'my', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'we', 'us', 'our', 'they', 'them', 'their'}\n    if not words:\n        return 0.0\n    pronoun_count = sum(1 for word in words if word.lower() in personal_pronouns)\n    return pronoun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of rhetorical questions to total unique sentence endings\"\n    total_questions = text.count('?')\n    unique_sentence_endings = len(set(re.findall(r'[.!?]', text)))\n    if unique_sentence_endings == 0:\n        return 0.0\n    return total_questions / unique_sentence_endings\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of numeric content to total words\"\n    words = text.split()\n    numeric_count = sum(1 for word in words if word.isdigit())\n    if not words:\n        return 0.0\n    return numeric_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are gerunds (-ing form) to total words\"\n    words = text.split()\n    gerund_count = sum(1 for word in words if word.endswith('ing'))\n    if not words:\n        return 0.0\n    return gerund_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are positive or negative sentiment words to total words\"\n    sentiment_words = {'good', 'great', 'positive', 'bad', 'sad', 'negative'}\n    words = text.split()\n    sentiment_count = sum(1 for word in words if word.lower() in sentiment_words)\n    if not words:\n        return 0.0\n    return sentiment_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average frequency of multi-syllable words (more than 2 syllables) in the text\"\n    words = re.findall(r'\\w+', text)\n    multi_syllable_words = sum(1 for word in words if len(re.findall(r'[aeiou]+', word.lower())) > 2)\n    if not words:\n        return 0.0\n    return multi_syllable_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if re.search(r'ly$', word.lower())])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average punctuation frequency in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional phrases to total sentences\"\n    transitional_phrases = ['however', 'furthermore', 'moreover', 'conversely', 'nevertheless']\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    transitional_count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    return transitional_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]{1,2}', word.lower()))  # Basic vowel sequence count\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of negative sentiment words to total words\"\n    negative_words = ['bad', 'sad', 'angry', 'hate', 'terrible', 'awful', 'worst']\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(word.lower() in negative_words for word in words)\n    return negative_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of modal verbs (could, would, should, might) to total verbs\"\n    modal_verbs = ['can', 'could', 'may', 'might', 'must', 'shall', 'should', 'will', 'would']\n    words = text.split()\n    verb_count = len([word for word in words if word.lower() in modal_verbs])\n    total_words = len(words)\n    return verb_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or all(len(s.strip()) == 0 for s in sentences):\n        return 0.0\n    return sum(len(s.strip()) for s in sentences if len(s.strip()) > 0) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words relative to total words\"\n    words = text.split()\n    unique_words = len(set(word.lower() for word in words))\n    return unique_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of questions (words ending in '?') to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    question_count = sum(1 for s in sentences if s.strip().endswith('?'))\n    return question_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a question\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = len(re.findall(r'\\?', text))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in terms of characters\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(paragraph) for paragraph in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to total characters in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = re.findall(r'\\w+', text)\n    if not words:\n        return 0.0\n    noun_count = sum(1 for word in words if word.endswith(('tion', 'ness', 'ment', 'ity')))  # A basic heuristic for nouns\n    return noun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]{1,2}', word.lower()))\n    \n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain digits or special characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    special_char_count = sum(1 for word in words if not word.isalnum())\n    return special_char_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Mean and variance of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    word_lengths = [len(word) for word in words]\n    mean_length = sum(word_lengths) / len(word_lengths)\n    variance_length = sum((x - mean_length) ** 2 for x in word_lengths) / len(word_lengths)\n    return variance_length\n", "def feature(text: str) -> float:\n    \"Proportion of question words (who, what, where, when, why) to total words\"\n    question_words = ['who', 'what', 'where', 'when', 'why']\n    words = text.lower().split()\n    if len(words) == 0:\n        return 0.0\n    question_count = sum(1 for word in words if word in question_words)\n    return question_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average character count per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing a conjunction to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if 'and' in sentence or 'but' in sentence or 'or' in sentence)\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of instances of the word 'I' divided by total word count\"\n    words = text.lower().split()\n    if len(words) == 0:\n        return 0.0\n    i_count = words.count('i')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words in sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters to total words\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short phrases (less than 3 words) to total phrases\"\n    phrases = re.split(r'[,.]', text)\n    if not phrases:\n        return 0.0\n    short_phrases = sum(1 for phrase in phrases if len(phrase.strip().split()) < 3)\n    return short_phrases / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks divided by total punctuation marks\"\n    exclamation_count = text.count('!')\n    punctuation_count = len(re.findall(r'[.!?]', text))\n    if punctuation_count == 0:\n        return 0.0\n    return exclamation_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences with fewer than 10 words to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if text else 0)\n    short_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) < 10])\n    return short_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    adjectives = len(re.findall(r'\\b\\w+(?:ly|able|ful|less|ic|ive|ous)\\b', text))\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if text else 0)\n    return adjectives / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain a quote to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + (1 if text else 0)\n    quote_sentences = len(re.findall(r'\\\".*?\\\"', text))\n    return quote_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation characters used divided by total characters\"\n    unique_punctuations = len(set(c for c in text if not c.isalnum() and not c.isspace()))\n    total_characters = len(text)\n    return unique_punctuations / total_characters if total_characters > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with an adverb to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    adverb_starting_sentences = len([s for s in sentences if s.startswith(('quickly', 'slowly', 'beautifully', 'sadly', 'happily'))])\n    return adverb_starting_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average paragraph length in characters\"\n    paragraphs = text.split('\\n')\n    total_length = sum(len(p) for p in paragraphs)\n    return total_length / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are in passive voice to total words\"\n    passive_voice = len(re.findall(r'\\b(?:is|are|was|were|be|been|being)\\s+\\w+ed\\b', text))\n    words = text.split()\n    return passive_voice / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word\"\n    words = text.split()\n    return max((len(word) for word in words), default=0)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words\"\n    words = text.split()\n    digit_words = len([word for word in words if any(char.isdigit() for char in word)])\n    return digit_words / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of negations (not, no, never) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    negation_count = sum(1 for word in words if word.lower() in {'not', 'no', 'never'})\n    return negation_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used\"\n    punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph\"\n    paragraphs = text.split('\\n')\n    return sum(len(p.split()) for p in paragraphs) / (len(paragraphs) or 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = re.findall(r'\\w+', text)\n    if not words:\n        return 0.0\n    complex_word_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word.lower())) >= 1)\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / (len(sentences) or 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short words (3 characters or less) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    short_word_count = sum(1 for word in words if len(word) <= 3)\n    return short_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = re.findall(r'\\w+', text)\n    if not words:\n        return 0.0\n    noun_count = sum(1 for word in words if word.lower() in {'the', 'a', 'an'})  # Simple noun approximation\n    return noun_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for s in sentences if s.strip().lower().startswith(('and', 'but', 'or', 'so', 'for', 'yet')))\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    unique_words_count = sum(len(set(s.split())) for s in sentences)\n    return unique_words_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in passive voice constructions\"\n    passive_voice = re.findall(r'\\b(is|was|were|are|be|being|been) \\w+ed\\b', text, re.IGNORECASE)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(passive_voice) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    avg_length = sum(len(s) for s in sentences) / len(sentences)\n    return avg_length\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are negations (not, no, never, etc.)\"\n    negation_words = re.findall(r'\\b(not|no|never|none|neither|nobody|nothing|nowhere)\\b', text, re.IGNORECASE)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(negation_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    commas_count = sum(s.count(',') for s in sentences)\n    return commas_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))  \n    rhetorical_questions = len(re.findall(r'[\\?]', text))\n    if sentences == 0:\n        return 0.0\n    return rhetorical_questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing emotional words\"\n    emotional_words = {'love', 'hate', 'fear', 'joy', 'sad', 'happy', 'scream', 'cry', 'joyful', 'angry'}\n    sentences = text.split('.')\n    emotional_sentence_count = sum(1 for sentence in sentences for word in emotional_words if word in sentence.lower())\n    if len(sentences) == 0:\n        return 0.0\n    return emotional_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unusual word formations (e.g., acronyms) to total words\"\n    acronyms = len(re.findall(r'\\b[A-Z]{2,}\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return acronyms / total_words\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word\"\n    total_syllables = sum(len(re.findall(r'[aeiouy]', word)) for word in text.split())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_syllables / total_words\n\n", "def feature(text: str) -> float:\n    \"Frequency of parenthetical statements (e.g., using parentheses) in the text\"\n    parentheses_count = text.count('(') + text.count(')')\n    total_statements = len(re.findall(r'[.!?]', text))\n    if total_statements == 0:\n        return 0.0\n    return parentheses_count / total_statements\n\n", "def feature(text: str) -> float:\n    \"Frequency of discourse markers (e.g., however, additionally) in the text\"\n    discourse_markers = {'however', 'additionally', 'furthermore', 'meanwhile', 'thus'}\n    total_markers = sum(1 for word in text.split() if word.lower() in discourse_markers)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_markers / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of passive voice usage in the text\"\n    passive_voice_patterns = re.findall(r'\\b(?:is|are|was|were|be|been|being)\\s+\\w+ed\\b', text)\n    total_verbs = len(re.findall(r'\\b\\w+ed\\b', text))\n    if total_verbs == 0:\n        return 0.0\n    return len(passive_voice_patterns) / total_verbs\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use imagery or figurative language\"\n    imagery_words = re.findall(r'\\b(imagine|dream|wonder|feel|sense|see|taste|hear)\\b', text.lower())\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(imagery_words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks as a proportion of total punctuation marks\"\n    exclamations = text.count('!')\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if total_punctuation == 0:\n        return 0.0\n    return exclamations / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Presence of dialogue indicators (e.g., quotes) indicating conversational style\"\n    quotes_count = text.count('\"') + text.count(\"'\")\n    return float(quotes_count > 0)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words\"\n    words = text.split()\n    adjectives = sum(1 for word in words if len(word) > 0 and word.endswith('y'))  # Simple check; improve with a better PoS tagging\n    if len(words) == 0:\n        return 0.0\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of contractions to total words\"\n    contractions = re.findall(r\"\\b\\w+'\\w+\\b\", text)\n    if len(text.split()) == 0:\n        return 0.0\n    return len(contractions) / len(text.split())\n\n", "def feature(text: str) -> float:\n    \"Density of emotional words suggesting sentiment\"\n    emotional_words = re.findall(r'\\b(happy|sad|anger|joy|fear|love|hate|excited|bored)\\b', text.lower())\n    if len(text.split()) == 0:\n        return 0.0\n    return len(emotional_words) / len(text.split())\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = len([word for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0])\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = len([word for word in words if any(c.isdigit() for c in word)])\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of non-standard punctuation to total punctuation\"\n    punctuation_marks = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    non_standard_punctuation = sum(1 for c in text if c in r'\u201c\u201d\u2018\u2019')\n    if punctuation_marks == 0:\n        return 0.0\n    return non_standard_punctuation / punctuation_marks\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words\"\n    words = text.split()\n    unique_words = set(words)\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical devices to total sentences\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    rhetorical_devices = len(re.findall(r'\\bmetaphor|simile|hyperbole\\b', text, re.IGNORECASE))\n    return rhetorical_devices / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if word.endswith('ly')])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that is written in passive voice\"\n    passive_voice_pattern = re.compile(r'\\b(?:was|were|is|are|be|being|been)\\s+\\w+\\b')\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    passive_sentences = len(re.findall(passive_voice_pattern, text))\n    return passive_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing dialogue (quotes)\"\n    dialogue_sentences = len(re.findall(r'\".+?\"', text))\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return dialogue_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique adjectives in the text\"\n    adjectives = set(re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b', text))\n    return float(len(adjectives))\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    capitalized = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return capitalized / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are longer than 15 words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of complex words (more than 3 syllables)\"\n    words = text.split()\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]', word)) > 3)\n    if not words:\n        return 0.0\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are prepositions\"\n    words = text.split()\n    prepositions = {'of', 'in', 'to', 'for', 'with', 'on', 'at', 'by', 'from', 'about'}\n    preposition_count = sum(1 for word in words if word.lower() in prepositions)\n    if not words:\n        return 0.0\n    return preposition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in syllables\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]{1,2}', word.lower()))\n    \n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for sentence in sentences for word in sentence.split())\n    total_words = sum(len(sentence.split()) for sentence in sentences)\n    \n    if total_words == 0:\n        return 0.0\n    return total_syllables / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing direct speech\"\n    direct_speech = len(re.findall(r'\\\".*?\\\"', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return direct_speech / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions\"\n    rhetorical_questions = len(re.findall(r'\\?.*', text))\n    total_questions = text.count('?')\n    if total_questions == 0:\n        return 0.0\n    return rhetorical_questions / total_questions\n\n", "def feature(text: str) -> float:\n    \"Proportion of transitional words (e.g., however, therefore, meanwhile)\"\n    transitional_words = set(['however', 'therefore', 'meanwhile', 'moreover', 'furthermore', 'consequently'])\n    words = text.lower().split()\n    transitional_count = sum(1 for word in words if word in transitional_words)\n    if not words:\n        return 0.0\n    return transitional_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of unique punctuations used in the text\"\n    unique_punctuations = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuations))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with a question mark\"\n    sentences = len(re.findall(r'[.!?]', text))\n    question_sentences = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return question_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with mixed case to total words\"\n    words = text.split()\n    mixed_case_count = sum(1 for word in words if any(c.isupper() for c in word) and any(c.islower() for c in word))\n    if not words:\n        return 0.0\n    return mixed_case_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words\"\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns based on a basic noun list\"\n    basic_nouns = set(['man', 'woman', 'child', 'dog', 'cat', 'house', 'car', 'book'])\n    words = text.lower().split()\n    noun_count = sum(1 for word in words if word in basic_nouns)\n    if not words:\n        return 0.0\n    return noun_count / len(words)\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of pronouns to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = re.findall(r'\\b(he|she|it|they|him|her|his|their|there|you|we|us|me|my|mine|our|ours)\\b', text, re.IGNORECASE)\n    return float(len(pronouns)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Measure the variance of sentence lengths in words\"\n    sentences = re.split(r'[.!?]+', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((length - mean_length) ** 2 for length in sentence_lengths) / len(sentence_lengths)\n    return float(variance)\n\n", "def feature(text: str) -> float:\n    \"Count the number of instances of the word 'I' as a measure of personal narrative\"\n    return float(text.lower().count('i'))\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of sentences that use passive voice\"\n    sentences = re.split(r'[.!?]+', text)\n    passive_count = sum(1 for sentence in sentences if re.search(r'\\b(?:was|were|been|is|are|be)\\s+\\w+', sentence))\n    if not sentences:\n        return 0.0\n    return float(passive_count) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count the number of complex words (more than 2 syllables) in the text\"\n    words = re.findall(r'\\w+', text)\n    complex_words = [word for word in words if len(re.findall(r'[aeiou]{2,}', word.lower())) > 0]\n    return float(len(complex_words))\n\n", "def feature(text: str) -> float:\n    \"Measure the average number of commas per sentence as a complexity indicator\"\n    sentences = re.split(r'[.!?]+', text)\n    comma_counts = [sentence.count(',') for sentence in sentences if sentence.strip()]\n    if not comma_counts:\n        return 0.0\n    return float(sum(comma_counts)) / len(comma_counts)\n\n", "def feature(text: str) -> float:\n    \"Measure the average number of ideas conveyed per paragraph using keyword linking\"\n    paragraphs = text.split('\\n')\n    keywords = ['therefore', 'however', 'meanwhile', 'consequently', 'thus']\n    idea_count = sum(sum(1 for keyword in keywords if keyword in paragraph.lower()) for paragraph in paragraphs)\n    return float(idea_count) / len(paragraphs) if paragraphs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of words of emotional weight (positive or negative)\"\n    emotional_words = ['happy', 'sad', 'joy', 'angry', 'love', 'hate', 'fear', 'disgust']\n    words = text.lower().split()\n    emotional_count = sum(1 for word in words if word in emotional_words)\n    return float(emotional_count) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = len(re.findall(r'[\"\\'].*?[\"\\']', text))\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are sensory adjectives (sight, sound, touch, etc.)\"\n    sensory_adjectives = ['bright', 'loud', 'smooth', 'soft', 'bitter', 'sweet', 'rough', 'dark', 'sharp', 'clear']\n    words = text.lower().split()\n    sensory_count = sum(1 for word in words if word in sensory_adjectives)\n    return sensory_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain a descriptive phrase\"\n    descriptive_phrases = re.findall(r'\\b[a-zA-Z]+ (?:is|are|was|were) [a-zA-Z]+\\b', text)\n    sentences = re.split(r'[.!?]', text)\n    return len(descriptive_phrases) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of dialogue segments in the text\"\n    dialogues = re.findall(r'[\"\\'].*?[\"\\']', text)\n    return sum(len(d) for d in dialogues) / len(dialogues) if dialogues else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of metaphorical expressions to total sentences\"\n    metaphors = re.findall(r'\\b(?:as if|like|is)\\b', text)\n    sentences = re.split(r'[.!?]', text)\n    return len(metaphors) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words ending with 'ing'\"\n    words = text.split()\n    ing_count = sum(1 for word in words if word.endswith('ing'))\n    return ing_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions\"\n    rhetorical_questions = re.findall(r'\\b(?:is|are|do|does|can|could|would|should)\\b.*\\?$', text, re.MULTILINE)\n    total_questions = re.findall(r'\\?.*$', text, re.MULTILINE)\n    return len(rhetorical_questions) / len(total_questions) if total_questions else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that have more than one punctuation mark\"\n    sentences = re.split(r'[.!?]', text)\n    complex_count = sum(1 for sentence in sentences if len(re.findall(r'[,.!?;]', sentence)) > 1)\n    return complex_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words_count = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain complex phrases (more than 20 words)\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    complex_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    if not sentences:\n        return 0.0\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_words = sum(1 for word in words if word.istitle())\n    return capitalized_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are conjunctions (and, or, but)\"\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunctions = {'and', 'or', 'but'}\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    rhetorical_questions = re.findall(r'\\b\\w+\\s*\\?\\s*$', text, re.MULTILINE)\n    return float(len(rhetorical_questions))\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing quotes\"\n    quoted_sentences = len(re.findall(r'\".*?\"', text))\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return float(quoted_sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = {'quickly', 'silently', 'happily', 'sadly', 'strongly', 'smoothly'}\n    adverb_count = sum(1 for word in words if word.lower() in adverbs)\n    return adverb_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of words containing three or more syllables to total words\"\n    words = text.split()\n    long_syllable_words = sum(1 for word in words if len(re.findall(r'[aeiouy]{2,}', word)) >= 1)\n    return long_syllable_words / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average punctuation per sentence\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return punctuation_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 15 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    return len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = text.split()\n    noun_pattern = r'\\b(?:[a-zA-Z]{3,})\\b'  # Simple pattern for nouns\n    noun_count = len(re.findall(noun_pattern, text))\n    return noun_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Count the proportion of words that are personal pronouns.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    pronouns = sum(1 for word in words if word.lower() in ['i', 'me', 'my', 'mine', 'you', 'your', 'yours', 'he', 'him', 'his', 'she', 'her', 'hers', 'it', 'its', 'we', 'us', 'our', 'ours', 'they', 'them', 'their', 'theirs'])\n    return pronouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Calculate the average sentence length in characters.\"\n    sentences = [s for s in re.findall(r'[^.!?]+', text) if s.strip()]\n    if not sentences:\n        return 0.0\n    return sum(len(s.strip()) for s in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Measure the ratio of exclamatory sentences to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    exclamation_count = sum(1 for s in sentences if '!' in s)\n    return exclamation_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of sentences containing modal verbs (can, could, may, might, must, shall, should, will, would).\"\n    sentences = re.findall(r'[^.!?]+', text)\n    modal_verbs = {'can', 'could', 'may', 'might', 'must', 'shall', 'should', 'will', 'would'}\n    modal_count = sum(1 for s in sentences if any(word in modal_verbs for word in s.split()))\n    return modal_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the average length of paragraphs in terms of word count.\"\n    paragraphs = text.split('\\n')\n    paragraph_lengths = [len(p.split()) for p in paragraphs if p.strip()]\n    return sum(paragraph_lengths) / len(paragraph_lengths) if paragraph_lengths else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of negative sentiment words to total words.\"\n    negative_words = {'not', 'no', 'never', 'none', 'nothing', 'nobody', 'neither', 'nowhere', 'cannot', 'won\\'t', 'didn\\'t', 'shouldn\\'t'}\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of questions asked in the text.\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return question_count / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the density of synonyms and antonyms in the text.\"\n    synonyms_antonyms = {'good', 'bad', 'happy', 'sad', 'big', 'small'}\n    words = text.split()\n    if not words:\n        return 0.0\n    syn_ant_count = sum(1 for word in words if word.lower() in synonyms_antonyms)\n    return syn_ant_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of comparative adjectives to total adjectives.\"\n    comparative_adjectives = {'better', 'worse', 'taller', 'shorter', 'greater', 'lesser'}\n    words = text.split()\n    adjectives_count = sum(1 for word in words if word.lower().endswith('er'))\n    comparative_count = sum(1 for word in words if word.lower() in comparative_adjectives)\n    return comparative_count / adjectives_count if adjectives_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of long sentences (more than 20 words) to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    long_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return float(long_sentences / sentences) if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the average sentence length in characters.\"\n    sentences = text.split('.')\n    total_length = sum(len(sentence) for sentence in sentences)\n    return float(total_length / len(sentences)) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of sentences that start with an adverb.\"\n    adverbs = re.findall(r'\\b(quickly|slowly|silently|carefully|well|badly|happily|sadly)\\b', text, re.IGNORECASE)\n    sentences = text.split('.')\n    return float(len(adverbs) / len(sentences)) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Determine the average number of clauses per sentence.\"\n    clauses = sum(text.count(',') + text.count(';') + text.count('and') for sentence in text.split('.'))\n    sentences = len(text.split('.'))\n    return float(clauses / sentences) if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of words with more than 10 characters to total words.\"\n    words = text.split()\n    long_words = len([word for word in words if len(word) > 10])\n    return float(long_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the proportion of seemingly emotional words (happy, sad, angry, etc.) in the text.\"\n    emotional_words = re.findall(r'\\b(happy|sad|angry|joy|fear|love|hate)\\b', text, re.IGNORECASE)\n    words = text.split()\n    return float(len(emotional_words)) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of characters in uppercase to total characters.\"\n    upper_count = sum(1 for c in text if c.isupper())\n    total_count = len(text)\n    return float(upper_count) / total_count if total_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the proportion of sentences that include a simile or metaphor.\"\n    similes_metaphors = len(re.findall(r'\\b(as|like|as if)\\b', text))\n    sentences = len(text.split('.'))\n    return float(similes_metaphors) / sentences if sentences > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of the number of questions marks to the total number of punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_marks = text.count('?')\n    return question_marks / total_punctuation if total_punctuation > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    complex_words = len([word for word in text.split() if len(re.findall(r'[aeiouy]{3,}', word)) > 0])\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are personal pronouns to total words\"\n    personal_pronouns = len([word for word in text.split() if word.lower() in ['i', 'me', 'my', 'mine', 'you', 'your', 'yours', 'he', 'him', 'his', 'she', 'her', 'hers', 'we', 'us', 'our', 'ours', 'they', 'them', 'their', 'theirs']])\n    total_words = len(text.split())\n    return personal_pronouns / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average word length in terms of syllables\"\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word)) for word in text.split())\n    total_words = len(text.split())\n    return syllable_count / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that use imagery or figurative language\"\n    imagery_sentences = len(re.findall(r'\\b(see|look|hear|feel|taste|smell|like|as|metaphor|symbol)\\b', text, re.IGNORECASE))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return imagery_sentences / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are conjunctions to total words\"\n    conjunctions = len([word for word in text.split() if word.lower() in ['and', 'but', 'or', 'for', 'nor', 'so', 'yet', 'although', 'if', 'unless']])\n    total_words = len(text.split())\n    return conjunctions / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    rhetorical_questions = len(re.findall(r'\\b(why|how|what)\\b[^?.!]*\\?', text, re.IGNORECASE))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    return rhetorical_questions / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = len(set(text.split()))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that include dialogue to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    dialogue_sentences = len(re.findall(r'\"[^\"]*\"', text))\n    if sentences == 0:\n        return 0.0\n    return dialogue_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that contain the letter 's'\"\n    unique_words = set(text.split())\n    count_s_words = sum(1 for word in unique_words if 's' in word.lower())\n    return float(count_s_words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with complex structure (using semicolons) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    complex_sentences = text.count(';')\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences based on number of words\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Calculate the frequency of transition words used in the text\"\n    transition_words = {'however', 'moreover', 'therefore', 'furthermore', 'conversely', 'meanwhile'}\n    word_list = text.lower().split()\n    count_transitions = sum(1 for word in word_list if word in transition_words)\n    return float(count_transitions)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are nouns to total words\"\n    words = text.split()\n    noun_count = sum(1 for word in words if word.lower() in {'table', 'computer', 'man', 'woman', 'city', 'car', 'house'})  # a simplified assumption\n    if len(words) == 0:\n        return 0.0\n    return noun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain at least one adverb\"\n    sentences = re.split(r'[.!?]', text)\n    adverbs = {'quickly', 'silently', 'well', 'badly', 'awkwardly'}  # a simplified assumption\n    adverb_sent_count = sum(1 for sentence in sentences if any(word in adverbs for word in sentence.split()))\n    if len(sentences) == 0:\n        return 0.0\n    return adverb_sent_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Measure of lexical diversity using the type-token ratio\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return float(len(unique_words)) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that start with a conjunction.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    start_with_conjunction = sum(1 for sentence in re.split(r'[.!?]', text) if sentence.strip().startswith(('and', 'but', 'or', 'for', 'nor', 'so', 'yet')))\n    return start_with_conjunction / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are sensory adjectives.\"\n    sensory_adjectives = set(['acute', 'bitter', 'bright', 'calm', 'clear', 'cold', 'dark', 'gentle', 'harsh', 'hot', 'loud', 'soft', 'tough', 'warm'])\n    words = text.split()\n    if not words:\n        return 0.0\n    sensory_count = sum(1 for word in words if word.lower() in sensory_adjectives)\n    return sensory_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of foreign or uncommon words to total words.\"\n    uncommon_words = re.findall(r'\\b\\w{8,}\\b', text)  # Assuming uncommon words are long\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(uncommon_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters.\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences or len(sentences) == 1:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions.\"\n    rhetorical_questions = re.findall(r'\\b\\w+\\?\\s*$', text)  # Assuming rhetorical questions end without expected answers\n    total_questions = text.count('?')\n    if total_questions == 0:\n        return 0.0\n    return len(rhetorical_questions) / total_questions\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    adverbs = set([word for word in words if word.endswith('ly')])\n    if not words:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences compared to word count.\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return float(sentences) / words\n", "def feature(text: str) -> float:\n    \"Ratio of the number of exclamation marks to total sentence count\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    exclamation_count = text.count('!')\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if word.lower().endswith('y') or word.lower() in {'good', 'bad', 'happy', 'sad', 'big', 'small'})\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return adjectives / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a capital letter\"\n    sentences = re.findall(r'[^.!?]+[.!?]*', text)\n    if not sentences:\n        return 0.0\n    starts_with_capital = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].isupper())\n    return starts_with_capital / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of special characters per 100 words\"\n    special_char_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return (special_char_count / word_count) * 100\n\n", "def feature(text: str) -> float:\n    \"Average word length in terms of syllable count\"\n    words = text.split()\n    if not words:\n        return 0.0\n    # A simple heuristic for syllable counting\n    syllable_count = sum(max(1, word.lower().count('a') + word.lower().count('e') + word.lower().count('i') + word.lower().count('o') + word.lower().count('u')) for word in words)\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = set(words)\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs as identified by blank lines\"\n    paragraphs = text.split('\\n\\n')\n    return len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]*', text)\n    if not sentences:\n        return 0.0\n    longest_sentence_length = max(len(sentence.split()) for sentence in sentences)\n    return longest_sentence_length\n\n", "def feature(text: str) -> float:\n    \"Proportion of total words that are nouns (heuristic based on common suffixes)\"\n    words = text.split()\n    if not words:\n        return 0.0\n    noun_count = sum(1 for word in words if word.lower().endswith(('tion', 'ment', 'ness', 'ity', 'hood', 'ship')))\n    return noun_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating sentence complexity\"\n    clause_count = sum(len(re.findall(r'[;,.]', sentence)) + 1 for sentence in re.split(r'[.!?]', text))\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return clause_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of unique words compared to total words\"\n    words = text.split()\n    unique_words = set(words)\n    return len(unique_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of multi-syllable words to total words\"\n    words = text.split()\n    multi_syllable_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return multi_syllable_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of consecutive words without punctuation\"\n    words = re.findall(r'\\w+', text)\n    if not words:\n        return 0.0\n    count = sum(len(word) for word in words)\n    return count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions identified by pattern\"\n    questions = len(re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE))\n    return float(questions)\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation that are ellipses (...)\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    ellipsis_count = text.count('...')\n    return ellipsis_count / total_punctuation if total_punctuation > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors or similes identified by specific patterns\"\n    metaphor_count = len(re.findall(r'\\b(as |like )\\w+', text))\n    return float(metaphor_count)\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain a question mark to the total number of sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    question_sentences = sum(1 for s in sentences if '?' in s)\n    if not sentences:\n        return 0.0\n    return question_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clauses_count = sum(text.count(',') + text.count('and') for text in sentences)\n    if not sentences:\n        return 0.0\n    return clauses_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs to total words\"\n    words = text.split()\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    if not sentences:\n        return 0.0\n    return short_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex sentences (more than 20 words) to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len([s for s in text.split('.') if len(s.split()) > 20])\n    return complex_sentences / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters divided by total characters\"\n    unique_chars = len(set(text))\n    return unique_chars / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing dialogue to total sentences\"\n    sentences = re.findall(r'[^.!?]+', text)\n    dialogue_sentences = sum(1 for s in sentences if '\"' in s)\n    return dialogue_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases (delimited by commas) per sentence\"\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    phrase_count = sum(len(s.split(',')) for s in sentences)\n    return phrase_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain rhetorical questions\"\n    sentences = re.findall(r'[^.!?]+', text)\n    rhetorical_questions = sum(1 for s in sentences if s.strip().endswith('?') and re.search(r'\\b(what|why|how|if|could|would)\\b', s, re.IGNORECASE))\n    return rhetorical_questions / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with an adverb\"\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    adverbs = {'quickly', 'silently', 'usually', 'very', 'clearly', 'carefully', 'finally'}\n    adverb_starting_sentences = sum(1 for s in sentences if s.split()[0].lower() in adverbs)\n    return adverb_starting_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of compound sentences (contains at least one conjunction) to total sentences\"\n    sentences = re.split(r'(?<=[.!?]) +', text)\n    compound_sentences = sum(1 for s in sentences if any(conj in s for conj in ['and', 'but', 'or', 'so', 'yet']))\n    return compound_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    return sum(len(word) for word in words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.lower().endswith('ly'))\n    return adverb_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue markers ('said', 'ask', 'reply')\"\n    dialogue_markers = ['said', 'ask', 'reply']\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_count = sum(any(marker in sentence.lower() for marker in dialogue_markers) for sentence in sentences)\n    return dialogue_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 3 syllables to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_word_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)  # crude syllable count\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of instances of 'I' or 'we' to total pronouns\"\n    pronouns = re.findall(r'\\b(I|me|we|us|my|our)\\b', text, re.IGNORECASE)\n    total_pronouns = len(re.findall(r'\\b(?:I|me|we|us|my|our|you|he|him|she|her|it|they|them)\\b', text, re.IGNORECASE))\n    if total_pronouns == 0:\n        return 0.0\n    return len(pronouns) / total_pronouns\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = text.split()\n    if not words:\n        return 0.0\n    nouns = sum(1 for word in words if re.search(r'\\b\\w+(ion|ment|ness|ity)\\b', word))\n    return nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that include rhetorical questions\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    rhetorical_question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return rhetorical_question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_count = sum(1 for word in words if word.isupper())\n    return uppercase_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words containing at least one vowel\"\n    words = text.split()\n    if not words:\n        return 0.0\n    vowel_count = sum(1 for word in words if any(c in 'aeiou' for c in word.lower()))\n    return vowel_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns\"\n    words = text.split()\n    if not words:\n        return 0.0\n    noun_count = sum(1 for word in words if word.lower() in {'he', 'she', 'it', 'they', 'dog', 'cat', 'house', 'car', 'tree'})\n    return noun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_word_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word.lower())) > 0)\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words ending in 'ing' to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    ing_word_count = sum(1 for word in words if word.endswith('ing'))\n    return ing_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing a metaphor or idiom\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    metaphor_count = sum(1 for sentence in sentences if re.search(r'\\b(dark horse|break the ice|hit the nail on the head)\\b', sentence))\n    return metaphor_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of text that consists of questions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    sentences = sum(len(re.findall(r'[.!?]', paragraph)) for paragraph in paragraphs)\n    return sentences / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]', word)) > 3)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    short_sentences = sum(1 for sentence in sentences if len(sentence.split()) < 5)\n    return short_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of total punctuation marks in the text\"\n    return sum(1 for c in text if not c.isalnum() and not c.isspace())\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_words = sum(1 for word in words if word.isupper())\n    return uppercase_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of dialogue to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    dialogue_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue_sentences / len(sentences)\n", "def feature(text: str) -> float:\n    \"Count of distinct sentences starting with a capital letter\"\n    sentences = [s for s in text.split('.') if s.strip()]\n    return float(sum(1 for s in sentences if s.strip() and s[0].isupper()))\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 12 characters to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 12)\n    return float(long_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    def syllable_count(word):\n        return len(re.findall(r'[aeiouy]{1,2}', word.lower()))\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique characters to total characters\"\n    unique_chars = len(set(text))\n    return float(unique_chars) / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest sentence in the text\"\n    sentences = re.split(r'[.!?]+', text)\n    longest_length = max(len(s.split()) for s in sentences if s.strip()) if sentences else 0\n    return float(longest_length)\n\n", "def feature(text: str) -> float:\n    \"Count of all occurrences of the word 'the' in the text\"\n    return float(text.lower().count('the'))\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs (words ending with 'ly') as a proportion of total words\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return float(adverb_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are nouns (based on simple heuristics)\"\n    nouns = sum(1 for word in text.split() if word.lower() in ['dog', 'cat', 'man', 'woman', 'car', 'house', 'love', 'happiness'])  # Simplified noun list for demonstration\n    return float(nouns) / len(text.split()) if text.split() else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of clauses to total sentences (simple measure of sentence complexity)\"\n    clauses = sum(s.count(',') + 1 for s in re.split(r'[.!?]+', text) if s.strip())\n    total_sentences = len(re.split(r'[.!?]+', text))\n    return float(clauses) / total_sentences if total_sentences > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Count of unique words divided by total number of words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words in sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with more than 10 characters to total words\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 10)\n    if len(words) == 0:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences\"\n    sentences = re.findall(r'[^.!?]*', text)\n    long_sentences = sum(1 for s in sentences if len(s.split()) > 15)\n    if len(sentences) == 0:\n        return 0.0\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of punctuation marks divided by total words\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return punctuation_count / words\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives divided by total words\"\n    adjectives = len(re.findall(r'\\b(?:JJ|JJR|JJS)\\b', text))  # Example POS tagging for adjectives\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return adjectives / words\n\n", "def feature(text: str) -> float:\n    \"Number of complex words (more than 3 syllables) divided by total words\"\n    complex_words = len(re.findall(r'\\b\\w{4,}\\b', text))  # Simplified syllable approximation\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return complex_words / words\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[.!?]', text)\n    clause_count = sum(s.count(',') + 1 for s in re.split(r'[.!?]', text) if s.strip())\n    if len(sentences) == 0:\n        return 0.0\n    return clause_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text\"\n    words = text.split()\n    adverbs = len([word for word in words if len(word) > 2 and word.endswith('ly')])\n    return adverbs / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in characters\"\n    paragraphs = text.split('\\n\\n')\n    if len(paragraphs) == 0:\n        return 0.0\n    return sum(len(p) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional phrases to total sentences\"\n    transitional_phrases = ['however', 'therefore', 'moreover', 'furthermore']\n    count = sum(text.lower().count(phrase) for phrase in transitional_phrases)\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique phrases of two or more words\"\n    phrases = re.findall(r'\\b\\w+\\s+\\w+\\b', text)\n    unique_phrases = set(phrases)\n    return float(len(unique_phrases))\n\n", "def feature(text: str) -> float:\n    \"Ratio of filler words (like 'um', 'uh', 'you know') to total words\"\n    filler_words = ['um', 'uh', 'you know', 'like', 'actually']\n    count = sum(text.lower().count(word) for word in filler_words)\n    return count / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    unique_words = set(text.split())\n    return len(unique_words) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    question_count = len(re.findall(r'\\b\\w+\\?\\s*$', text, re.MULTILINE))\n    return float(question_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    comma_count = text.count(',')\n    return comma_count / sentence_count if sentence_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = re.findall(r'[.!?]', text)\n    words = text.split()\n    if not sentences:\n        return 0.0\n    return len(words) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 10)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions in the text based on question mark usage\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Variability of sentence lengths measured in standard deviation\"\n    sentences = re.split(r'[.!?]', text)\n    sentence_lengths = [len(sentence.split()) for sentence in sentences if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((length - mean_length) ** 2 for length in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences)\n    sentence_count = len(sentences)\n    if sentence_count == 0:\n        return 0.0\n    return total_length / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of punctuation characters to total characters\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    total_length = len(text)\n    if total_length == 0:\n        return 0.0\n    return punctuation_count / total_length\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'I' per total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = text.lower().count('i')\n    return i_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of quotes in the text indicating dialogue usage\"\n    quote_count = text.count('\"')\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return quote_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (more than 3 syllables) in the text\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return complex_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + question_count\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of the text that consists of contractions\"\n    contraction_count = len(re.findall(r\"\\b\\w+'\\w+\\b\", text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return contraction_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that begin with a coordinating conjunction\"\n    sentences = re.split(r'[.!?]', text)\n    conjunction_count = sum(1 for sentence in sentences if sentence.strip().startswith(('and', 'but', 'or', 'for', 'nor', 'so', 'yet')))\n    total_sentence_count = len(sentences)\n    if total_sentence_count == 0:\n        return 0.0\n    return conjunction_count / total_sentence_count\n\n", "def feature(text: str) -> float:\n    \"Average number of syllables per word in the text\"\n    syllable_count = sum(len(re.findall(r'[aeiouy]+', word)) for word in text.split())\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    return syllable_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of interjections in the text (e.g., oh, ah, wow)\"\n    interjection_count = len(re.findall(r'\\b(oh|ah|wow|ouch|oops|yay|huh|ugh|yikes|whoops)\\b', text, re.IGNORECASE))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return interjection_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of non-standard punctuation marks to total punctuation marks\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    non_standard_count = sum(1 for c in text if c in {'@', '#', '$', '%', '^', '&', '*'})\n    if punctuation_count == 0:\n        return 0.0\n    return non_standard_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n", "def feature(text: str) -> float:\n    \"Average number of parentheses per sentence, suggesting elaboration or commentary\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return float(text.count('(') + text.count(')')) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with emotional connotations to total words\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'angry', 'excited', 'bored']\n    word_list = text.lower().split()\n    emotional_count = sum(word in emotional_words for word in word_list)\n    return float(emotional_count) / max(1, len(word_list))\n\n", "def feature(text: str) -> float:\n    \"Count of transitions or conjunctions in the text, reflecting logical flow\"\n    conjunctions = ['and', 'but', 'so', 'or', 'yet']\n    word_list = text.lower().split()\n    conjunction_count = sum(word in conjunctions for word in word_list)\n    return float(conjunction_count) / max(1, len(word_list))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that begin with 'he', 'she', or character names, indicating character focus\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    character_starts = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('he', 'she')))\n    return float(character_starts) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of quoted speech segments, suggesting dialogue-intensive text\"\n    quotes = re.findall(r'\\\".*?\\\"', text)\n    if not quotes:\n        return 0.0\n    return sum(len(quote) for quote in quotes) / len(quotes)\n\n", "def feature(text: str) -> float:\n    \"Count of unique sentence structures, indicating stylistic diversity\"\n    structures = set()\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    for sentence in sentences:\n        structures.add(len(sentence.split()))\n    return float(len(structures))\n\n", "def feature(text: str) -> float:\n    \"Ratio of descriptive words (adjectives) to action words (verbs)\"\n    words = text.lower().split()\n    adjectives = [word for word in words if len(word) > 2 and word.endswith('y')]\n    verbs = [word for word in words if word in ('run', 'jump', 'talk', 'see', 'make')]\n    return float(len(adjectives)) / max(1, len(verbs))\n\n", "def feature(text: str) -> float:\n    \"Frequency of direct address in the text, indicating conversational tone\"\n    return float(text.count('you') / max(1, len(text.split())))\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 12 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words_count = sum(1 for word in words if len(word) > 12)\n    return long_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing direct speech (quotation marks)\"\n    sentence_count = len(re.findall(r'\\w+[.?!]', text))\n    speech_count = text.count('\"') // 2\n    return float(speech_count) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of characters in direct speech segments\"\n    speech_segments = re.findall(r'\"([^\"]*)\"', text)\n    if not speech_segments:\n        return 0.0\n    return sum(len(segment) for segment in speech_segments) / len(speech_segments)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are interjections or exclamations (e.g., wow, ouch)\"\n    interjections = ['wow', 'ouch', 'yay', 'hey', 'hmm', 'uh']\n    words = text.lower().split()\n    interjection_count = sum(1 for word in words if word in interjections)\n    return interjection_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique words that appear in the first sentence\"\n    sentences = re.split(r'[.!?]', text)\n    first_sentence_words = set(sentences[0].split())\n    return float(len(first_sentence_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound sentences (using and/or conjunctions) to total sentences\"\n    sentence_count = len(re.findall(r'\\w+[.?!]', text))\n    compound_count = text.lower().count('and') + text.lower().count('or')\n    return float(compound_count) / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Frequency of modal verbs (e.g., can, could, may, might, must) in the text\"\n    modal_verbs = ['can', 'could', 'may', 'might', 'must', 'shall', 'should']\n    words = text.lower().split()\n    modal_count = sum(1 for word in words if word in modal_verbs)\n    return float(modal_count) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences ending with punctuation other than a period (e.g., ! or ?)\"\n    sentences = re.findall(r'\\w+[.?!]', text)\n    if not sentences:\n        return 0.0\n    non_period_count = sum(1 for sentence in sentences if sentence.endswith(('!', '?')))\n    return float(non_period_count) / len(sentences)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence, excluding non-dialogue sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue_sentences = re.findall(r'\\\".*?\\\"', text)\n    word_count = sum(len(sentence.split()) for sentence in dialogue_sentences)\n    if not dialogue_sentences:\n        return 0.0\n    return word_count / len(dialogue_sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique characters in the text\"\n    unique_chars = set(text)\n    return float(len(unique_chars))\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of unique words to total words\"\n    words = text.split()\n    unique_words = set(words)\n    if not words:\n        return 0.0\n    return float(len(unique_words)) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with an exclamation mark\"\n    sentences = re.findall(r'[.!?]', text)\n    exclamations = text.count('!')\n    if not sentences:\n        return 0.0\n    return exclamations / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 5 characters\"\n    words = text.split()\n    long_words = sum(1 for word in words if len(word) > 5)\n    if not words:\n        return 0.0\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that use more than one clause\"\n    sentences = re.findall(r'[.!?]', text)\n    complex_sentences = len(re.findall(r'[,.]\\s*[A-Z]', text))\n    if not sentences:\n        return 0.0\n    return complex_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average usage of conjunctions in the text\"\n    words = text.split()\n    conjunctions = sum(1 for word in words if word.lower() in {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'})\n    if not words:\n        return 0.0\n    return conjunctions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences starting with a capitalized letter\"\n    sentences = re.split(r'[.!?]', text)\n    capitalized_start = sum(1 for sentence in sentences if sentence.strip() and sentence[0].isupper())\n    return float(capitalized_start)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs with dialogue (quotes)\"\n    paragraphs = text.split('\\n\\n')\n    dialogue_count = sum(1 for paragraph in paragraphs if '\"' in paragraph)\n    if len(paragraphs) == 0:\n        return 0.0\n    return dialogue_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of adverbs to total words in the text\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if len(words) == 0:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in the text\"\n    unique_words = set(text.split())\n    if len(unique_words) == 0:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    complex_word_count = sum(1 for word in words if len(re.findall(r'\\w{3,}', word)) > 3)\n    if len(words) == 0:\n        return 0.0\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing exclamation marks to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentences == 0:\n        return 0.0\n    return exclamation_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = len(re.findall(r'[;,:]', text)) + len(re.findall(r'and|but|or', text))\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    if sentences == 0:\n        return 0.0\n    return clauses / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of words containing at least one digit.\"\n    return float(len(re.findall(r'\\w*\\d\\w*', text)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of words longer than 10 characters to total word count.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = len([word for word in words if len(word) > 10])\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Mean length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique sentence structures used in the text.\"\n    sentences = re.split(r'[.!?]', text)\n    structures = set()\n    for sentence in sentences:\n        words = sentence.split()\n        if words:\n            structures.add(len(words))\n    return float(len(structures))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain dialogue (quotes).\"\n    sentences = re.split(r'[.!?]', text)\n    total_sentences = len(sentences)\n    dialogue_sentences = len([s for s in sentences if '\"' in s])\n    return float(dialogue_sentences) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total sentences.\"\n    sentences = re.split(r'[.!?]', text)\n    total_sentences = len(sentences)\n    rhetorical_questions = len([s for s in sentences if s.strip().endswith('?')])\n    return float(rhetorical_questions) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that do not contain any punctuation.\"\n    sentences = re.split(r'[.!?]', text)\n    no_punctuation_count = sum(1 for s in sentences if not any(c in s for c in '!.?,\"\\''))\n    return float(no_punctuation_count)\n\n", "def feature(text: str) -> float:\n    \"Mean length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of distinct words divided by the total number of words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return float(unique_words) / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 3 syllables\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 3)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of jargon or technical terms that might indicate AI writing\"\n    jargon_terms = ['algorithm', 'data', 'model', 'architecture', 'network', 'AI', 'deep learning', 'neural', 'training']\n    total_terms = len(text.split())\n    if total_terms == 0:\n        return 0.0\n    jargon_count = sum(text.lower().count(term) for term in jargon_terms)\n    return jargon_count / total_terms\n\n", "def feature(text: str) -> float:\n    \"Ratio of personal pronouns to total words\"\n    words = text.split()\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    personal_pronouns = ['I', 'me', 'my', 'mine', 'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'we', 'us', 'our', 'they', 'them', 'their']\n    pronoun_count = sum(word in personal_pronouns for word in words)\n    return pronoun_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average word length considering special characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    total_length = sum(len(word) for word in words)\n    return total_length / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of unique words compared to the total words\"\n    words = text.split()\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    unique_count = len(set(words))\n    return unique_count / total_words\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs in the text\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    words = text.split()\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of phrases that include quotation marks, indicating dialogue\"\n    quotes_count = text.count('\"') // 2  # Each pair indicates one dialogue\n    return float(quotes_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 20 words) to total sentences\"\n    sentences = text.split('.')\n    long_sentences_count = sum(1 for s in sentences if len(s.split()) > 20)\n    if not sentences:\n        return 0.0\n    return long_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence, indicating sentence complexity\"\n    clauses = re.findall(r'[,;]', text)\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    return (len(clauses) + len(sentences)) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences\"\n    question_count = text.count('?')\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of words containing numbers, which often appears in Ai-generated text\"\n    number_count = sum(1 for word in text.split() if any(c.isdigit() for c in word))\n    words = text.split()\n    if not words:\n        return 0.0\n    return number_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of characters that are whitespace to total characters\"\n    whitespace_count = sum(1 for c in text if c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return whitespace_count / len(text)\n", "def feature(text: str) -> float:\n    \"Proportion of compound sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    compound_count = len(re.findall(r'(?:\\w+[,:;]?\\s+)?(?:\\w+\\s*[,;]\\s*)?(?:\\w+)', text))\n    return compound_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_chars = sum(len(sentence) for sentence in re.split(r'[.!?]', text) if sentence)\n    return total_chars / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    unique_words = set(text.split())\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of numeric literals to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    numeric_count = sum(1 for word in words if word.isdigit())\n    return numeric_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing commas\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = sum(1 for sentence in re.split(r'[.!?]', text) if ',' in sentence)\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuation marks to total punctuation\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    non_standard_count = sum(1 for c in text if c in ['*', '#', '@', '&', '%'])\n    if punctuation_count == 0:\n        return 0.0\n    return non_standard_count / punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of transitional phrases to total sentences\"\n    transitional_phrases = ['however', 'therefore', 'meanwhile', 'on the other hand', 'furthermore']\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    transitional_count = sum(1 for sentence in sentences if any(phrase in sentence.lower() for phrase in transitional_phrases))\n    return transitional_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences) if len(sentences) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words)\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    unique_punctuations = len(set(char for char in text if not char.isalnum() and not char.isspace()))\n    return float(unique_punctuations)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words with non-English characters to total words\"\n    non_english_count = len(re.findall(r'[^\\x00-\\x7F]', text))\n    total_char_count = len(text)\n    return non_english_count / total_char_count if total_char_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average count of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clause_count = sum(len(re.split(r'[;,]', sentence)) for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 10 words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 10)\n    return long_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of words starting with a capital letter\"\n    capitalized_words = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    return capitalized_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation sequences between words\"\n    punctuation_sequences = re.findall(r'(\\W+)', text)\n    return sum(len(seq) for seq in punctuation_sequences) / len(punctuation_sequences) if punctuation_sequences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of words ending with 'ing'\"\n    ing_words = len(re.findall(r'\\b\\w+ing\\b', text))\n    total_words = len(text.split())\n    return ing_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of paragraphs in the text based on newline characters\"\n    paragraphs = text.split('\\n')\n    return len(paragraphs) if paragraphs else 0.0\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = len(re.findall(r'[.!?]', text))\n    if sentences == 0:\n        return 0.0\n    return len(text) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that contain more than 15 words\"\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 15])\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return long_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))-len(re.findall(r'\\b\\w{1,3}\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return complex_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with significant punctuation (more than 2 punctuation marks)\"\n    significant_punctuation = len([s for s in re.split(r'[.!?]', text) if sum(1 for c in s if not c.isalnum() and not c.isspace()) > 2])\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return significant_punctuation / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return adverb_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    clauses = sum(text.count(',') + text.count('and') + text.count(';') + text.count('but') for text in re.split(r'[.!?]', text))\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return clauses / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Density of questions in the text\"\n    question_count = text.count('?')\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of prepositions per sentence\"\n    prepositions = set(['in', 'of', 'to', 'for', 'with', 'on', 'at', 'by', 'about', 'as', 'like', 'through', 'over', 'after', 'before'])\n    preposition_count = sum(1 for word in re.findall(r'\\w+', text) if word.lower() in prepositions)\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return preposition_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of words starting with a vowel to total words\"\n    vowel_count = len([word for word in re.findall(r'\\w+', text) if word[0].lower() in 'aeiou'])\n    total_words = len(re.findall(r'\\w+', text))\n    if total_words == 0:\n        return 0.0\n    return vowel_count / total_words\n", "def feature(text: str) -> float:\n    \"Ratio of words with two or more syllables to total words.\"\n    words = text.split()\n    polysyllabic_count = sum(1 for word in words if len(re.findall(r'[aeiouy]+', word.lower())) > 1)\n    if not words:\n        return 0.0\n    return polysyllabic_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    clause_count = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique sentence starters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    starters = {sentence.strip()[0].lower() for sentence in sentences if sentence}\n    return float(len(starters))\n\n", "def feature(text: str) -> float:\n    \"Average number of words in paragraphs.\"\n    paragraphs = text.split('\\n\\n')\n    word_counts = [len(paragraph.split()) for paragraph in paragraphs if paragraph.strip()]\n    if not word_counts:\n        return 0.0\n    return sum(word_counts) / len(word_counts)\n\n", "def feature(text: str) -> float:\n    \"Proportion of adverbs in the text.\"\n    words = text.split()\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    if not words:\n        return 0.0\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of consecutive characters in words.\"\n    words = text.split()\n    consecutive_lengths = [len(re.findall(r'(.)\\1+', word)) for word in words]\n    if not consecutive_lengths:\n        return 0.0\n    return sum(consecutive_lengths) / len(consecutive_lengths)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words with less than 4 characters.\"\n    words = set(word for word in text.split() if len(word) < 4)\n    return float(len(words))\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjectives = sum(1 for word in words if word.lower() in ['good', 'bad', 'happy', 'sad', 'beautiful', 'big', 'small', 'bright', 'dark'])\n    return adjectives / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words in sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{3,}', word)) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing digits\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences starting with a conjunction\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or', 'nor', 'for', 'so', 'yet')))\n    return conjunctions / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 5 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllables = sum(len(re.findall(r'[aeiou]', word)) for word in words)\n    return syllables / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph based on double line breaks\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Frequency of specific story-like elements (e.g., 'begin', 'end', 'once') per total words\"\n    key_elements = ['begin', 'end', 'once', 'then', 'after']\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    key_count = sum(words.count(el) for el in key_elements)\n    return key_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical question marks relative to total sentences\"\n    question_count = text.count('?')\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of the word 'I' relative to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    i_count = words.count('I')\n    return i_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional phrases (e.g., 'however', 'therefore') to total words\"\n    transitions = ['however', 'therefore', 'moreover', 'consequently', 'furthermore']\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    transition_count = sum(words.count(t) for t in transitions)\n    return transition_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of imperative sentences (commands) to total sentences\"\n    sentences = [s.strip() for s in re.split(r'[.!?]', text) if s]\n    imperative_count = sum(1 for s in sentences if s.startswith(('Please', 'Do', 'Make', 'Get', 'Say')))\n    if not sentences:\n        return 0.0\n    return imperative_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of unique words in characters\"\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n", "def feature(text: str) -> float:\n    \"Proportion of characters that are whitespace characters\"\n    if not text:\n        return 0.0\n    whitespace_count = sum(1 for c in text if c.isspace())\n    return whitespace_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(c.isdigit() for c in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    clause_count = text.count(',') + text.count(';') + text.count(':') + text.count('-') + sentence_count\n    if sentence_count == 0:\n        return 0.0\n    return clause_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are capitalized\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average punctuation mark per sentence\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return punctuation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are adverbs to total words\"\n    adverbs = {'quickly', 'slowly', 'silently', 'eagerly', 'happily', 'sadly', 'carefully', 'often'}\n    words = text.lower().split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word in adverbs)\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain conjunctions\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunctions = {'and', 'but', 'or', 'nor', 'for', 'so', 'yet'}\n    conjunction_count = sum(1 for sentence in sentences if any(word in conjunctions for word in sentence.lower().split()))\n    return conjunction_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of words that are longer than 5 characters\"\n    words = text.split()\n    long_words = [word for word in words if len(word) > 5]\n    if not long_words:\n        return 0.0\n    return sum(len(word) for word in long_words) / len(long_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences in the text\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return text.count('!') / sentences\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(len(re.findall(r'[aeiou]+', word.lower())) for word in words)\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of contractions as a measure of casual language\"\n    contractions = re.findall(r\"\\b\\w+'\\w+\\b\", text)\n    return float(len(contractions))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain questions\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    return text.count('?') / sentences\n\n", "def feature(text: str) -> float:\n    \"Density of non-standard punctuation marks (not ., !, ?)\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    standard_punctuation_count = text.count('.') + text.count('!') + text.count('?')\n    total_punctuation_count = punctuation_count + standard_punctuation_count\n    if total_punctuation_count == 0:\n        return 0.0\n    return punctuation_count / total_punctuation_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with repeated characters\"\n    words = text.split()\n    repeated_count = sum(1 for word in words if len(set(word)) < len(word))\n    if not words:\n        return 0.0\n    return repeated_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average character count of words that are not common conjunctions or prepositions\"\n    common_words = set(['and', 'or', 'but', 'the', 'a', 'in', 'on', 'to'])\n    words = [word for word in text.split() if word.lower() not in common_words]\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph based on line breaks.\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with punctuation.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    return len(sentences) / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of total unique words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with at least one digit to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_word_count = sum(1 for word in words if any(c.isdigit() for c in word))\n    return digit_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs (ending with 'ly').\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverb_count = sum(1 for word in words if word.endswith('ly'))\n    return adverb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    return clause_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are questions.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = len(re.findall(r'\\?+', text))\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard punctuation (e.g., emojis or non-ASCII characters) to total punctuation.\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    non_standard_punctuation = len(re.findall(r'[^\\x00-\\x7F]', text))\n    if total_punctuation == 0:\n        return 0.0\n    return non_standard_punctuation / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average number of words per paragraph.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    return sum(len(p.split()) for p in paragraphs) / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences to total sentences.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    exclamations = len(re.findall(r'!+', text))\n    if sentences == 0:\n        return 0.0\n    return exclamations / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that start with a capital letter.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    capital_start_count = sum(1 for s in sentences if s.strip() and s.strip()[0].isupper())\n    return float(capital_start_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    words = text.split()\n    complex_words = len([word for word in words if len(re.findall(r'[aeiou]', word)) >= 3])\n    if not words:\n        return 0.0\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text.\"\n    words = text.split()\n    unique_words = set(words)\n    return float(len(unique_words))\n", "def feature(text: str) -> float:\n    \"Ratio of words that are verbs to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if re.search(r'\\b(are|is|was|were|be|been|being|have|has|had|do|does|did|doing)\\b', word, re.IGNORECASE))\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of question marks to total punctuation marks\"\n    total_punctuation = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    question_mark_count = text.count('?')\n    if total_punctuation == 0:\n        return 0.0\n    return question_mark_count / total_punctuation\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adjectives\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adjective_count = sum(1 for word in words if re.search(r'\\b(?:able|big|bright|clean|dark|easy|fast|good|happy)\\b', word, re.IGNORECASE))\n    return adjective_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of short sentences (less than or equal to 5 words) to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    short_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) <= 5)\n    return short_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct sentences starting with a capital letter\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    distinct_start_capital_count = sum(1 for sentence in sentences if sentence.lstrip().startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')))\n    return float(distinct_start_capital_count)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks used in the text\"\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuation))\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 8 characters to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 8)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = set(text.split())\n    return float(len(words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing quoted speech to total sentences\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    quote_count = len(re.findall(r'\\\".*?\\\"', text)) + len(re.findall(r'\\'.*?\\'', text))\n    return quote_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(len(re.findall(r',|\\band\\b|\\bor\\b', sentence)) + 1 for sentence in sentences if sentence)\n    return clause_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of non-standard characters (e.g., emojis, special symbols)\"\n    non_standard_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(non_standard_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences longer than 15 words to total sentences\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with 'I' or 'It'\"\n    sentences = re.split(r'[.!?]', text)\n    specific_start_count = sum(1 for sentence in sentences if sentence.strip().startswith(('I', 'It')))\n    return specific_start_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average punctuation density in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    complex_word_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0 and len(word) > 3)\n    return complex_word_count / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of long words (more than 7 characters) to total words.\"\n    long_words = len([word for word in text.split() if len(word) > 7])\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return long_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of stop words (common words) to total words.\"\n    stop_words = set(['the', 'is', 'in', 'and', 'to', 'that', 'with', 'of', 'it', 'as'])\n    total_words = len(text.split())\n    stop_word_count = sum(1 for word in text.split() if word.lower() in stop_words)\n    if total_words == 0:\n        return 0.0\n    return stop_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuations.\"\n    unique_punctuations = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(unique_punctuations))\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word.\"\n    vowels = 'aeiou'\n    def syllable_count(word):\n        return sum(1 for char in word.lower() if char in vowels)\n    \n    total_syllables = sum(syllable_count(word) for word in text.split())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return total_syllables / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences starting with a conjunction.\"\n    conjunctions = {'and', 'but', 'or', 'so'}\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    conjunction_starting = sum(1 for sentence in sentences if sentence.strip().split()[0].lower() in conjunctions)\n    return conjunction_starting / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words in passive voice.\"\n    passive_voice_keywords = {'by', 'was', 'were', 'be', 'being', 'been'}\n    total_words = len(text.split())\n    passive_word_count = sum(1 for word in text.split() if word.lower() in passive_voice_keywords)\n    if total_words == 0:\n        return 0.0\n    return passive_word_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average word length excluding punctuation.\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of adverb usage to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique nouns in the text as a ratio to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_nouns = len(set(re.findall(r'\\b[A-Z][a-z]*\\b', text)))\n    return unique_nouns / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain digits\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of words with multiple syllables as a ratio to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    multi_syllable_words = len(re.findall(r'\\b\\w{2,}+\\b', text))  # simplistic check for at least two-syllable words\n    return multi_syllable_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per sentence\"\n    sentences = [s for s in re.split(r'[.!?]', text) if s.strip()]\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences longer than 15 words\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of distinct punctuation marks used in the text\"\n    punctuation = set(char for char in text if not char.isalnum() and not char.isspace())\n    return len(punctuation)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique phrases to total phrases\"\n    phrases = text.split(',')\n    if not phrases:\n        return 0.0\n    unique_phrases = len(set(phrases))\n    return unique_phrases / len(phrases)\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text\"\n    punctuation = {c for c in text if not c.isalnum() and not c.isspace()}\n    return float(len(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Proportion of long sentences (more than 15 words) to total sentences\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    long_sentences_count = sum(1 for s in text.split('.') if len(s.split()) > 15)\n    return long_sentences_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of conjunctions per sentence\"\n    sentences = text.split('.')\n    if not sentences:\n        return 0.0\n    conjunctions_count = sum(text.count(conj) for conj in ['and', 'or', 'but'])\n    return conjunctions_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that start with a vowel to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    vowel_start_count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return vowel_start_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words_count = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) >= 3)\n    return complex_words_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of phrases that include a personal pronoun to total phrases\"\n    phrases = text.split(',')\n    if not phrases:\n        return 0.0\n    pronouns_count = sum(1 for phrase in phrases if any(pr in phrase.lower() for pr in ['I', 'my', 'we', 'our']))\n    return pronouns_count / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Average length of words that are verbs in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_words = [word for word in words if word.lower() in ['is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had']]\n    if not verb_words:\n        return 0.0\n    return sum(len(word) for word in verb_words) / len(verb_words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are compound (more than one root word) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    compound_words_count = sum(1 for word in words if '-' in word)\n    return compound_words_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences containing more than one clause to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text))\n    complex_sentences = len(re.findall(r'[,\\;\\s]and\\s|\\band\\s|\\bor\\s|\\bso\\s', text))\n    if sentences == 0:\n        return 0.0\n    return complex_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of rare words (less common than 1000 in a typical corpus) to total words\"\n    rare_words = set(['thou', 'thee', 'thy', 'whilst', 'albeit', 'betwixt'])  # Example rare words\n    words = text.split()\n    rare_count = sum(1 for word in words if word.lower() in rare_words)\n    if not words:\n        return 0.0\n    return rare_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that use personification\"\n    personification_patterns = r'\\b(is\\s+|are\\s+|was\\s+|were\\s+|seems\\s+)\\s+\\w+\\s+(?:like|as)\\s+\\w+'\n    personification_count = len(re.findall(personification_patterns, text))\n    if len(re.findall(r'[.!?]', text)) == 0:\n        return 0.0\n    return personification_count / len(re.findall(r'[.!?]', text))\n\n", "def feature(text: str) -> float:\n    \"Average number of unique words per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    words = text.split()\n    unique_words = len(set(words))\n    if not sentences or len(sentences) == 0:\n        return 0.0\n    return unique_words / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Standard deviation of word lengths in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    mean_length = sum(len(word) for word in words) / len(words)\n    variance = sum((len(word) - mean_length) ** 2 for word in words) / len(words)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with a punctuation mark other than a period\"\n    sentences = len(re.findall(r'[.!?]', text))\n    non_period_count = len(re.findall(r'[!?]', text))\n    if sentences == 0:\n        return 0.0\n    return non_period_count / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text, helping to identify diversity in vocabulary.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text, indicating complexity in language.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    syllable_count = sum(len(re.findall(r'[aeiou]+', word.lower())) for word in words)\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than one clause, reflecting sentence complexity.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    complex_clause_count = sum(1 for sentence in sentences if len(re.findall(r'[,;]', sentence)) > 0)\n    return complex_clause_count / max(len(sentences), 1)\n\n", "def feature(text: str) -> float:\n    \"Average number of phrases per sentence, indicating complexity in sentence structure.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    phrase_count = sum(len(re.findall(r'[,:]', sentence)) for sentence in sentences)\n    return phrase_count / max(len(sentences), 1)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total words, which may indicate emotional tone.\"\n    exclamations = text.count('!')\n    words = len(text.split())\n    return exclamations / max(words, 1)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence, a basic measure of sentence length.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    words = len(text.split())\n    return words / max(len(sentences), 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of adjectives to total words, indicating descriptive language usage.\"\n    words = text.split()\n    adj_count = sum(1 for word in words if re.search(r'\\b(?:good|bad|happy|sad|large|small)\\b', word, re.IGNORECASE))\n    return adj_count / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 10 characters, indicating advanced vocabulary.\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    return long_word_count / max(len(words), 1)\n\n", "def feature(text: str) -> float:\n    \"Proportion of total punctuation marks to total characters in the text.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return punctuation_count / max(len(text), 1)\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text.\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of nouns to total words in the text.\"\n    words = text.split()\n    noun_count = len(re.findall(r'\\b\\w+(tion|ment|ness|ity|ing|er|or|ist|ism|al)\\b', text))\n    if not words:\n        return 0.0\n    return noun_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clause_count = sum(text.count(',') + text.count('and') for text in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words.\"\n    words = text.split()\n    complex_word_count = len([word for word in words if len(re.findall(r'[aeiou]', word)) >= 3])\n    if not words:\n        return 0.0\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that start with an adverb to total sentences.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    adverb_start_count = sum(1 for sentence in sentences if re.match(r'\\b\\w+ly\\b', sentence.strip().split()[0]))\n    if not sentences:\n        return 0.0\n    return adverb_start_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    punctuation_count = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    if not sentences:\n        return 0.0\n    return punctuation_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with more than 15 words to total sentences.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    if not sentences:\n        return 0.0\n    return long_sentence_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average length of words in the text.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain at least one digit.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r'[,;]', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average word length measured in characters excluding punctuation.\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Number of unique words in the text compared to the total word count.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of unique punctuation marks in the text.\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    return float(len(punctuation_marks))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with an introductory phrase.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    introductory_phrases = ('although', 'because', 'since', 'while', 'when', 'if')\n    initial_introductory = sum(1 for sentence in sentences if any(sentence.lstrip().startswith(phrase) for phrase in introductory_phrases))\n    return initial_introductory / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences with more than one clause.\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    multi_clause_sentences = sum(1 for sentence in sentences if len(re.findall(r'[;,]', sentence)) > 0)\n    return multi_clause_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters in the text\"\n    total_letters = sum(1 for c in text if c.isalpha())\n    if total_letters == 0:\n        return 0.0\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / total_letters\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with exclamation marks to total sentences\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    exclamation_count = text.count('!')\n    if sentence_count == 0:\n        return 0.0\n    return exclamation_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain punctuation characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    punctuation_word_count = sum(1 for word in words if any(not c.isalnum() for c in word))\n    return punctuation_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    average_sentence_length = len(text) / len(sentences)\n    return float(average_sentence_length)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words in the text\"\n    words = text.split()\n    distinct_words = set(words)\n    return float(len(distinct_words))\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    clause_count = sum(text.count(',') + text.count(';') for text in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return float(clause_count / len(sentences))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that end with question marks\"\n    sentence_count = len(re.findall(r'[.!?]', text))\n    question_count = text.count('?')\n    if sentence_count == 0:\n        return 0.0\n    return question_count / sentence_count\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with a capital letter\"\n    sentences = re.split(r'[.!?]', text)\n    capital_start_count = sum(1 for sentence in sentences if sentence and sentence.strip().startswith(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')))\n    if not sentences:\n        return 0.0\n    return capital_start_count / len(sentences)\n", "def feature(text: str) -> float:\n    \"Ratio of sentences with strong emotional words to total sentences\"\n    emotional_words = re.findall(r'\\b(love|hate|fear|joy|mad|happy|sad|excited|angry|disgusted)\\b', text, re.IGNORECASE)\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return len(emotional_words) / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of complex words (more than 2 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text)) - len(re.findall(r'\\b\\w{1,2}\\b', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in characters\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of unique words compared to total words\"\n    words = text.split()\n    unique_words = len(set(words))\n    if len(words) == 0:\n        return 0.0\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of long sentences (more than 20 words) to total sentences\"\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    total_sentences = len(re.findall(r'[.!?]', text))\n    if total_sentences == 0:\n        return 0.0\n    return long_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of dialogue to total words\"\n    dialogue_count = len(re.findall(r'\"[^\"]*\"', text))\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return dialogue_count / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of different punctuation marks used\"\n    punctuation_marks = set(c for c in text if not c.isalnum() and not c.isspace())\n    if not punctuation_marks:\n        return 0.0\n    return len(punctuation_marks)\n\n", "def feature(text: str) -> float:\n    \"Percentage of words with at least one uppercase letter\"\n    words = text.split()\n    uppercase_count = sum(1 for word in words if any(c.isupper() for c in word))\n    if len(words) == 0:\n        return 0.0\n    return uppercase_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are contractions in the text.\"\n    words = text.split()\n    contractions = sum(1 for word in words if \"'\" in word)\n    if len(words) == 0:\n        return 0.0\n    return contractions / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words containing digits to total words in the text.\"\n    words = text.split()\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    if len(words) == 0:\n        return 0.0\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence in the text.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    total_clauses = sum(len(re.findall(r'\\w+,\\s*that\\s*|\\w+,\\s*who\\s*|\\w+,\\s*when\\s*|\\w+,\\s*where\\s*', sentence)) + 1 for sentence in sentences)\n    if len(sentences) == 0:\n        return 0.0\n    return total_clauses / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-repetitive phrases (more than 4 consecutive words) to total phrases.\"\n    phrases = re.findall(r'(\\b\\w+(?:\\s+\\w+){3,}\\b)', text)\n    unique_phrases = set(phrases)\n    if len(phrases) == 0:\n        return 0.0\n    return float(len(unique_phrases)) / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing a direct quote in the text.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    quote_sentences = sum(1 for sentence in sentences if '\"' in sentence)\n    return float(quote_sentences) / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of emoji or special characters in the text.\"\n    special_characters = sum(1 for char in text if not char.isalnum() and not char.isspace())\n    return float(special_characters)\n\n", "def feature(text: str) -> float:\n    \"Average difference in length between the longest and shortest words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    lengths = [len(word) for word in words]\n    return float(max(lengths) - min(lengths))\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that begin with a conjunction.\"\n    sentences = re.findall(r'[^.!?]+', text)\n    if len(sentences) == 0:\n        return 0.0\n    conjunctions = sum(1 for sentence in sentences if sentence.strip().lower().startswith(('and', 'but', 'or', 'so')))\n    return float(conjunctions) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average emotional tone score based on simple sentiment analysis.\"\n    emotional_words = {'happy': 1, 'sad': -1, 'excited': 1, 'angry': -1}\n    words = text.split()\n    score = sum(emotional_words.get(word.lower(), 0) for word in words)\n    return float(score) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text\"\n    words = text.split()\n    syllable_count = sum(sum(1 for char in word if char in 'aeiouy') for word in words)\n    if not words:\n        return 0.0\n    return syllable_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences starting with an adverb to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    adverb_count = sum(1 for sentence in sentences if re.search(r'\\b(quickly|silently|gracefully|hastily|softly)\\b', sentence.lower()))\n    return adverb_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of distinct non-repeated words in the text\"\n    words = text.lower().split()\n    unique_count = len(set(words))\n    return float(unique_count)\n\n", "def feature(text: str) -> float:\n    \"Maximum sentence length in words\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    max_length = max((len(sentence.split()) for sentence in sentences), default=0)\n    return float(max_length)\n\n", "def feature(text: str) -> float:\n    \"Word length variability measured by standard deviation\"\n    words = text.split()\n    if not words:\n        return 0.0\n    lengths = [len(word) for word in words]\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((length - mean_length) ** 2 for length in lengths) / len(lengths)\n    return variance ** 0.5\n\n", "def feature(text: str) -> float:\n    \"Average number of characters in a sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    char_count = sum(len(sentence) for sentence in sentences)\n    return char_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    words = text.split()\n    complex_word_count = sum(1 for word in words if sum(1 for char in word if char in 'aeiouy') > 3)\n    return complex_word_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain emotional context\"\n    emotional_words = ['love', 'hate', 'joy', 'fear', 'sad', 'happy']\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    emotional_count = sum(1 for sentence in sentences for ew in emotional_words if ew in sentence.lower())\n    return emotional_count / len(sentences) if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 2 syllables) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{2,}', word)) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain a personal pronoun to total sentences\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    pronoun_sentences = sum(1 for sentence in sentences if re.search(r'\\b(I|you|he|she|we|they)\\b', sentence, re.IGNORECASE))\n    return pronoun_sentences / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words used in informal contractions (e.g., don't, can't)\"\n    words = text.split()\n    informal_contractions = ['don\\'t', 'can\\'t', 'won\\'t', 'isn\\'t', 'aren\\'t']\n    if not words:\n        return 0.0\n    contraction_count = sum(1 for word in words if word.lower() in informal_contractions)\n    return contraction_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words containing digits to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of strong emotional words (like love, hate, joy, fear) in the text\"\n    strong_emotional_words = ['love', 'hate', 'joy', 'fear', 'happy', 'sad', 'anger']\n    words = text.lower().split()\n    emotional_count = sum(1 for word in words if word in strong_emotional_words)\n    return float(emotional_count)\n\n", "def feature(text: str) -> float:\n    \"Average number of commas per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    comma_count = text.count(',')\n    return comma_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are gerunds (ending in -ing) to total words\"\n    words = text.split()\n    if not words:\n        return 0.0\n    gerund_count = sum(1 for word in words if word.endswith('ing'))\n    return gerund_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words longer than 6 characters to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_word_count = sum(1 for word in words if len(word) > 6)\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total word count.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = set(words)\n    return len(unique_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of punctuation characters to total characters.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return punctuation_count / len(text)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    clause_count = sum(sentence.count(',') + 1 for sentence in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of distinct words containing numbers.\"\n    words = text.split()\n    number_included_words = set(word for word in words if any(char.isdigit() for char in word))\n    return float(len(number_included_words))\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that end with a question mark.\"\n    sentences = re.findall(r'[^.!?]*[.!?]', text)\n    question_count = sum(1 for sentence in sentences if sentence.strip().endswith('?'))\n    if not sentences:\n        return 0.0\n    return question_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average syllable count per word in the text based on simple heuristic.\"\n    def syllable_count(word):\n        word = word.lower()\n        count = len(re.findall(r'[aeiouy]+', word))\n        return count if count > 0 else 1  # At least one syllable\n\n    words = text.split()\n    if not words:\n        return 0.0\n    total_syllables = sum(syllable_count(word) for word in words)\n    return total_syllables / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of words that are capitalized to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 5 characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 5)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of words in each sentence\"\n    sentences = len(re.findall(r'[.!?]', text))\n    words = len(text.split())\n    return words / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the density of complex words (more than 3 syllables)\"\n    words = re.findall(r'\\w+', text)\n    if not words:\n        return 0.0\n    complex_words = sum(1 for word in words if len(re.findall(r'[aeiou]{3,}', word.lower())) > 0)\n    return complex_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in characters\"\n    sentences = re.findall(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences)\n    return total_length / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain dialogue (quotes)\"\n    sentences = re.findall(r'[.!?]', text)\n    dialogue = sum(1 for sentence in sentences if '\"' in sentence)\n    return dialogue / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average word length in characters\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that contain multiple clauses\"\n    sentences = re.findall(r'[.!?]', text)\n    complex_sentences = sum(1 for sentence in sentences if ',' in sentence)\n    return complex_sentences / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of rhetorical questions in text\"\n    questions = len(re.findall(r'\\?\\s*', text))\n    sentences = len(re.findall(r'[.!?]', text))\n    return questions / sentences if sentences else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of unique sentences to total sentences\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    unique_sentences = len(set(re.findall(r'\\S.*?[.!?]', text.strip())))\n    if sentences == 0:\n        return 0.0\n    return unique_sentences / sentences\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'\\S.*?[.!?]', text)\n    clause_count = sum(text.count(',') + text.count(';') + text.count('and') for text in sentences)\n    if not sentences:\n        return 0.0\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of hedging words (e.g. maybe, perhaps, might)\"\n    hedging_words = ['maybe', 'perhaps', 'might', 'could', 'seems', 'appears']\n    count = sum(text.lower().count(word) for word in hedging_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words\"\n    words = text.split()\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    if not words:\n        return 0.0\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words with more than 10 characters\"\n    words = text.split()\n    long_word_count = sum(1 for word in words if len(word) > 10)\n    if not words:\n        return 0.0\n    return long_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average length of paragraphs in number of sentences\"\n    paragraphs = text.split('\\n\\n')\n    sentence_count = sum(len(re.findall(r'[.!?]', paragraph)) + 1 for paragraph in paragraphs)\n    if not paragraphs:\n        return 0.0\n    return sentence_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Ratio of transitional phrases to total phrases\"\n    transitional_phrases = ['however', 'therefore', 'meanwhile', 'furthermore']\n    phrases = text.split(',')\n    transitional_count = sum(1 for phrase in phrases if any(word in phrase.lower() for word in transitional_phrases))\n    if not phrases:\n        return 0.0\n    return transitional_count / len(phrases)\n\n", "def feature(text: str) -> float:\n    \"Count of technical or jargon words based on a predefined list\"\n    jargon_words = ['algorithm', 'system', 'interface', 'paradigm', 'iteration']\n    count = sum(text.lower().count(word) for word in jargon_words)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence.\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    if sentences == 0:\n        return 0.0\n    words = len(text.split())\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of long words (more than 7 characters) in the text.\"\n    long_words_count = sum(1 for word in text.split() if len(word) > 7)\n    return float(long_words_count)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = len([word for word in words if word.endswith('ly')])\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of paragraphs in the text based on new line characters.\"\n    paragraphs = text.split('\\n')\n    if not paragraphs:\n        return 0.0\n    return len(paragraphs) / (len(paragraphs) + text.count('\\n'))\n\n", "def feature(text: str) -> float:\n    \"Count of sentences containing more than 20 words.\"\n    sentences = text.split('.')\n    long_sentences_count = sum(1 for sentence in sentences if len(sentence.split()) > 20)\n    return float(long_sentences_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of capitalized words to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    capitalized_count = sum(1 for word in words if word[0].isupper())\n    return capitalized_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that are longer than 15 words.\"\n    sentences = [sentence for sentence in re.findall(r'[^.!?]+[.!?]', text)]\n    if not sentences:\n        return 0.0\n    long_sentence_count = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    return long_sentence_count / len(sentences)\n", "def feature(text: str) -> float:\n    'Ratio of words that contain digits to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    digit_words = sum(1 for word in words if any(char.isdigit() for char in word))\n    return digit_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Average length of sentences in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_chars = sum(len(sentence) for sentence in sentences)\n    return total_chars / len(sentences)\n\n", "def feature(text: str) -> float:\n    'Proportion of words that are technical jargon (greater than 10 characters)'\n    words = text.split()\n    if not words:\n        return 0.0\n    jargon_words = sum(1 for word in words if len(word) > 10)\n    return jargon_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Average sentence length measured in characters'\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    total_chars = sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip())\n    return total_chars / len(sentences)\n\n", "def feature(text: str) -> float:\n    'Ratio of adverbs to total words'\n    words = text.split()\n    if not words:\n        return 0.0\n    adverbs = sum(1 for word in words if word.endswith('ly'))\n    return adverbs / len(words)\n\n", "def feature(text: str) -> float:\n    'Count of specific complex conjunctions to total conjunctions'\n    conjunctions = re.findall(r'\\b(and|but|or|nor)\\b', text)\n    if not conjunctions:\n        return 0.0\n    complex_conjunctions = sum(1 for conj in conjunctions if conj in {'but', 'nor'})\n    return complex_conjunctions / len(conjunctions)\n\n", "def feature(text: str) -> float:\n    'Proportion of words in the text that are in uppercase'\n    words = text.split()\n    if not words:\n        return 0.0\n    uppercase_words = sum(1 for word in words if word.isupper())\n    return uppercase_words / len(words)\n\n", "def feature(text: str) -> float:\n    'Ratio of stop words to total words'\n    stop_words = {'the', 'is', 'at', 'which', 'on', 'and', 'a'}\n    words = text.split()\n    if not words:\n        return 0.0\n    stop_word_count = sum(1 for word in words if word.lower() in stop_words)\n    return stop_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of contractions to total words\"\n    contractions = re.findall(r\"\\b\\w+'s|\\b\\w+n't|\\b\\w+'ll|\\b\\w+'ve|\\b\\w+'d|\\b\\w+'re\", text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(contractions) / total_words\n\n", "def feature(text: str) -> float:\n    \"Average number of characters per word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard English words (e.g., slang) to total words\"\n    non_standard_words = re.findall(r'\\b([a-z]{1,4}|lol|omg|btw|brb|idk|smh)\\b', text.lower())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(non_standard_words) / total_words\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are adverbs\"\n    words = text.split()\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if not words:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that contain uppercase letters\"\n    words = text.split()\n    uppercase_words = [word for word in words if any(c.isupper() for c in word)]\n    if not words:\n        return 0.0\n    return len(uppercase_words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in words\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    word_count = len(text.split())\n    return word_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (words with 3 or more syllables)\"\n    complex_word_count = len(re.findall(r'\\b\\w{3,}\\b', text))  # Simplified measure\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return complex_word_count / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Ratio of adjectives to total words in the text\"\n    adjectives = len(re.findall(r'\\b\\w+ly\\b', text))  # Simple heuristic for adjectives\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return adjectives / total_words\n\n", "def feature(text: str) -> float:\n    \"Density of capitalized words in the text\"\n    capitalized_words = sum(1 for word in text.split() if word[0].isupper())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return capitalized_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-standard contractions to total words\"\n    contractions = re.findall(r\"\\b(?:don't|can't|won't|it's|you're|he's|she's|they're|we're|I've)\\b\", text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(contractions) / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of words that are not in a predefined dictionary (potentially AI-generated)\"\n    dictionary = set(['the', 'and', 'is', 'in', 'to', 'it', 'of', 'that', 'with', 'for', 'as', 'on'])  # Example set\n    words = text.split()\n    unknown_words = sum(1 for word in words if word.lower() not in dictionary)\n    return float(unknown_words) / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Variability of sentence lengths measured by standard deviation\"\n    sentence_lengths = [len(sentence.split()) for sentence in re.split(r'[.!?]', text) if sentence.strip()]\n    if not sentence_lengths:\n        return 0.0\n    mean_length = sum(sentence_lengths) / len(sentence_lengths)\n    variance = sum((x - mean_length) ** 2 for x in sentence_lengths) / len(sentence_lengths)\n    return variance ** 0.5  # Return standard deviation as a measure of variability\n", "def feature(text: str) -> float:\n    \"Count of complex words (more than 3 syllables) in the text\"\n    return len(re.findall(r'\\b\\w*[aeiou]{3,}\\w*\\b', text))\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = re.split(r'[.!?]', text)\n    word_counts = [len(sentence.split()) for sentence in sentences if sentence]\n    if not word_counts:\n        return 0.0\n    return sum(word_counts) / len(word_counts)\n\n", "def feature(text: str) -> float:\n    \"Count of occurrences of the words 'I', 'me', 'my', and 'mine' to assess personal expression\"\n    personal_pronouns = sum(text.lower().count(pronoun) for pronoun in ['i', 'me', 'my', 'mine'])\n    return float(personal_pronouns)\n\n", "def feature(text: str) -> float:\n    \"Ratio of punctuation marks to word count in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = len(text.split())\n    return punctuation_count / words if words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest continuous sequence of characters that are not whitespace\"\n    longest_sequence = max(len(seq) for seq in re.findall(r'\\S+', text))\n    return float(longest_sequence)\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that are questions to total sentences\"\n    total_sentences = len(re.findall(r'[.!?]', text))\n    question_sentences = len(re.findall(r'\\?', text))\n    return question_sentences / total_sentences if total_sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Total number of words containing digits in the text\"\n    return float(len(re.findall(r'\\b\\w*\\d\\w*\\b', text)))\n\n", "def feature(text: str) -> float:\n    \"Measure of text coherence based on consecutive repeating words\"\n    words = text.split()\n    return sum(1 for i in range(1, len(words)) if words[i] == words[i-1]) / len(words) if words else 0.0\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text\"\n    words = text.split()\n    unique_words = len(set(words))\n    return float(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Average sentence length in words\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    word_count = len(text.split())\n    return float(word_count) / sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of uppercase letters to total characters\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return float(uppercase_count) / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = len(re.findall(r'[.!?]', text)) or 1\n    words = len(text.split())\n    return float(words) / sentences\n\n", "def feature(text: str) -> float:\n    \"Frequency of punctuation marks in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return float(punctuation_count) / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of specific keywords or phrases indicating casual speech\"\n    casual_keywords = ['I guess', 'Shut up', 'what the hell', 'you can say']\n    keyword_count = sum(text.count(kw) for kw in casual_keywords)\n    return float(keyword_count)\n\n", "def feature(text: str) -> float:\n    \"Length of the longest word in the text\"\n    words = text.split()\n    longest_word_length = max((len(word) for word in words), default=0)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences that start with a conjunction\"\n    sentences = text.count('.') + text.count('!') + text.count('?')\n    conjunction_starters = sum(1 for sentence in re.split(r'[.!?]', text) if sentence.strip().startswith(('and', 'but', 'or')))\n    return float(conjunction_starters) / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks as a ratio of total sentences\"\n    exclamation_count = text.count('!')\n    sentences = text.count('.') + text.count('!') + text.count('?') or 1\n    return float(exclamation_count) / sentences\n", "def feature(text: str) -> float:\n    \"Average sentence length in terms of word count\"\n    sentences = re.findall(r'[.!?]', text)\n    if len(sentences) == 0:\n        return 0.0\n    return len(text.split()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of improperly capitalized words (not start of a sentence)\"\n    words = text.split()\n    count = sum(1 for word in words if word.islower() and word[0].isupper())\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Count of complex words (more than 6 characters) in the text\"\n    words = text.split()\n    count = sum(1 for word in words if len(word) > 6)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Average length of punctuation marks in the text\"\n    punctuation = [c for c in text if not c.isalnum() and not c.isspace()]\n    if not punctuation:\n        return 0.0\n    return len(punctuation) / len(set(punctuation))\n\n", "def feature(text: str) -> float:\n    \"Ratio of questions (sentences ending with ?) to total sentences\"\n    question_count = text.count('?')\n    total_sentences = text.count('.') + text.count('!') + question_count\n    if total_sentences == 0:\n        return 0.0\n    return question_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamation marks to total sentences\"\n    exclamation_count = text.count('!')\n    total_sentences = text.count('.') + text.count('?') + exclamation_count\n    if total_sentences == 0:\n        return 0.0\n    return exclamation_count / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase letters to total letters\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    letter_count = sum(1 for c in text if c.isalpha())\n    if letter_count == 0:\n        return 0.0\n    return uppercase_count / letter_count\n\n", "def feature(text: str) -> float:\n    \"Count of words in the text that start with a vowel\"\n    words = text.split()\n    count = sum(1 for word in words if word[0].lower() in 'aeiou')\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Ratio of questions to total sentences in the text\"\n    sentences = len(re.findall(r'[.!?]', text))\n    questions = text.count('?')\n    if sentences == 0:\n        return 0.0\n    return questions / sentences\n\n", "def feature(text: str) -> float:\n    \"Count of unique capitalization styles in the text\"\n    words = text.split()\n    capitalized = sum(1 for word in words if word[0].isupper())\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return capitalized / total_words\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 3 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{3,}\\b', text))  # Placeholder for real complexity measure\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return complex_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs in the text\"\n    paragraphs = text.split('\\n')\n    return float(len(paragraphs))\n\n", "def feature(text: str) -> float:\n    \"Punctuation to word count ratio in the text\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    words = len(text.split())\n    if words == 0:\n        return 0.0\n    return punctuation_count / words\n\n", "def feature(text: str) -> float:\n    \"Score based on the presence of rare words compared to total words\"\n    rare_words = len(re.findall(r'\\b\\w{10,}\\b', text))  # Placeholder for real rarity measure\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return rare_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Variance in word length in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    lengths = [len(word) for word in words]\n    mean_length = sum(lengths) / len(lengths)\n    variance = sum((x - mean_length) ** 2 for x in lengths) / len(lengths)\n    return variance\n\n", "def feature(text: str) -> float:\n    \"Ratio of sentences that have over 15 words\"\n    sentences = re.findall(r'[^.!?]+', text)\n    long_sentences = sum(1 for sentence in sentences if len(sentence.split()) > 15)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return long_sentences / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of unique words to total words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    unique_words = len(set(words))\n    return unique_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that contain question marks\"\n    return len(re.findall(r'\\?.*?[.!?]', text))\n\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence\"\n    sentences = re.findall(r'\\w.*?[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in sentences) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that are longer than 7 characters\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    long_words = sum(1 for word in words if len(word) > 7)\n    return long_words / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of exclamation marks in the text\"\n    return text.count('!')\n\n", "def feature(text: str) -> float:\n    \"Count of paragraphs defined by double line breaks\"\n    return text.count('\\n\\n')\n\n", "def feature(text: str) -> float:\n    \"Average character length of words in the text\"\n    words = text.split()\n    if len(words) == 0:\n        return 0.0\n    return sum(len(word) for word in words) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Ratio of non-alphanumeric characters to total characters in the text\"\n    non_alnum_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return non_alnum_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of sentences per paragraph\"\n    paragraphs = text.split('\\n\\n')\n    sentences = re.findall(r'\\w.*?[.!?]', text)\n    if len(paragraphs) == 0:\n        return 0.0\n    return len(sentences) / len(paragraphs) if len(sentences) > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Counts the number of unique characters in the text\"\n    return float(len(set(text)))\n\n", "def feature(text: str) -> float:\n    \"Measures the complexity of the vocabulary using the average length of unique words\"\n    unique_words = set(text.split())\n    if not unique_words:\n        return 0.0\n    return sum(len(word) for word in unique_words) / len(unique_words)\n\n", "def feature(text: str) -> float:\n    \"Counts the number of adverbs in the text based on common endings\"\n    adverb_count = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverb_count)\n\n", "def feature(text: str) -> float:\n    \"Calculates the punctuation density, specifically focusing on unique punctuation marks\"\n    unique_punctuation = set(c for c in text if not c.isalnum() and not c.isspace())\n    if len(text) == 0:\n        return 0.0\n    return float(len(unique_punctuation)) / len(text)\n\n", "def feature(text: str) -> float:\n    \"Calculates the ratio of complex words (more than 3 syllables) to total words\"\n    complex_word_count = len(re.findall(r'\\b\\w{4,}\\b', text))\n    total_word_count = len(text.split())\n    if total_word_count == 0:\n        return 0.0\n    return float(complex_word_count) / total_word_count\n\n", "def feature(text: str) -> float:\n    \"Determines the sentiment polarity of the text (range from -1.0 to 1.0) using simple heuristic\"\n    positive_words = {'good', 'great', 'happy', 'joy', 'love', 'wonderful'}\n    negative_words = {'bad', 'sad', 'hate', 'angry', 'terrible'}\n    words = text.split()\n    pos_count = sum(1 for word in words if word.lower() in positive_words)\n    neg_count = sum(1 for word in words if word.lower() in negative_words)\n    total_count = len(words)\n    if total_count == 0:\n        return 0.0\n    return float(pos_count - neg_count) / total_count\n\n", "def feature(text: str) -> float:\n    \"Computes the length of the longest sentence in the text\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    return float(max(len(sentence.split()) for sentence in sentences))\n\n", "def feature(text: str) -> float:\n    \"Counts the instances of dialogue phrases (e.g., 'he said', 'she asked')\"\n    dialogue_phrases = ['said', 'asked', 'told', 'replied', 'whispered', 'shouted']\n    count = sum(text.lower().count(phrase) for phrase in dialogue_phrases)\n    return float(count)\n", "def feature(text: str) -> float:\n    \"Ratio of verbs to total words in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    verb_count = sum(1 for word in words if word.endswith('ing') or word in ['is', 'are', 'was', 'were', 'be', 'being'])\n    return verb_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text as a proportion of total words\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(adverbs) / len(words)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.findall(r'[^.!?]+[.!?]', text)\n    if not sentences:\n        return 0.0\n    clause_count = sum(len(re.findall(r'[,\\s]?(and|or|but)[,\\s]?', sentence)) + 1 for sentence in sentences)\n    return clause_count / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Average number of speech markers (like 'he said', 'she replied') per 100 words\"\n    markers = re.findall(r'\\b(said|replied|asked|told|exclaimed|noted)\\b', text, re.IGNORECASE)\n    words = text.split()\n    if not words:\n        return 0.0\n    return (len(markers) / len(words)) * 100\n\n", "def feature(text: str) -> float:\n    \"Ratio of abstract nouns to total nouns in the text\"\n    nouns = re.findall(r'\\b\\w+(ion|ment|ness|ity|ship|ing)\\b', text)\n    abstract_nouns = re.findall(r'\\b\\w+(ion|ment|ness|ity|ship)\\b', text)\n    if len(nouns) == 0:\n        return 0.0\n    return len(abstract_nouns) / len(nouns)\n\n", "def feature(text: str) -> float:\n    \"Count of negative sentiment words as a proportion of total words\"\n    negative_words = ['not', 'no', 'never', 'nothing', 'nobody', 'neither', 'nowhere']\n    words = text.split()\n    negative_count = sum(1 for word in words if word.lower() in negative_words)\n    return negative_count / len(words) if words else 0.0\n\n", "def feature(text: str) -> float:\n    \"Density of descriptive adjectives in the text\"\n    adjectives = re.findall(r'\\b(?:beautiful|quick|blue|large|tiny|bright|dark|loud|soft)\\b', text)\n    words = text.split()\n    if not words:\n        return 0.0\n    return len(adjectives) / len(words)\n", "def feature(text: str) -> float:\n    \"Count the number of distinct sentence structures in the text.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    structures = set()\n    for sentence in re.split(r'[.!?]', text):\n        words = sentence.strip().split()\n        structures.add((len(words), sum(1 for word in words if len(word) > 7)))\n    return float(len(structures))\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (more than 6 characters) to total words.\"\n    words = text.split()\n    if not words:\n        return 0.0\n    complex_word_count = sum(1 for word in words if len(word) > 6)\n    return complex_word_count / len(words)\n\n", "def feature(text: str) -> float:\n    \"Frequency of specific transition words (however, therefore, etc.) in the text.\"\n    transition_words = ['however', 'therefore', 'moreover', 'furthermore']\n    word_count = len(text.split())\n    if word_count == 0:\n        return 0.0\n    transition_count = sum(text.lower().count(word) for word in transition_words)\n    return transition_count / word_count\n\n", "def feature(text: str) -> float:\n    \"Count of adjectives in the text as a measure of descriptiveness.\"\n    adjectives = re.findall(r'\\b(?:[a-zA-Z]+(?:-|\\s)?[a-zA-Z]*)\\b', text)\n    count = sum(1 for adj in adjectives if re.search(r'\\b(?:beautiful|quick|happy|sad|smart)\\b', adj, re.IGNORECASE))\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Calculate average sentence complexity measured by average words per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    long_sentences = [s.strip() for s in sentences if s.strip()]\n    if not long_sentences:\n        return 0.0\n    return sum(len(sentence.split()) for sentence in long_sentences) / len(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_pattern = r'\\b(?:what|who|when|where|why|how)\\s+\\S+\\s*\\?\\s*'\n    questions = re.findall(rhetorical_pattern, text, re.IGNORECASE)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Measure of how many unique nouns in the text are present.\"\n    nouns = re.findall(r'\\b\\w+\\b', text)\n    unique_nouns = set(n for n in nouns if n.istitle())\n    return float(len(unique_nouns))\n\n", "def feature(text: str) -> float:\n    \"Count of quotes or dialogue marks in the text as an indicator of style.\"\n    quote_count = text.count('\"') + text.count(\"'\")\n    return float(quote_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of negative sentiment words (like -less, -not) to total words.\"\n    negative_words = ['no', 'not', 'none', 'never', 'without']\n    words = text.split()\n    if not words:\n        return 0.0\n    negative_count = sum(1 for word in words if word in negative_words)\n    return negative_count / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of paragraphs that start with a capital letter to total paragraphs.\"\n    paragraphs = text.split('\\n\\n')\n    if not paragraphs:\n        return 0.0\n    capital_start_count = sum(1 for p in paragraphs if p.strip() and p[0].isupper())\n    return capital_start_count / len(paragraphs)\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return len(text) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Count of metaphors or idiomatic expressions in the text.\"\n    metaphor_pattern = r'\\b(?:like|as|seems|appears|sounds|feels|smells)\\b'\n    return float(len(re.findall(metaphor_pattern, text, re.IGNORECASE)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of rhetorical questions to total questions in the text.\"\n    total_questions = text.count('?')\n    rhetorical_questions = len(re.findall(r'(?<!\\w)(?:Isn\\'t it|Don\\'t you think|Wouldn\\'t you agree)(\\s|\\?)', text))\n    return rhetorical_questions / total_questions if total_questions > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Percentage of lines with less than three words.\"\n    lines = text.split('\\n')\n    short_lines = sum(1 for line in lines if len(line.split()) < 3)\n    return short_lines / len(lines) if lines else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique emotional words in the text.\"\n    emotional_word_list = ['happy', 'sad', 'angry', 'joy', 'fear', 'love', 'hate', 'surprised', 'excited', 'bored']\n    words = set(text.lower().split())\n    return float(len(words.intersection(emotional_word_list)))\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text.\"\n    conjunctions = ['and', 'or', 'but', 'so', 'for', 'nor', 'yet']\n    words = text.split()\n    if not words:\n        return 0.0\n    conjunction_count = sum(1 for word in words if word.lower() in conjunctions)\n    return conjunction_count / len(words)\n", "def feature(text: str) -> float:\n    \"Average number of words per sentence in the text\"\n    sentences = len(re.findall(r'[.!?]', text)) + 1\n    words = len(text.split())\n    if sentences == 0:\n        return 0.0\n    return words / sentences\n\n", "def feature(text: str) -> float:\n    \"Ratio of conjunctions to total words in the text\"\n    conjunctions = re.findall(r'\\b(and|or|but|so|for|nor|yet|although|while|where|because)\\b', text.lower())\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(conjunctions) / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text\"\n    questions = re.findall(r'\\b\\w+\\?\\b', text)\n    return float(len(questions))\n\n", "def feature(text: str) -> float:\n    \"Proportion of exclamatory sentences to total sentences in the text\"\n    exclamations = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return exclamations / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of the longest word in the text\"\n    words = text.split()\n    if not words:\n        return 0.0\n    longest_word_length = max(len(word) for word in words)\n    return float(longest_word_length)\n\n", "def feature(text: str) -> float:\n    \"Count of instances of specific emotional words in the text\"\n    emotional_words = ['happy', 'sad', 'angry', 'excited', 'frustrated']\n    count = sum(text.lower().count(word) for word in emotional_words)\n    return float(count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of uppercase to total characters in the text\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    total_characters = len(text)\n    if total_characters == 0:\n        return 0.0\n    return uppercase_count / total_characters\n\n", "def feature(text: str) -> float:\n    \"Ratio of compound words (hyphenated or combined) to total words\"\n    compound_words = re.findall(r'\\b\\w+-\\w+\\b', text)\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return len(compound_words) / total_words\n", "def feature(text: str) -> float:\n    \"Count of words that are often used in AI-generated text.\"\n    common_ai_words = ['there', 'is', 'are', 'the', 'you', 'to', 'and', 'of', 'that']\n    word_list = text.lower().split()\n    ai_word_count = sum(1 for word in word_list if word in common_ai_words)\n    return ai_word_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique phrases (containing two or more words) in the text.\"\n    phrases = set()\n    words = text.split()\n    for i in range(len(words) - 1):\n        phrase = ' '.join(words[i:i + 2])\n        phrases.add(phrase)\n    return float(len(phrases))\n\n", "def feature(text: str) -> float:\n    \"Ratio of the number of modal verbs to the total number of verbs in the text.\"\n    modal_verbs = {'can', 'could', 'may', 'might', 'must', 'shall', 'should', 'will', 'would'}\n    verbs = re.findall(r'\\b\\w+ed\\b|\\b\\w+s\\b|\\b\\w+ing\\b', text)\n    modal_count = sum(1 for word in verbs if word.lower() in modal_verbs)\n    return modal_count / len(verbs) if verbs else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (three or more syllables) to total words.\"\n    complex_word_pattern = r'\\b\\w{3,}\\b'\n    complex_words = len(re.findall(complex_word_pattern, text))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Presence of emotional content words in the text.\"\n    emotional_words = ['love', 'hate', 'happy', 'sad', 'angry', 'fear', 'joy', 'disgust']\n    word_list = text.lower().split()\n    emotion_count = sum(1 for word in word_list if word in emotional_words)\n    return emotion_count / len(word_list) if word_list else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of adjectives per sentence.\"\n    sentences = re.split(r'[.!?]', text)\n    adj_count = sum(len(re.findall(r'\\b\\w+ly\\b|\\b\\w+able\\b|\\b\\w+ful\\b', sentence)) for sentence in sentences)\n    return adj_count / len(sentences) if sentences else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    rhetorical_question_pattern = r'\\b\\w+\\?\\s*([^?.]*)\\?\\b'\n    rhetorical_count = len(re.findall(rhetorical_question_pattern, text))\n    return float(rhetorical_count)\n\n", "def feature(text: str) -> float:\n    \"Ratio of nouns to total words in the text.\"\n    nouns_pattern = r'\\b(?:[A-Z][a-z]*|\\w+ed|\\w+s)\\b'  # Basic noun pattern\n    nouns = len(re.findall(nouns_pattern, text))\n    total_words = len(text.split())\n    return nouns / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of instances of intentional ambiguity in the text.\"\n    ambiguous_words = ['maybe', 'perhaps', 'possibly', 'likely']\n    word_list = text.lower().split()\n    ambiguous_count = sum(1 for word in word_list if word in ambiguous_words)\n    return ambiguous_count / len(word_list) if word_list else 0.0\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of uppercase letters to total characters in the text.\"\n    uppercase_count = sum(1 for c in text if c.isupper())\n    return uppercase_count / len(text) if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Measure the average length of sentences in terms of character count.\"\n    sentences = len(re.findall(r'[.!?]', text))\n    total_length = len(text)\n    return total_length / sentences if sentences > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of distinct verbs in the text.\"\n    words = text.split()\n    verb_count = sum(1 for word in words if word.lower() in {'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had'})  # A simple list of verbs\n    return float(verb_count)\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of quotes to total sentences in the text.\"\n    quote_count = text.count('\"')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return quote_count / sentence_count if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the frequency of the word 'I' in the text.\"\n    count_I = text.lower().count('i')\n    total_words = len(re.findall(r'\\w+', text))\n    return count_I / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Calculate the ratio of unique words to total words in the text.\"\n    words = text.split()\n    unique_words = len(set(words))\n    return unique_words / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count the number of sentences that end with a question mark.\"\n    question_count = text.count('?')\n    sentence_count = len(re.findall(r'[.!?]', text))\n    return question_count / sentence_count if sentence_count > 0 else 0.0\n", "def feature(text: str) -> float:\n    \"Ratio of complex words (words with more than 5 syllables) to total words\"\n    complex_words = len(re.findall(r'\\b\\w{5,}\\b', text))\n    total_words = len(text.split())\n    return complex_words / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of adverbs in the text\"\n    adverbs = len(re.findall(r'\\b\\w+ly\\b', text))\n    return float(adverbs)\n\n", "def feature(text: str) -> float:\n    \"Average number of clauses per sentence\"\n    sentences = re.split(r'[.!?]', text)\n    clauses = sum(text.count(',') + text.count(';') for text in sentences)\n    return clauses / len(sentences) if len(sentences) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average sentence length measured in character count\"\n    sentences = re.split(r'[.!?]', text)\n    average_length = sum(len(sentence) for sentence in sentences) / len(sentences) if sentences else 0\n    return average_length\n\n", "def feature(text: str) -> float:\n    \"Count of sentences longer than 20 words\"\n    long_sentences = len([s for s in re.split(r'[.!?]', text) if len(s.split()) > 20])\n    return float(long_sentences)\n\n", "def feature(text: str) -> float:\n    \"Ratio of dialogue to total words in the text\"\n    dialogue = text.count('\"') // 2  # Count pairs of quotes for dialogue\n    total_words = len(text.split())\n    return dialogue / total_words if total_words > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Ratio of quotes to total sentences in the text.\"\n    quote_count = text.count('\"') + text.count(\"'\")\n    sentence_count = text.count('.') + text.count('!') + text.count('?')\n    return float(quote_count / sentence_count) if sentence_count > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in characters.\"\n    sentences = re.findall(r'[.!?]', text)\n    if not sentences:\n        return 0.0\n    return sum(len(sentence.strip()) for sentence in re.split(r'[.!?]', text) if sentence.strip()) / len(sentences)\n\n", "def feature(text: str) -> float:\n    \"Frequency of conjunctions (and, but, or) in the text.\"\n    conjunctions = [' and ', ' but ', ' or ']\n    count = sum(text.lower().count(conj) for conj in conjunctions)\n    return float(count) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of transitional phrases (e.g., however, therefore) in the text.\"\n    transitions = [' however ', ' therefore ', ' moreover ', ' consequently ', ' thus ']\n    count = sum(text.lower().count(trans) for trans in transitions)\n    return float(count) / len(text.split()) if len(text.split()) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average number of punctuation marks per 100 characters.\"\n    punctuation_count = sum(1 for c in text if not c.isalnum() and not c.isspace())\n    return (punctuation_count / len(text)) * 100 if len(text) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Count of unique verbs in the text.\"\n    verbs = set(re.findall(r'\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+s\\b', text.lower()))\n    return float(len(verbs))\n\n", "def feature(text: str) -> float:\n    \"Proportion of words that appear in a common AI-generated language model dataset.\"\n    ai_word_list = ['artificial', 'intelligence', 'data', 'algorithm', 'machine']\n    words = text.split()\n    count = sum(1 for word in words if word.lower() in ai_word_list)\n    return float(count) / len(words) if len(words) > 0 else 0.0\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word, which can indicate complexity.\"\n    def count_syllables(word):\n        return sum(1 for char in word if char in 'aeiou')\n\n    words = text.split()\n    if not words:\n        return 0.0\n    return sum(count_syllables(word) for word in words) / len(words)\n", "def feature(text: str) -> float:\n    \"Ratio of quotes to total words in the text.\"\n    quotes = text.count('\"')\n    total_words = len(text.split())\n    if total_words == 0:\n        return 0.0\n    return quotes / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of unique words in the text, normalized by total words.\"\n    words = text.lower().split()\n    unique_words = len(set(words))\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return unique_words / total_words\n\n", "def feature(text: str) -> float:\n    \"Average syllables per word in the text.\"\n    def syllable_count(word: str) -> int:\n        return sum(1 for char in word if char in 'aeiou')\n    \n    words = text.split()\n    total_syllables = sum(syllable_count(word) for word in words)\n    total_words = len(words)\n    if total_words == 0:\n        return 0.0\n    return total_syllables / total_words\n\n", "def feature(text: str) -> float:\n    \"Count of rhetorical questions in the text.\"\n    questions = len(re.findall(r'\\b(?:what|who|where|when|why|how)\\b.*\\?', text.lower()))\n    return float(questions)\n\n", "def feature(text: str) -> float:\n    \"Ratio of exclamations to total sentences in the text.\"\n    exclamations = text.count('!')\n    total_sentences = text.count('.') + text.count('!') + text.count('?')\n    if total_sentences == 0:\n        return 0.0\n    return exclamations / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Proportion of sentences containing at least one conjunction.\"\n    sentences = re.split(r'[.!?]', text)\n    conjunctions = sum(1 for sentence in sentences if any(word in sentence for word in ['and', 'but', 'or']))\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return conjunctions / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Average length of sentences in terms of character count.\"\n    sentences = re.split(r'[.!?]', text)\n    total_length = sum(len(sentence) for sentence in sentences)\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return total_length / total_sentences\n\n", "def feature(text: str) -> float:\n    \"Count of sentences that start with a conjunction.\"\n    sentences = re.split(r'[.!?]', text)\n    conjunction_start_count = sum(1 for sentence in sentences if sentence.strip().startswith(('and', 'but', 'or')))\n    total_sentences = len(sentences)\n    if total_sentences == 0:\n        return 0.0\n    return conjunction_start_count / total_sentences\n\n"]}