{
  "used_features": [
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel values in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast measure based on standard deviation of grayscale image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.std() / gray.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the corners of the image\"\n    h, w = image.shape[:2]\n    corners = np.concatenate((image[:h//4, :w//4], image[:h//4, 3*w//4:w],\n                               image[3*h//4:h, :w//4], image[3*h//4:h, 3*w//4:w]), axis=0)\n    return float(np.mean(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total edge strength calculated from the gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    edge_strength = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.sum(edge_strength))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than a threshold) in the image\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the blue channel to the red channel in RGB images\"\n    if len(image.shape) == 3:\n        blue_mean = np.mean(image[:,:,2])\n        red_mean = np.mean(image[:,:,0])\n        return float(blue_mean / (red_mean if red_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between mean intensity of the center region and the corners\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    corners = np.concatenate((image[:h//4, :w//4], image[:h//4, 3*w//4:w],\n                               image[3*h//4:h, :w//4], image[3*h//4:h, 3*w//4:w]), axis=0)\n    return float(np.mean(center_region) - np.mean(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram variance of pixel intensities\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    return float(np.var(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution\"\n    if image.size == 0:\n        return 0.0\n    flat_image = image.flatten()\n    mean = np.mean(flat_image)\n    std = np.std(flat_image)\n    if std == 0:\n        return 0.0\n    skewness = np.sum(((flat_image - mean) / std) ** 3) / len(flat_image)\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the image divided by the standard deviation\"\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.mean() / (gray.std() if gray.std() > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (intensity lower than a threshold) in the image\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity in the image\"\n    return float(np.median(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of unique colors to total pixel count\"\n    unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0).shape[0] if len(image.shape) == 3 else np.unique(image).shape[0]\n    total_pixels = image.size\n    return float(unique_colors / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with high intensity (greater than a threshold)\"\n    threshold = 150\n    high_intensity_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(high_intensity_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the green channel to the average intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        green_mean = np.mean(image[:,:,1])\n        red_mean = np.mean(image[:,:,0])\n        return float(green_mean / (red_mean if red_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.sum(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are predominantly in the red channel\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0]\n        return float(np.count_nonzero(red_channel > np.mean(red_channel)))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    darkest_quarter = image[h//2:, w//2:]\n    return float(np.mean(darkest_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity values in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image covered by pixels above the median intensity\"\n    median_val = np.median(image)\n    above_median = np.count_nonzero(image > median_val)\n    total_pixels = image.size\n    return float(above_median / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of saturated pixels (pixel intensity at max) to total pixels\"\n    saturated_pixels = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(saturated_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along the x-axis\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(gradient_x)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        green_channel = image[:,:,1]\n        return float(np.std(green_channel))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of horizontal edges in the image using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y = np.gradient(gray, axis=0)\n    edge_count = np.count_nonzero(np.abs(gradient_y) > np.std(gradient_y))\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of unique values in the image\"\n    return float(len(np.unique(image)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image covered by pixels below the average intensity\"\n    avg_val = np.mean(image)\n    below_avg = np.count_nonzero(image < avg_val)\n    total_pixels = image.size\n    return float(below_avg / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:]\n    return float(np.sum(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of red channel to the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along the y-axis\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(gradient_y)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation in the image (for RGB images)\"\n    if len(image.shape) == 3:\n        hsv_image = np.dot(image[...,:3], [[0.299], [0.587], [0.114]])\n        saturation = np.mean(image / (hsv_image + 1e-5), axis=2)\n        return float(np.mean(saturation))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast of the image calculated as the difference between max and min pixel values\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the image calculated in a horizontal stripe at the center\"\n    h, w = image.shape[:2]\n    stripe_region = image[h//2 - h//10:h//2 + h//10, :]\n    return float(np.mean(stripe_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of unique pixel values in the image\"\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are dark (below a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values across the color channels for RGB images\"\n    if len(image.shape) == 3:\n        pixel_variance = np.std(image, axis=(0, 1))\n        return float(np.mean(pixel_variance))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value in the center region as a percentage of the maximum value\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region) / 255.0)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge density calculated as ratio of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    edge_strength = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_pixels = np.count_nonzero(edge_strength > 0)\n    return float(edge_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest pixels (top 10%)\"\n    threshold = np.percentile(image, 90)\n    bright_pixels = image[image >= threshold]\n    return float(np.mean(bright_pixels)) if bright_pixels.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensity of the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are predominantly in the green channel\"\n    if len(image.shape) == 3:\n        green_channel = image[:,:,1]\n        return float(np.count_nonzero(green_channel > np.mean(green_channel)))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_h, center_w = h // 4, w // 4\n    center_region = image[center_h:3*center_h, center_w:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across both axes\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    return float(np.mean(np.sqrt(gradient_x**2 + gradient_y**2)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of minimum to maximum pixel values in the image\"\n    min_val = np.min(image)\n    max_val = np.max(image)\n    return float(min_val / (max_val if max_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variability in pixel intensity (std divided by mean)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.std() / (gray.mean() if gray.mean() > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the image corners\"\n    h, w = image.shape[:2]\n    corners = np.concatenate((image[:h//4, :w//4], image[:h//4, 3*w//4:w],\n                               image[3*h//4:h, :w//4], image[3*h//4:h, 3*w//4:w]), axis=0)\n    return float(np.mean(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    threshold = 200  # Assuming pixel values are in range 0-255\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > threshold)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest channel in the image\"\n    if len(image.shape) == 3:\n        min_channel = np.min(image, axis=2)\n        return float(np.mean(min_channel))\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray < 30))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference between the blue and red channel intensities in RGB images\"\n    if len(image.shape) == 3:\n        blue_mean = np.mean(image[:,:,2])\n        red_mean = np.mean(image[:,:,0])\n        return float(blue_mean - red_mean)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    white_pixels = np.count_nonzero(image >= 255)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of non-zero pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along both axes in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the most intense color channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max([np.mean(image[:,:,0]), np.mean(image[:,:,1]), np.mean(image[:,:,2])]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    if len(center_region.shape) == 3:\n        gray = np.mean(center_region, axis=2)\n    else:\n        gray = center_region\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top half of the image\"\n    h, _ = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sharpness measure based on variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        green_mean = np.mean(image[:, :, 1])\n        return float(green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the image based on intensity histogram\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=[0,256])\n    hist = hist / np.sum(hist + 1e-5)\n    return float(-np.sum(hist * np.log(hist + 1e-5)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of edges detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.sum(np.abs(np.gradient(gray)))\n    return float(edges)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum intensity value in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (above a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the blue channel to the green channel in RGB images\"\n    if len(image.shape) == 3:\n        blue_mean = np.mean(image[:, :, 2])\n        green_mean = np.mean(image[:, :, 1])\n        return float(blue_mean / (green_mean if green_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image (intensity > threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the maximum pixel value to minimum pixel value\"\n    max_val = image.max()\n    min_val = image.min()\n    return float(max_val / (min_val if min_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the full image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_mag = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient_mag))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_quarter = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-10  # avoid log(0)\n    entropy = -np.sum(histogram * np.log(histogram))\n    return float(entropy)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image covered by pixels below the 25th percentile intensity\"\n    percentile_25 = np.percentile(image, 25)\n    below_percentile = np.count_nonzero(image < percentile_25)\n    total_pixels = image.size\n    return float(below_percentile / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel values in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the image\"\n    return float(np.count_nonzero(image == 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the mean intensity of the green channel to the mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        green_mean = np.mean(image[:,:,1])\n        blue_mean = np.mean(image[:,:,2])\n        return float(green_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the whole image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of all pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    return float(np.count_nonzero(image) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_region = image[0:h//2, 0:w//2]\n    return float(np.mean(top_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between mean intensity of brightest and darkest regions\"\n    h, w = image.shape[:2]\n    bright_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(bright_region) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to average pixel value\"\n    return float(np.max(image) / (image.mean() if image.mean() > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels in the image (below a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    return float(dark_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the red channel (if RGB)\"\n    if len(image.shape) == 3:\n        return float(image[:,:,0].std())\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique colors in the image\"\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n    else:\n        unique_colors = np.unique(image)\n    return float(len(unique_colors))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the maximum to minimum pixel intensity in the image\"\n    max_intensity = np.max(image)\n    min_intensity = np.min(image)\n    return float(max_intensity / (min_intensity if min_intensity > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image normalized by total pixels\"\n    return float(np.sum(image) / (image.size if image.size > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude calculated for the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    edge_strength = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(edge_strength))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the red channel to the green channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        green_mean = np.mean(image[:,:,1])\n        return float(red_mean / (green_mean if green_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the edges detected using sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same').reshape(gray.shape))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same').reshape(gray.shape))\n    return float(np.mean(edges_x + edges_y))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to minimum pixel value\"\n    return float(np.max(image) / (np.min(image) if np.min(image) > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixel values above average intensity\"\n    avg_intensity = np.mean(image)\n    return float(np.count_nonzero(image > avg_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude calculated from all channels\"\n    if len(image.shape) == 3:\n        gradients = [np.gradient(image[:,:,i]) for i in range(3)]\n        gradient_magnitudes = [np.sqrt(g[0]**2 + g[1]**2) for g in gradients]\n        return float(np.max(gradient_magnitudes))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.sum(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.min(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the upper left quadrant\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the green channel for RGB images\"\n    if len(image.shape) == 3:\n        green_channel = image[:,:,1]\n        return float(np.std(green_channel))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    num_nonzero = np.count_nonzero(image)\n    total_pixels = np.prod(image.shape[:2])\n    return float(num_nonzero / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast of the image defined as difference between max and min intensity\"\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the red channel to the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average variance in pixel intensity across all channels\"\n    if len(image.shape) == 3:\n        return float(np.var(image))\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower right quadrant\"\n    h, w = image.shape[:2]\n    lower_right = image[h//2:, w//2:]\n    return float(np.mean(lower_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total pixel volume (sum of all pixel intensities)\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity around the center region, disproportionately emphasized\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region) * 1.5)  # Emphasizing the center region\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    if len(image.shape) == 3:\n        white_pixels = np.count_nonzero(np.mean(image, axis=2) > 240)\n    else:\n        white_pixels = np.count_nonzero(image > 240)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensities\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the number of color channels contributing to the image\"\n    if len(image.shape) == 3:\n        return float(np.count_nonzero(np.mean(image, axis=(0, 1)) > 0))\n    return 1.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along both x and y axes combined\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.abs(np.gradient(gray, axis=1))\n    gradient_y = np.abs(np.gradient(gray, axis=0))\n    return float(np.mean(gradient_x + gradient_y))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of intense (above a threshold) pixels in the image\"\n    threshold = 200\n    total_pixels = np.prod(image.shape[:2])\n    intense_pixels = np.count_nonzero(image > threshold)\n    return float(intense_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average difference in pixel intensity across channels for RGB images\"\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.mean(np.ptp(channel_means)))  # Peak to peak (max - min)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-black pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    non_black_pixels = np.count_nonzero(image > 10)\n    return float(non_black_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Normalized sum of pixel intensities in the image\"\n    total_intensity = np.sum(image)\n    total_pixels = np.prod(image.shape[:2]) * (3 if len(image.shape) == 3 else 1)\n    return float(total_intensity / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom-right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels in the image\"\n    threshold = 50  # Assuming pixel values are in range 0-255\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < threshold)\n    total_pixels = gray.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity across the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of minimum pixel value to maximum pixel value\"\n    return float(np.min(image) / (np.max(image) if np.max(image) > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude computed in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram-based measure: variance of pixel intensities\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=(0, 256))\n    return float(np.var(histogram))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color contrast between the RGB channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0] - image[:, :, 1]) + np.mean(image[:, :, 0] - image[:, :, 2]) + np.mean(image[:, :, 1] - image[:, :, 2])) / 3\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the blue channel\"\n    if len(image.shape) == 3:\n        blue_channel = image[:,:,2]\n        return float(np.count_nonzero(blue_channel) / blue_channel.size)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities to measure contrast\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image (above a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the corners of the image\"\n    h, w = image.shape[:2]\n    corners = image[:h//4, :w//4] + image[:h//4, 3*w//4:] + image[3*h//4:, :w//4] + image[3*h//4:, 3*w//4:]\n    return float(np.mean(corners) / 4)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels in the image (above a threshold)\"\n    threshold = 220\n    white_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between center and corners\"\n    h, w = image.shape[:2]\n    center = image[h//4:3*h//4, w//4:3*w//4]\n    corners = image[:h//4, :w//4] + image[:h//4, 3*w//4:] + image[3*h//4:, :w//4] + image[3*h//4:, 3*w//4:]\n    return float(np.mean(center) - np.mean(corners) / 4)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude considering all channels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    grad_y = np.gradient(gray, axis=0)\n    return float(np.mean(np.sqrt(grad_x**2 + grad_y**2)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of color channel differences\"\n    if len(image.shape) == 3:\n        channel_diff = np.abs(image[:,:,0] - image[:,:,1]) + np.abs(image[:,:,0] - image[:,:,2]) + np.abs(image[:,:,1] - image[:,:,2])\n        return float(np.sum(channel_diff))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the image\"\n    return float(np.count_nonzero(image) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the entire image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity along the RGB channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image))\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return -np.sum(hist * np.log(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum difference in pixel intensities between adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.max(np.abs(np.gradient(gray)))\n    return float(gradient)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of edges detected using a simple gradient method\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.count_nonzero(gradient > 10))  # threshold for edge detection\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the corners of the image\"\n    h, w = image.shape[:2]\n    corners = np.array([\n        image[0, 0], \n        image[0, w-1], \n        image[h-1, 0], \n        image[h-1, w-1]\n    ])\n    return float(np.mean(corners))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    return float(bright_pixels / (image.size if image.size > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities to measure contrast\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-black pixels in the image\"\n    return float(np.count_nonzero(image > 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.sum(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel intensities in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of color channels present in the image\"\n    return float(image.shape[2] if len(image.shape) == 3 else 1)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0] - image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels based on a simple threshold in gradient image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    edge_pixels = np.count_nonzero(gradient > 20)  \n    return float(edge_pixels / (image.size if image.size > 0 else 1))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel values in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of zero pixels to total pixel count\"\n    total_pixels = image.size\n    zero_pixels = np.count_nonzero(image == 0)\n    return float(zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:]\n    return float(np.sum(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(image.min())\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright to dark pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 128)\n    dark_pixels = np.count_nonzero(gray <= 128)\n    return float(bright_pixels / (dark_pixels + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in a central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the green channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    return float(np.count_nonzero(image) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the upper half of the image\"\n    h, w = image.shape[:2]\n    upper_half = image[:h//2]\n    return float(np.mean(upper_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0] - image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total intensity of the edges in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.sum(np.abs(np.gradient(gray)))\n    return float(edges)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity across all color channels\"\n    return float(np.mean(image) if len(image.shape) == 3 else np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Texture measure based on pixel intensity variance\"\n    return float(image.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > threshold) in the image\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.max(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensities between the top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the red channel's intensity compared to the average intensity\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        avg_intensity = np.mean(image)\n        return float(red_mean / (avg_intensity if avg_intensity > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the non-zero pixels ratio to total pixels\"\n    return float(np.count_nonzero(image) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity along the image diagonal\"\n    return float(np.mean(np.diagonal(image)) if len(image.shape) == 3 else np.mean(np.diagonal(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of color channel intensities in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image, axis=(0, 1)).mean())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the top-left quadrant of the image\"\n    h, w = image.shape[:2]\n    quadrant = image[:h//2, :w//2]\n    return float(np.mean(quadrant))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the maximum pixel value to the mean pixel value\"\n    mean_val = image.mean()\n    max_val = image.max()\n    return float(max_val / (mean_val if mean_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(right_half.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of non-black pixels in the image\"\n    non_black_pixels = np.count_nonzero(np.sum(image, axis=2) > 0)\n    return float(non_black_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are dark\"\n    total_pixels = np.prod(image.shape[:2])\n    dark_pixels = np.count_nonzero(np.sum(image, axis=2) < 100)\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the green channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central horizontal strip of the image\"\n    h, w = image.shape[:2]\n    horizontal_strip = image[h//2, :]\n    return float(np.mean(horizontal_strip))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:, :, 0]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the full image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of zero-valued pixels in the image\"\n    return float(np.count_nonzero(image == 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Roughness measure based on variance in pixel intensities\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color value of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to the total number of pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude calculated from the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image\"\n    return float(np.count_nonzero(image > 200) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels near maximum intensity\"\n    return float(np.count_nonzero(image >= 255) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference between the maximum and minimum pixel values\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    return float(np.count_nonzero(image) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the image\"\n    return float(image.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Normalized sum of the pixel intensities\"\n    return float(np.sum(image) / (image.size * 255))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are below a brightness threshold\"\n    threshold = 50\n    return float(np.count_nonzero(image < threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h//2:, w//2:] if len(image.shape) == 3 else image[h//2:, w//2:]\n    return float(np.mean(dark_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel compared to the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]) / (np.mean(image[:,:,2]) if np.mean(image[:,:,2]) > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with intensity greater than 150\"\n    return float(np.count_nonzero(image > 150))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist += 1e-10  # avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum difference between adjacent pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.abs(np.gradient(gray, axis=(0, 1)))\n    return float(np.max(gradients))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation in RGB images\"\n    if len(image.shape) == 3:\n        max_colors = np.max(image, axis=2)\n        min_colors = np.min(image, axis=2)\n        return float(np.mean((max_colors - min_colors) / (max_colors + 1e-10)))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (less than a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left = image[0:h//2, 0:w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the whole image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain brightness threshold\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum channel value across RGB channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of red channel intensity to blue channel intensity\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]) / (np.mean(image[:,:,2]) + 1e-5))  # avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation in RGB channels\"\n    if len(image.shape) == 3:\n        hsv = np.dot(image[...,:3], [0.299, 0.587, 0.114])\n        return float(np.mean(hsv))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    distinct_values = np.unique(image)\n    return float(len(distinct_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels with medium intensity (threshold range)\"\n    threshold_low = 100\n    threshold_high = 150\n    medium_intensity = np.count_nonzero((image >= threshold_low) & (image <= threshold_high))\n    total_pixels = image.size\n    return float(medium_intensity / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel intensities\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[h//2:, w//2:]\n    return float(np.mean(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast calculated as the difference between mean of top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    contrast = np.mean(bottom_half) - np.mean(top_half)\n    return float(contrast)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total count of non-zero pixels in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255), density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance in pixel intensity across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image (above a threshold)\"\n    threshold = 200\n    white_pixels = np.count_nonzero(image > threshold)\n    return float(white_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of unique colors in the image\"\n    unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n    return float(unique_colors.shape[0])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.std(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensities of the red and green channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        green_mean = np.mean(image[:, :, 1])\n        return float(red_mean - green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are not empty (non-zero)\"\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity around the borders of the image\"\n    border_pixels = np.concatenate((image[0, :], image[-1, :], image[:, 0], image[:, -1]))\n    return float(np.mean(border_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,2]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    total_pixels = image.size\n    bright_pixels = np.count_nonzero(image > 200)\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across all directions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the image center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast between the brightest and darkest pixels\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color contrast between the blue and red channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2] - image[:, :, 0]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200) / gray.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_quarter = gray[h * 3 // 4:h, :]\n    return float(np.mean(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the width to height of the image\"\n    h, w = image.shape[:2]\n    return float(w) / float(h)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of color intensities across the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of non-black pixels in the image\"\n    return float(np.count_nonzero(image > 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest 1% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 99)\n    return float(np.mean(gray[gray >= threshold]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between the blue channel and green channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2] - image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of distinct pixel values (color depth) in the image\"\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n    else:\n        unique_colors = np.unique(image)\n    return float(len(unique_colors))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the darkest 10% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 10)\n    return float(np.mean(gray[gray <= threshold]))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_count = np.count_nonzero(gray > 200)\n    dark_count = np.count_nonzero(gray < 55)\n    return float(bright_count / (dark_count + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the corners vs. total pixels\"\n    h, w = image.shape[:2]\n    corner_pixels = image[:h//4, :w//4].size + image[:h//4, 3*w//4:].size + image[3*h//4:, :w//4].size + image[3*h//4:, 3*w//4:].size\n    total_pixels = image.size\n    return float(corner_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are pure black (0,0,0) or white (255,255,255)\"\n    if len(image.shape) == 3:\n        black_count = np.count_nonzero(np.all(image == [0, 0, 0], axis=-1))\n        white_count = np.count_nonzero(np.all(image == [255, 255, 255], axis=-1))\n    else:\n        black_count = np.count_nonzero(image == 0)\n        white_count = np.count_nonzero(image == 255)\n    return float(black_count + white_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the color histograms across RGB channels\"\n    if len(image.shape) == 3:\n        hist_red, _ = np.histogram(image[:, :, 0], bins=256, range=(0, 256))\n        hist_green, _ = np.histogram(image[:, :, 1], bins=256, range=(0, 256))\n        hist_blue, _ = np.histogram(image[:, :, 2], bins=256, range=(0, 256))\n        std_red = np.std(hist_red)\n        std_green = np.std(hist_green)\n        std_blue = np.std(hist_blue)\n        return float(np.mean([std_red, std_green, std_blue]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the sum of the brightest pixels to the total pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_sum = np.sum(gray[gray > 200])\n    total_sum = np.sum(gray)\n    return float(bright_sum / (total_sum + 1e-5))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel values\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 150) in the image\"\n    return float(np.count_nonzero(image > 150) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in RGB channels\"\n    if len(image.shape) == 3:\n        return float(np.var(image))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of pixels in the image\"\n    return float(np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity less than 50\"\n    return float(np.count_nonzero(image < 50) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the corners of the image\"\n    h, w = image.shape[:2]\n    corners = np.concatenate([image[0, 0], image[0, -1], image[-1, 0], image[-1, -1]])\n    return float(np.mean(corners))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of pixels in the image\"\n    return float(np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    return float(np.count_nonzero(image)) / np.size(image)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value across all channels\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel value across all channels\"\n    return float(image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is white (pixel value 255)\"\n    if len(image.shape) == 3:\n        white_pixels = np.sum(image == 255)\n        return float(white_pixels) / (image.shape[0] * image.shape[1] * image.shape[2])\n    elif len(image.shape) == 2:\n        white_pixels = np.sum(image == 255)\n        return float(white_pixels) / (image.shape[0] * image.shape[1])\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    darkest_quarter = image[0:h//2, 0:w//2]\n    return float(np.mean(darkest_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the red channel for RGB images\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0]\n        return float(np.std(red_channel))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-black pixels (intensity > 30) in the image\"\n    return float(np.count_nonzero(image > 30) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity > 200) to dark pixels (intensity < 50)\"\n    bright_count = np.count_nonzero(image > 200)\n    dark_count = np.count_nonzero(image < 50)\n    return float(bright_count / (dark_count + 1))  # avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left third of the image\"\n    h, w = image.shape[:2]\n    left_third = image[:, :w//3]\n    return float(np.mean(left_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with saturation below a threshold in RGB images\"\n    if len(image.shape) == 3:\n        rgb_max = np.max(image, axis=2)\n        rgb_min = np.min(image, axis=2)\n        saturation = rgb_max - rgb_min\n        return float(np.count_nonzero(saturation < 30) / np.size(image))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum intensities in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the absolute values of pixel intensities in the image\"\n    return float(np.mean(np.abs(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude in both x and y directions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    return float(np.mean(np.sqrt(gradient_x**2 + gradient_y**2)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0] - image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of white pixels in the image\"\n    threshold = 240  # considering white as pixel values close to 255\n    return float(np.count_nonzero(image > threshold) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the image calculated as the average of RGB mean\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.mean(image, axis=2)))\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the red channel\"\n    if len(image.shape) == 3:\n        return float(image[:,:,0].std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum color channel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the grayscale version of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(gray.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast of the image measured as max intensity - min intensity\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of bright pixels above a certain threshold\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the grayscale image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=[0, 256])\n    hist = hist / hist.sum()  # normalize\n    return -np.sum(hist[hist > 0] * np.log2(hist[hist > 0]))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color contrast between the green and red channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1] - image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image\"\n    threshold = 200\n    count_white = np.count_nonzero(image >= threshold) if len(image.shape) == 3 else np.count_nonzero(image.flatten() >= threshold)\n    return float(count_white) / image.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of high-intensity pixels (above a threshold) in the image\"\n    threshold = 220\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(image.min())\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200) in the image\"\n    return float(np.count_nonzero(image > 200) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value among the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top quarter of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4]\n    return float(np.count_nonzero(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels in the image\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixel_count = np.prod(image.shape[:2])\n    return float(bright_pixel_count / (total_pixel_count + 1e-5))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    return float(np.count_nonzero(image) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    region = image[0:h//2, 0:w//2]\n    return float(np.mean(region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of squared pixel values in the image\"\n    return float(np.sum(image**2))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest strip in the center of the image\"\n    h, w = image.shape[:2]\n    center_strip = image[h//2 - 10:h//2 + 10, :]\n    return float(np.mean(center_strip))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top half and bottom half of the image\"\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[0:h//2])\n    bottom_half_mean = np.mean(image[h//2:h])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation defined as the standard deviation of the colors in RGB images\"\n    if len(image.shape) == 3:\n        hsv_image = (image.astype(np.float32) / 255.0)  # Normalize to [0, 1]\n        max_val = hsv_image.max(axis=2)\n        min_val = hsv_image.min(axis=2)\n        saturation = max_val - min_val\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of only the non-white pixels\"\n    non_white_mask = image < 255\n    return float(np.mean(image[non_white_mask]) if np.any(non_white_mask) else 0)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the most prominent color channel\"\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.max(channel_means))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the corners of the image\"\n    h, w = image.shape[:2]\n    corners = np.array([image[0, 0], image[0, w-1], image[h-1, 0], image[h-1, w-1]])\n    return float(np.mean(corners))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left corner region\"\n    h, w = image.shape[:2]\n    corner_region = image[0:h//4, 0:w//4]\n    return float(np.mean(corner_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to minimum pixel value\"\n    max_val = np.max(image)\n    min_val = np.min(image)\n    return float(max_val / (min_val if min_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is brighter than a threshold\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color value of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of pixels along the diagonal of the image\"\n    diagonal_values = image[np.arange(min(image.shape)), np.arange(min(image.shape))]\n    return float(np.mean(diagonal_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of color channel differences in RGB images\"\n    if len(image.shape) == 3:\n        color_diff = np.std(image[:, :, 0] - image[:, :, 1]) + np.std(image[:, :, 0] - image[:, :, 2]) + np.std(image[:, :, 1] - image[:, :, 2])\n        return float(color_diff / 3)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom-right corner region\"\n    h, w = image.shape[:2]\n    corner_region = image[h//2:h, w//2:w]\n    return float(np.mean(corner_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity above a certain threshold\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity for the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    mean_val = np.mean(image)\n    bright_threshold = 200\n    return float(np.count_nonzero(image > bright_threshold) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in grayscale\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are part of the darkest 10% in the image\"\n    threshold = np.percentile(image, 10)\n    return float(np.count_nonzero(image < threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels along the diagonal\"\n    h, w = image.shape[:2]\n    diagonal_pixels = image[np.arange(min(h, w)), np.arange(min(h, w))]\n    return float(np.mean(diagonal_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-white pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    white_threshold = 240\n    return float(np.count_nonzero(image < white_threshold) / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel distance from the average intensity\"\n    mean_intensity = np.mean(image)\n    return float(np.mean(np.abs(image - mean_intensity)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the green channel\"\n    if len(image.shape) == 3:\n        green_channel = image[:,:,1]\n        return float(np.count_nonzero(green_channel) / green_channel.size)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the brightest 10% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 90)\n    return float(np.mean(gray[gray >= threshold]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between the red and blue channels in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity above a specific threshold (128)\"\n    threshold = 128\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > threshold) / gray.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        blue_channel = image[:,:,2]\n        return float(np.std(blue_channel))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Normalize the pixel intensities by their maximum value\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) / 255.0)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total pixel counts of the image\"\n    return float(image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to mean pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) / (np.mean(gray) if np.mean(gray) > 0 else 1))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the mean green channel to the mean red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]) / (np.mean(image[:,:,0]) if np.mean(image[:,:,0]) > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-black pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    black_threshold = 30\n    return float(np.count_nonzero(image > black_threshold) / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity of the whole image\"\n    return float(np.median(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge count using a simple Sobel method\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same').reshape(gray.shape))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same').reshape(gray.shape))\n    return float(np.count_nonzero(edges_x + edges_y > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the image\"\n    return float(np.sum(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image\"\n    if len(image.shape) == 3:\n        hsv_image = np.dot(image[..., :3], [[0.299], [0.587], [0.114]])\n        saturation = np.mean(image) / hsv_image.mean() if hsv_image.mean() > 0 else 0\n        return float(saturation)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    return float(np.count_nonzero(image > 200) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average contrast in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity variance of the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the maximum and minimum pixel values\"\n    return float(np.max(image) / (np.min(image) + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of squared gradients of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    return float(np.sum(gradient_x**2 + gradient_y**2))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the average intensity of the top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of nonzero pixels in the image\"\n    return float(np.count_nonzero(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right_corner = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in means between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]) - np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the standard deviation to the mean pixel intensity\"\n    mean_intensity = image.mean()\n    std_dev = image.std()\n    return float(std_dev / mean_intensity) if mean_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the unique pixel values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average brightness of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.max(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = np.prod(image.shape)\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across the entire image\"\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels as a ratio of total pixels\"\n    total_pixels = np.size(image)\n    nonzero_pixels = np.count_nonzero(image)\n    return float(nonzero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity of RGB channels\"\n    if len(image.shape) == 3:\n        return float(image.std(axis=(0, 1)).mean())\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.max(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the border (edges) of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    border = np.concatenate([gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]])\n    return float(np.mean(border))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of the color channel variances in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.var(image[:,:,0]) + np.var(image[:,:,1]) + np.var(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color channel difference in RGB images\"\n    if len(image.shape) == 3:\n        color_diff = (np.mean(image[:, :, 0]) - np.mean(image[:, :, 1]) +\n                      np.mean(image[:, :, 0]) - np.mean(image[:, :, 2]) +\n                      np.mean(image[:, :, 1]) - np.mean(image[:, :, 2]))\n        return float(color_diff / 3)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value of the dark region in the image\"\n    dark_region = image[image < 50]\n    return float(dark_region.mean() if dark_region.size > 0 else 0.0)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest 10% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 90)\n    return float(np.mean(gray[gray >= threshold]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average pixel value to the maximum pixel value\"\n    avg_intensity = image.mean()\n    max_intensity = image.max()\n    return float(avg_intensity / max_intensity) if max_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of bright pixels (greater than a threshold)\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the image corners\"\n    h, w = image.shape[:2]\n    corners = image[:h//4, :w//4] + image[:h//4, 3*w//4:] + image[3*h//4:, :w//4] + image[3*h//4:, 3*w//4:]\n    return float(np.mean(corners) / 4)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total edges detected in the image using absolute differences\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(edges > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color channel intensity difference\"\n    if len(image.shape) == 3:\n        channel_diffs = (image[:,:,0] - image[:,:,1]) + (image[:,:,0] - image[:,:,2]) + (image[:,:,1] - image[:,:,2])\n        return float(np.mean(channel_diffs))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of color channel intensities\"\n    if len(image.shape) == 3:\n        return float(np.std(image, axis=(0, 1)).mean())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are exactly white\"\n    total_pixels = image.size\n    white_pixels = np.count_nonzero(image == 255)\n    return float(white_pixels / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the entire image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (255) in the image\"\n    return float(np.count_nonzero(image == 255) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n        saturation = np.max(image, axis=2) - gray\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast defined as the difference between mean max and min channel values\"\n    if len(image.shape) == 3:\n        max_channel = np.max(image, axis=(0, 1))\n        min_channel = np.min(image, axis=(0, 1))\n        return float(np.mean(max_channel - min_channel))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity in the red channel to the green channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        green_mean = np.mean(image[:, :, 1])\n        return float(red_mean / (green_mean if green_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0,255))\n    probabilities = hist / hist.sum()\n    return float(-np.sum(probabilities[probabilities > 0] * np.log2(probabilities[probabilities > 0])))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference between the R, G, and B channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.abs(image[:, :, 0] - image[:, :, 1]) + \n                             np.abs(image[:, :, 1] - image[:, :, 2]) + \n                             np.abs(image[:, :, 2] - image[:, :, 0])))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the top left corner (quarter) of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast of the image calculated as the difference between max and min pixel values\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is non-black pixels\"\n    total_pixels = image.size\n    non_black_pixels = np.count_nonzero(image > 1)\n    return float(non_black_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the image\"\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with low intensity (below a threshold)\"\n    threshold = 50\n    return float(np.count_nonzero(image < threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Roughness of the image based on pixel intensity changes in a small window\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray))\n    roughness = np.mean(edges)\n    return float(roughness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the border pixels in the image\"\n    h, w = image.shape[:2]\n    border = np.concatenate((image[0, :], image[-1, :], image[:, 0], image[:, -1]))\n    return float(np.mean(border))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of intensities across all channels in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensities between the red and blue channels in RGB images\"\n    if len(image.shape) != 3:\n        return 0.0\n    return float(np.mean(image[:,:,0] - image[:,:,2]))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of red channel intensity to green channel intensity\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        green_mean = np.mean(image[:, :, 1])\n        return float(red_mean / (green_mean + 1e-10))  # avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity across all channels\"\n    std_all = np.std(image) if len(image.shape) == 3 else np.std(image.flatten())\n    return float(std_all)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of the average color of each channel in RGB\"\n    if len(image.shape) == 3:\n        r, g, b = np.mean(image[:,:,0]), np.mean(image[:,:,1]), np.mean(image[:,:,2])\n        return float(np.var([r, g, b]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity variance across RGB channels\"\n    if len(image.shape) == 3:\n        means = np.mean(image, axis=(0, 1))\n        return float(np.var(means))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total count of pixels in the image\"\n    return float(image.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between channels in RGB\"\n    if len(image.shape) == 3:\n        color_diff = np.abs(image[:,:,0] - image[:,:,1]) + np.abs(image[:,:,0] - image[:,:,2]) + np.abs(image[:,:,1] - image[:,:,2])\n        return float(np.mean(color_diff))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique colors in the image\"\n    if len(image.shape) == 3:\n        return float(len(np.unique(image.reshape(-1, image.shape[2]), axis=0)))\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    edge_strength = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_pixels = np.count_nonzero(edge_strength > 20)\n    return float(edge_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the border pixels\"\n    h, w = image.shape[:2]\n    border_pixels = np.concatenate([image[0, :], image[-1, :], image[:, 0], image[:, -1]])\n    return float(np.mean(border_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, density=True)\n    hist += 1e-10  # avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the mean intensity of the red channel to the mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.std(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Max pixel intensity in the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.max(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (above a threshold) in the image\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between red and green channels in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        green_mean = np.mean(image[:,:,1])\n        return float(red_mean - green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are saturated (close to max value)\"\n    threshold = 240\n    saturated_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(saturated_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image (above a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution\"\n    mean = image.mean()\n    std_dev = image.std()\n    skewness = np.mean(((image - mean) / std_dev) ** 3)\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image (above a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram = histogram[histogram > 0]  # exclude zero entries\n    entropy = -np.sum(histogram * np.log2(histogram))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are close to white\"\n    threshold = 240\n    white_pixels = np.count_nonzero(image > threshold)\n    return float(white_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity within the edge regions of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    edge_region = gray[np.where(edges > 10)]  # get intensities where edges exist\n    return float(edge_region.mean()) if edge_region.size > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Max pixel intensity value in the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities between red and blue channels in RGB\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left third of the image\"\n    h, w = image.shape[:2]\n    left_third = image[:, :w//3]\n    return float(np.mean(left_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    return float(bright_pixels / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of single-channel variance in grayscale images\"\n    if len(image.shape) == 2:\n        return float(np.var(image)) / 255.0  # Normalize to [0, 1]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n        return float(np.var(gray)) / 255.0\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < 50) in the image\"\n    dark_pixels = np.count_nonzero(image < 50)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across both axes combined\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with maximum intensity value\"\n    max_pixel_value = np.max(image)\n    return float(np.count_nonzero(image == max_pixel_value))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean saturation of the image (for RGB images only)\"\n    if len(image.shape) == 3:\n        max_vals = np.max(image, axis=2)\n        min_vals = np.min(image, axis=2)\n        saturation = max_vals - min_vals\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (intensity < 50) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixel_count = np.prod(image.shape)\n    return float(dark_pixel_count / total_pixel_count) if total_pixel_count > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 220) in the image\"\n    return float(np.count_nonzero(image > 220))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the middle row of the image\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[image.shape[0] // 2, :, :]))\n    return float(np.mean(image[image.shape[0] // 2, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast measure based on pixel intensity difference\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixels detected with a basic Laplacian filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    laplacian = np.abs(np.gradient(np.gradient(gray, axis=0), axis=1))\n    return float(np.count_nonzero(laplacian > 20) / np.prod(gray.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average value of the color channels differences (for RGB images)\"\n    if len(image.shape) == 3:\n        diff_rg = np.mean(image[:,:,0] - image[:,:,1])\n        diff_rb = np.mean(image[:,:,0] - image[:,:,2])\n        diff_gb = np.mean(image[:,:,1] - image[:,:,2])\n        return float((diff_rg + diff_rb + diff_gb) / 3)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average proportion of segments containing high contrast\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    segments = 4  # 2x2 segments\n    high_contrast_count = 0\n    for i in range(0, h, h // 2):\n        for j in range(0, w, w // 2):\n            segment = gray[i:i+h//2, j:j+w//2]\n            if np.max(segment) - np.min(segment) > 50:\n                high_contrast_count += 1\n    return float(high_contrast_count / segments)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.min([np.mean(image[:,:,0]), np.mean(image[:,:,1]), np.mean(image[:,:,2])]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    edge_pixels = np.count_nonzero(edges > 10)\n    total_pixels = gray.size\n    return float(edge_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean((gray - np.mean(gray))**3) / (np.std(gray) ** 3)) if np.std(gray) > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of dark pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 50)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and mean pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.mean(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the intensity histogram of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 255), density=True)\n    hist += 1e-10  # Avoid log(0)\n    return -np.sum(hist * np.log(hist))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 50)\n    total_pixels = gray.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity along the image border\"\n    h, w = image.shape[:2]\n    border_pixels = np.concatenate([image[0, :], image[-1, :], image[:, 0], image[:, -1]])\n    return float(np.mean(border_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_intensities = np.unique(gray)\n    return float(len(unique_intensities))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel difference in RGB images\"\n    if len(image.shape) == 3:\n        channel_diff = np.mean(image[:,:,0] - image[:,:,1]) + np.mean(image[:,:,1] - image[:,:,2])\n    else:\n        return 0.0\n    return float(channel_diff)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected using Canny edge detection method\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(edges > 15))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the darkest 10% of pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_threshold = np.percentile(gray, 10)\n    dark_pixels = gray[gray < dark_threshold]\n    return float(np.mean(dark_pixels)) if dark_pixels.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity > 200) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    return float(bright_pixels / gray.size) if gray.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom third of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_third = gray[2*h//3:h, :]\n    return float(np.mean(bottom_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of fully black pixels (intensity == 0) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    black_pixels = np.count_nonzero(gray == 0)\n    return float(black_pixels / gray.size) if gray.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray, bins=256, range=(0, 256), density=True)\n    histogram = histogram[histogram > 0]  # Avoid log(0)\n    return float(-np.sum(histogram * np.log2(histogram)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the highest intensity channel\"\n    if len(image.shape) == 3:\n        return float(np.max(np.mean(image, axis=2)))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean saturation of RGB channels\"\n    if len(image.shape) == 3:\n        r, g, b = image[:,:,0], image[:,:,1], image[:,:,2]\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n        return float(np.mean(saturation))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average contrast as the difference between mean and max pixel intensity\"\n    mean_intensity = np.mean(image)\n    max_intensity = np.max(image)\n    return float(max_intensity - mean_intensity)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels compared to total pixels\"\n    threshold = 200\n    count_bright = np.count_nonzero(image > threshold)\n    total_pixels = np.prod(image.shape[:2])\n    return float(count_bright) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values\"\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]) - np.mean(image[:,:,2]))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Symmetry measure based on horizontal flipping\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:][:, ::-1]\n    return float(np.mean(np.abs(left_half - right_half)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left corner\"\n    h, w = image.shape[:2]\n    top_left_corner = image[:h//2, :w//2]\n    return float(np.mean(top_left_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensities\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-10  # To avoid log(0)\n    return float(-np.sum(histogram * np.log(histogram)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color channel intensity (only for RGB images)\"\n    if len(image.shape) == 3:\n        return float(np.mean(image, axis=(0, 1)).mean())\n    else:\n        return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (below a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = np.prod(image.shape[:2])  # Total number of pixels\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-white pixels in the image (above a threshold)\"\n    threshold = 240\n    non_white_pixels = np.count_nonzero(image < threshold)\n    return float(non_white_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of red channel intensity to total channel intensity\"\n    if len(image.shape) == 3:\n        total_intensity = np.sum(image)\n        red_intensity = np.sum(image[:, :, 0])\n        return float(red_intensity / (total_intensity + 1e-5))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the bright region (above a high threshold)\"\n    threshold = 220\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(((gray - gray.mean())**3).sum() / (gray.size * (gray.std()**3 + 1e-5)))  # Normalized skewness\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and green channels in RGB\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        green_mean = np.mean(image[:, :, 1])\n        return float(red_mean - green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are black (intensity = 0)\"\n    total_pixels = np.prod(image.shape[:2])\n    black_count = np.count_nonzero(image == 0)\n    return float(black_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast ratio between max and min pixel values\"\n    return float(np.max(image) / (np.min(image) + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the blue channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the green channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of unique pixel intensities\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0] - image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensities representing image complexity\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-6  # Avoid log(0)\n    return float(-np.sum(histogram * np.log(histogram)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel intensity in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.max(gray) - np.min(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region) / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the blue color channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom-left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.sum(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the vertical center strip of the image\"\n    h, w = image.shape[:2]\n    vertical_strip = image[:, w//2]\n    return float(np.mean(vertical_strip))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast measure using range of pixel intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    range_value = np.max(gray) - np.min(gray)\n    return float(range_value)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (less than a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    return float(dark_pixels / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color difference between red and green channels\"\n    if len(image.shape) == 3:\n        color_diff = np.mean(image[:,:,0] - image[:,:,1])\n        return float(color_diff)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique colors in the image\"\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n        return float(unique_colors.shape[0])\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above the overall average intensity\"\n    overall_mean = np.mean(image)\n    above_average = np.count_nonzero(image > overall_mean)\n    return float(above_average / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left third of the image\"\n    h, w = image.shape[:2]\n    left_third = image[:, :w//3]\n    return float(np.mean(left_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of isolated bright spots in the image\"\n    brightness_threshold = 200\n    bright_spots = np.count_nonzero((image > brightness_threshold).astype(np.int32))\n    return float(bright_spots)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color balance (mean of channel ratios)\"\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.mean(channel_means / (np.sum(channel_means) + 1e-5)))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (above a threshold) to total pixels\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of unique colors in the image\"\n    if len(image.shape) == 3:\n        reshaped = image.reshape(-1, 3)\n    else:\n        reshaped = image.flatten().reshape(-1, 1)\n    unique_colors = np.unique(reshaped, axis=0)\n    return float(unique_colors.shape[0])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity calculated using the maximum color channel\"\n    if len(image.shape) == 3:\n        max_channel = np.max(image, axis=2)\n        return float(np.mean(max_channel))\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of gradients in both x and y directions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    return float(np.std(np.sqrt(gradient_x**2 + gradient_y**2)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (below a threshold) to total pixels\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of the pixel values in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the image across all channels\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min pixel values in the image\"\n    return float(np.max(image) - np.min(image)) if image.size > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[:h//2, :w//2]\n    return float(np.mean(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(image[:,:,0].std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the green channel of RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color value of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom-left quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[h//2:, :w//2]\n    return float(np.mean(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels above a specific intensity threshold (e.g., 180)\"\n    return float(np.count_nonzero(image > 180) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(image.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along both axes\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top half and bottom half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    mean_top = np.mean(top_half)\n    mean_bottom = np.mean(bottom_half)\n    return float(mean_top - mean_bottom)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the top and bottom regions\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) + np.mean(bottom_half)) / 2\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (below a threshold) to total pixels\"\n    threshold = 50  # example threshold\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixel_count = np.count_nonzero(gray < threshold)\n    return float(dark_pixel_count) / gray.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity difference between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels (above a threshold) to total pixels\"\n    threshold = 200  # example threshold\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray > threshold)\n    return float(high_intensity_count) / gray.size\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across all channels\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > threshold) to total pixels\"\n    threshold = 200\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > threshold)\n    return float(bright_pixels / gray.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the image\"\n    return float(np.count_nonzero(image) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel difference (R-G) across the image\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensities in the image\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=[0,256])\n    histogram = histogram / histogram.sum()  # Normalize\n    histogram = histogram[histogram > 0]  # Avoid log(0)\n    return float(-np.sum(histogram * np.log2(histogram)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities indicating texture complexity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of color saturation in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n    else:\n        return 0.0\n    return float(np.count_nonzero(saturation > 50) / gray.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average height of detected edges using Sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same').reshape(gray.shape))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same').reshape(gray.shape))\n    return float(np.mean(edges_x + edges_y))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels (above threshold)\"\n    threshold = 220\n    high_intensity = np.count_nonzero(image > threshold)\n    return float(high_intensity / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of colorful pixels defined by saturation\"\n    if len(image.shape) == 3:\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n    else:\n        return 0.0\n    return float(np.count_nonzero(saturation > 40))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Max channel difference to measure color variance\"\n    if len(image.shape) == 3:\n        r_g_diff = np.abs(image[:,:,0] - image[:,:,1])\n        b_g_diff = np.abs(image[:,:,2] - image[:,:,1])\n        return float(np.max([np.max(r_g_diff), np.max(b_g_diff)]))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high gradient values indicating strong edges\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    grad_y = np.gradient(gray, axis=0)\n    magnitude = np.sqrt(grad_x**2 + grad_y**2)\n    return float(np.count_nonzero(magnitude > 30))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above the mean intensity\"\n    mean_intensity = image.mean()\n    above_mean = np.count_nonzero(image > mean_intensity)\n    return float(above_mean / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of colors in the image\"\n    if len(image.shape) == 3:\n        return float(np.std(image, axis=(0,1)).mean())\n    else:\n        return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the top-left quadrant\"\n    h, w = image.shape[:2]\n    top_left = image[0:h//2, 0:w//2]\n    return float(np.sum(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between mean intensity of the blue and red channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]) - np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom region of the image\"\n    h, w = image.shape[:2]\n    bottom_region = image[h//2:, :]\n    return float(np.mean(bottom_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensities in the image\"\n    unique_pixels = np.unique(image)\n    return float(len(unique_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (255) in the image\"\n    white_pixels = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    grad_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(grad_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the sum of blue and green channel intensities to red channel intensity\"\n    if len(image.shape) == 3:\n        return float((np.sum(image[:,:,1]) + np.sum(image[:,:,2])) / (np.sum(image[:,:,0]) + 1e-5))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum intensity in each channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image.max(axis=(0, 1))))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of pixels in the image that have an intensity of 255\"\n    return float(np.count_nonzero(image == 255))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensities of the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    mean_top = np.mean(top_half)\n    mean_bottom = np.mean(bottom_half)\n    return float(mean_top - mean_bottom)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 200) in the image\"\n    threshold = 200\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity difference between the leftmost and rightmost columns of the image\"\n    h, w = image.shape[:2]\n    left_column = image[:, 0]\n    right_column = image[:, w-1]\n    return float(np.mean(left_column) - np.mean(right_column))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the entire image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of each color channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image, axis=(0, 1)).max())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the green channel to the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        green_mean = np.mean(image[:,:,1])\n        blue_mean = np.mean(image[:,:,2])\n        return float(green_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 200) in the image\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right third of the image\"\n    h, w = image.shape[:2]\n    right_third = image[:, 2*w//3:]\n    return float(np.mean(right_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image for RGB\"\n    if len(image.shape) == 3:\n        hsv = np.mean(image, axis=2)  # simplified approximation of saturation\n        return float(np.mean(hsv))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < 50) in the image\"\n    threshold = 50\n    return float(np.count_nonzero(image < threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are near white, defined as intensity > 240\"\n    threshold = 240\n    total_pixels = image.size\n    near_white_pixels = np.count_nonzero(image > threshold)\n    return float(near_white_pixels / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is bright (above a threshold)\"\n    threshold = 200\n    count_bright = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(count_bright) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Fraction of pixels near the edges of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray))\n    return float(np.count_nonzero(edges > 15)) / edges.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value among the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the blue channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels (threshold = 100)\"\n    threshold = 100\n    count_bright = np.count_nonzero(image > threshold)\n    count_dark = np.count_nonzero(image <= threshold)\n    return float(count_bright) / (count_dark + 1)  # Avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique colors in the image\"\n    unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n    return float(unique_colors.shape[0])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value of the bottom half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of zero pixels in the image\"\n    return float(np.count_nonzero(image == 0))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_h, center_w = h // 4, w // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the brightest pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    brightest_pixels = np.percentile(gray, 90)\n    return float(brightest_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of colors in the image (red vs. green)\"\n    if len(image.shape) == 3:\n        red_count = np.count_nonzero(image[:,:,0] > 128)\n        green_count = np.count_nonzero(image[:,:,1] > 128)\n        return float(red_count / (green_count + 1))  # Add 1 to avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average contrast of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    contrast = np.max(gray) - np.min(gray)\n    return float(contrast)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixel values in the image\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean variance of each color channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.var(image, axis=(0, 1))))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Dominant color channel in the image\"\n    if len(image.shape) == 3:\n        return float(np.argmax(np.mean(image, axis=(0, 1))))\n    return -1.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure of overall brightness of the image\"\n    return float(np.mean(image)) if image.size > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top third of the image\"\n    h, w = image.shape[:2]\n    top_third = image[:h//3, :]\n    return float(np.mean(top_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are near black (intensity < 30)\"\n    dark_pixels = np.count_nonzero(image < 30)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the blue channel (if RGB)\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in pixel intensity between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the green channel (if RGB)\"\n    if len(image.shape) == 3:\n        return float(image[:,:,1].std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the mean intensity of the brightest channel to the darkest channel\"\n    if len(image.shape) == 3:\n        mean_values = np.mean(image, axis=(0, 1))\n        return float(np.max(mean_values) / (np.min(mean_values) if np.min(mean_values) > 0 else 1))\n    return 1.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute pixel intensity in the entire image\"\n    return float(np.mean(np.abs(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of saturated pixels (intensity >= 255)\"\n    saturated_pixels = np.count_nonzero(image >= 255)\n    total_pixels = image.size\n    return float(saturated_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the corners of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right) - np.mean(top_left))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of red channel intensity to green channel intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        red_channel = image[:,:,0]\n        green_channel = image[:,:,1]\n        return float(np.mean(red_channel) / (np.mean(green_channel) + 1e-5))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity of the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixel values in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation between the maximum and minimum intensity values\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of bright pixels (intensity > 200) in the image\"\n    threshold = 200\n    count_bright = np.count_nonzero(image > threshold)\n    total_pixels = np.prod(image.shape)\n    return float(count_bright) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_mean = np.mean(image[:, :w//2])\n    right_mean = np.mean(image[:, w//2:])\n    return float(left_mean - right_mean)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels in the image (below a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique colors in the image\"\n    unique_colors = np.unique(image.reshape(-1, image.shape[-1]), axis=0)\n    return float(unique_colors.shape[0])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue color channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels\"\n    threshold = 128\n    bright_pixels = np.count_nonzero(image > threshold)\n    dark_pixels = np.count_nonzero(image <= threshold)\n    return float(bright_pixels / (dark_pixels + 1))  # To avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation (max color channel - min color channel)\"\n    if len(image.shape) == 3:\n        max_color = np.max(image, axis=2)\n        min_color = np.min(image, axis=2)\n        saturation = max_color - min_color\n        return float(np.mean(saturation))\n    else:\n        return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity along the vertical center line\"\n    h, w = image.shape[:2]\n    center_column = image[:, w//2]\n    return float(np.mean(center_column))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total pixel count that are black (0)\"\n    black_pixels = np.count_nonzero(image == 0)\n    return float(black_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient along the diagonal of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_diag = np.gradient(gray, axis=(0, 1))\n    return float(np.mean(np.abs(gradient_diag[0] + gradient_diag[1])))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image\"\n    return float(np.count_nonzero(image == 255) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of connected components in the image\"\n    from scipy.ndimage import label\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    binary_image = gray > 128  # simple binary threshold\n    labeled_array, num_features = label(binary_image)\n    return float(num_features)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the brightest 1% of pixels\"\n    threshold_value = np.percentile(image, 99)\n    return float(np.mean(image[image >= threshold_value]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel ratio in RGB images\"\n    if len(image.shape) == 3:\n        r_ratio = np.mean(image[:,:,0]) / (np.mean(image[:,:,0]) + np.mean(image[:,:,1]) + np.mean(image[:,:,2]) + 1e-5)\n        g_ratio = np.mean(image[:,:,1]) / (np.mean(image[:,:,0]) + np.mean(image[:,:,1]) + np.mean(image[:,:,2]) + 1e-5)\n        b_ratio = np.mean(image[:,:,2]) / (np.mean(image[:,:,0]) + np.mean(image[:,:,1]) + np.mean(image[:,:,2]) + 1e-5)\n        return float((r_ratio + g_ratio + b_ratio) / 3)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity for grayscale or mean intensity for RGB\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    edge_pixels = np.count_nonzero(edges > 10)\n    return float(edge_pixels) / (image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Spatial distribution of pixel intensities\"\n    h, w = image.shape[:2]\n    return float(np.sum((np.arange(h)[:, None] - h//2) ** 2 * np.mean(image, axis=2)) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Contrast of colors in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image.flatten()))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    white_pixels = np.count_nonzero(gray > 240)\n    total_pixels = np.prod(gray.shape)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(center_region.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of edge pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.hypot(*np.gradient(gray))\n    return float(np.mean(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of pixel intensity distribution in the image\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity in the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average height-to-width ratio of edge-detected regions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    edge_points = np.argwhere(edges > 15)\n    if edge_points.size == 0:\n        return 0.0\n    heights = edge_points[:, 0].max() - edge_points[:, 0].min()\n    widths = edge_points[:, 1].max() - edge_points[:, 1].min()\n    return float(heights / (widths + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the darkest pixel in the image\"\n    return float(np.mean(np.min(image, axis=-1)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = np.prod(image.shape[:2])\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top-left corner of the image\"\n    h, w = image.shape[:2]\n    top_left_corner = image[0:h//2, 0:w//2]\n    return float(np.mean(top_left_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the average intensity of the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique grayscale values\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_gray_values = np.unique(gray)\n    return float(unique_gray_values.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image excluding edges\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    mask = edges <= 15\n    return float(np.mean(gray[mask])) if np.any(mask) else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left third region\"\n    h, w = image.shape[:2]\n    left_third = image[:, :w//3]\n    return float(np.std(left_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation of the image\"\n    if len(image.shape) == 3:\n        r, g, b = image[:,:,0], image[:,:,1], image[:,:,2]\n        max_channels = np.maximum(np.maximum(r, g), b)\n        min_channels = np.minimum(np.minimum(r, g), b)\n        saturation = (max_channels - min_channels) / (max_channels + 1e-5)\n        return float(np.mean(saturation))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom-right quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[h//2:, w//2:]\n    return float(np.mean(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    return float(np.count_nonzero(image) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left edge column\"\n    h, w = image.shape[:2]\n    left_edge = image[:, 0]\n    return float(np.mean(left_edge))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity of pixel values in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensities in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.var(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of average pixel intensity of green channel to the red channel\"\n    if len(image.shape) == 3:\n        green_mean = np.mean(image[:,:,1])\n        red_mean = np.mean(image[:,:,0])\n        return float(green_mean / (red_mean if red_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the top right quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[0:h//2, w//2:]\n    return float(np.sum(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixels detected with a simple threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(edge_pixels / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels above a threshold\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean((gray - gray.mean())**3)) / (gray.std()**3) if gray.std() > 0 else 0)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the red channel to the green channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        green_mean = np.mean(image[:,:,1])\n        return float(red_mean / (green_mean if green_mean > 0 else 1))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average value of the maximum pixel intensity across channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the corner regions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    height, width = gray.shape\n    corners = gray[:height//4, :width//4] + gray[:height//4, -width//4:] + gray[-height//4:, :width//4] + gray[-height//4:, -width//4:]\n    return float(np.mean(corners) / 4)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are bright (above a threshold)\"\n    threshold = 200\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the darkest channels in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.min(image, axis=2)))\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude along both axes\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y = np.gradient(gray, axis=0)\n    gradient_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.sqrt(gradient_x**2 + gradient_y**2)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to the total number of pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top-left quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[:h//2, :w//2]\n    return float(np.mean(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the overall image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity of a single color channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of very bright pixels (above a higher threshold)\"\n    threshold = 250\n    total_pixels = np.prod(image.shape[:2])\n    bright_pixels = np.count_nonzero(image > threshold)\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the darker half of the intensity range\"\n    total_pixels = np.prod(image.shape[:2])\n    dark_pixels = np.count_nonzero(image < 128)\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute color difference between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.abs(image[:,:,0] - image[:,:,2])))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels detected using simple thresholding\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(edges > 20))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the bottom-left quadrant\"\n    h, w = image.shape[:2]\n    quadrant = image[h//2:, :w//2]\n    return float(np.mean(quadrant))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels in the image\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the red color channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the full image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the top-left corner quarter of the image\"\n    h, w = image.shape[:2]\n    corner_region = image[0:h//2, 0:w//2]\n    return float(np.mean(corner_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity above a certain threshold (150)\"\n    high_intensity_pixels = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_intensity_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude overall based on total image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitudes = np.sqrt(np.gradient(gray, axis=0)**2 + np.gradient(gray, axis=1)**2)\n    return float(np.mean(gradient_magnitudes))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    corner_region = image[h//2:h, w//2:w]\n    return float(np.mean(corner_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.std(left_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the green channel to the total intensity\"\n    if len(image.shape) == 3:\n        green_channel = image[:, :, 1]\n        total_intensity = np.sum(image)\n        return float(np.sum(green_channel) / total_intensity) if total_intensity > 0 else 0.0\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (above a threshold)\"\n    threshold = 200\n    high_intensity_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(high_intensity_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels near the edges (border pixels)\"\n    border_pixels = np.concatenate([image[0, :], image[-1, :], image[:, 0], image[:, -1]])\n    non_zero_border_pixels = np.count_nonzero(border_pixels)\n    total_pixels = image.size\n    return float(non_zero_border_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel difference\"\n    if len(image.shape) == 3:\n        channel_diff = np.abs(image[:, :, 0] - image[:, :, 1]) + np.abs(image[:, :, 1] - image[:, :, 2]) + np.abs(image[:, :, 0] - image[:, :, 2])\n        return float(np.mean(channel_diff))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are very bright (above a higher threshold)\"\n    high_threshold = 220\n    bright_pixels = np.count_nonzero(image > high_threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the grayscale version of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the minimum pixel value to the maximum pixel value\"\n    min_val = image.min()\n    max_val = image.max()\n    return float(min_val / (max_val if max_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the corner regions in the image\"\n    h, w = image.shape[:2]\n    corners = np.concatenate([image[:h//4, :w//4], image[:h//4, 3*w//4:], \n                              image[3*h//4:, :w//4], image[3*h//4:, 3*w//4:]])\n    return float(np.mean(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color value of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of the image area that is white (intensity close to 255)\"\n    total_pixels = image.size\n    white_pixels = np.count_nonzero(image > 250)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel intensity differences between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count the number of non-zero rows in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(np.any(gray > 0, axis=1)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the total variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the border pixels of the image\"\n    h, w = image.shape[:2]\n    borders = np.concatenate([image[0, :], image[h-1, :], image[:, 0], image[:, w-1]])\n    return float(np.mean(borders))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel value across the entire image\"\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel values\"\n    return float(image.max()) / (image.min() + 1e-8)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than a threshold)\"\n    threshold = 200\n    if len(image.shape) == 3:\n        luminance = np.mean(image, axis=2)\n    else:\n        luminance = image\n    bright_pixels = np.count_nonzero(luminance > threshold)\n    return float(bright_pixels) / (image.size + 1e-8)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity along the horizontal border\"\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        border_region = image[0, :, :]  # Top edge\n        border_region = np.vstack((border_region, image[-1, :, :]))  # Bottom edge\n    else:\n        border_region = image[0, :]  # Top edge\n        border_region = np.hstack((border_region, image[-1, :]))  # Bottom edge\n    return float(np.mean(border_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total pixel count in the image\"\n    return float(image.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > 200) / (gray.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensities in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.count_nonzero(gray > np.mean(gray)) / gray.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the top third of the image\"\n    h, w = image.shape[:2]\n    top_third = image[:h//3]\n    return float(np.count_nonzero(top_third) / (top_third.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Median pixel intensity of the image\"\n    return float(np.median(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are darker than intensity 50\"\n    return float(np.count_nonzero(image < 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200) to the total pixels\"\n    return float(np.count_nonzero(image > 200) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are not white (intensity < 255)\"\n    return float(np.count_nonzero(image < 255))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct colors in the image\"\n    if len(image.shape) == 3:\n        reshaped_image = image.reshape(-1, image.shape[2])\n    else:\n        reshaped_image = image.reshape(-1, 1)\n    unique_colors = np.unique(reshaped_image, axis=0)\n    return float(unique_colors.shape[0])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the red channel of RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the blue channel of RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixels in the image\"\n    return float(np.count_nonzero(image == 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the entire image\"\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (intensity < 50) in the image\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels) if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0] // 2]\n    return float(np.count_nonzero(top_half) / top_half.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom-right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_right = gray[h // 2:, w // 2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 50)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels with high green intensity\"\n    if len(image.shape) == 3:\n        green_channel = image[:,:,1]\n    else:\n        return 0.0\n    high_green_pixels = np.count_nonzero(green_channel > 200)\n    return float(high_green_pixels) / (image.size // 3)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of edges detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.abs(np.gradient(gray, axis=0)) + np.abs(np.gradient(gray, axis=1))\n    return float(np.count_nonzero(edges > 15))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of unique intensities in the image\"\n    if len(image.shape) == 3:\n        reshaped = image.reshape(-1, 3)\n    else:\n        reshaped = image.flatten().reshape(-1, 1)\n    unique_intensities = np.unique(reshaped, axis=0).shape[0]\n    return float(unique_intensities) / np.prod(image.shape[:2])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across all channels\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of channels with high mean intensity (greater than 150)\"\n    if len(image.shape) == 3:\n        high_mean_count = np.sum(np.mean(image, axis=(0, 1)) > 150)\n        return float(high_mean_count / 3)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total variance of pixel values in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < 50) as a proportion of total pixels\"\n    return float(np.count_nonzero(image < 50) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of bright pixels (intensity > 220) in the image\"\n    return float(np.count_nonzero(image > 220))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the red channel to the average intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:, :, 0])\n        blue_mean = np.mean(image[:, :, 2])\n        return float(red_mean / (blue_mean if blue_mean > 0 else 1))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with high intensity (intensity > 200)\"\n    return float(np.count_nonzero(image > 200) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity > 150) to total pixels\"\n    return float(np.count_nonzero(image > 150) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the darkest quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    dark_quarter = gray[h//2:, w//2:]\n    return float(np.mean(dark_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity > 200) in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.count_nonzero(image[:,:,0] > 200))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the channel with the most pixels\"\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.max(channel_means))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]) - np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of medium intensity pixels (intensity between 100 and 150)\"\n    return float(np.count_nonzero((image >= 100) & (image <= 150)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the minimum to maximum pixel intensity\"\n    min_val = np.min(image)\n    max_val = np.max(image)\n    return float(min_val / (max_val if max_val > 0 else 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-black pixels in the image\"\n    return float(np.count_nonzero(image > 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and green channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        green_mean = np.mean(image[:,:,1])\n        return float(red_mean - green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total sum of pixel values in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of average pixel intensity of blue channel to red channel\"\n    if len(image.shape) == 3:\n        blue_mean = np.mean(image[:,:,2])\n        red_mean = np.mean(image[:,:,0])\n        return float(blue_mean / (red_mean if red_mean > 0 else 1))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the entire image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the entire image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    return float(np.count_nonzero(image > 200) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total intensity sum of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average difference between red and green channels in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity for the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity greater than 128\"\n    return float(np.count_nonzero(image > 128))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and green channels in RGB images\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        green_mean = np.mean(image[:,:,1])\n        return float(red_mean - green_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the top-left quarter region of the image\"\n    h, w = image.shape[:2]\n    region = image[0:h//2, 0:w//2]\n    return float(np.mean(region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely black\"\n    return float(np.count_nonzero(image == 0)) / np.size(image)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value of the intensity histogram\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    return float(np.mean(histogram))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity found in the red channel of RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using basic gradient detection\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.abs(np.gradient(gray))\n    return float(np.count_nonzero(gradient > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels in the image\"\n    total_pixels = image.size\n    white_pixels = np.count_nonzero(image >= 250)\n    return float(white_pixels) / total_pixels if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image occupied by non-white pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_white_pixels = np.count_nonzero(gray < 245)\n    total_pixels = gray.size\n    return float(non_white_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the lower half of the image\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n        h, w = gray.shape\n    lower_half = gray[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bright_pixels = np.count_nonzero(gray > 200)\n    total_pixels = gray.size\n    return float(bright_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n        h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top-left quarter\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n        h, w = gray.shape\n    top_left = gray[0:h//2, 0:w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))  # Red channel\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color saturation defined as the mean of max-min channel values\"\n    if len(image.shape) == 3:\n        max_channel = np.max(image, axis=2)\n        min_channel = np.min(image, axis=2)\n        saturation = max_channel - min_channel\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean squared error of pixel intensities against a mean gray value\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_gray = np.mean(gray)\n    mse = np.mean((gray - mean_gray) ** 2)\n    return float(mse)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Overall brightness measured as the average pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    non_zero_count = np.count_nonzero(center_region)\n    return float(non_zero_count / (center_region.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.sum(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (intensity > 200) to total pixels\"\n    threshold = 200\n    bright_count = np.count_nonzero(image > threshold)\n    return float(bright_count / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity across the whole image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels exceeding a mid-level intensity\"\n    threshold = 128\n    count = np.count_nonzero(image > threshold)\n    return float(count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between channels\"\n    if len(image.shape) == 3:\n        means = np.mean(image, axis=(0, 1))\n        return float(np.max(means) - np.min(means))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity across the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with low variance across their neighborhood\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    local_var = np.var(gray)\n    low_var_count = np.count_nonzero(gray < (local_var / 2))\n    return float(low_var_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    unique_values = len(np.unique(image))\n    return float(unique_values)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity difference between red and blue channels\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0]\n        blue_channel = image[:,:,2]\n    else:\n        return 0.0\n    return float(np.mean(red_channel) - np.mean(blue_channel))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels in the image\"\n    thresholded = np.where(image > 240, 1, 0)\n    return float(np.sum(thresholded) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.sum(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude calculated using the Sobel filter\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same').reshape(gray.shape))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same').reshape(gray.shape))\n    return float(np.mean(edges_x + edges_y))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above the average brightness\"\n    avg_brightness = np.mean(image)\n    return float(np.count_nonzero(image > avg_brightness))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total intensity variance of pixel values\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (below a threshold) to total pixels in the image\"\n    thresholded = np.where(image < 50, 1, 0)\n    return float(np.sum(thresholded) / np.prod(image.shape[:2]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average difference between the maximum and minimum pixel values\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower right corner of the image\"\n    h, w = image.shape[:2]\n    lower_right_corner = image[h//2:, w//2:]\n    return float(np.mean(lower_right_corner))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the red channel\"\n    if len(image.shape) == 3:\n        red_pixels = np.count_nonzero(image[:,:,0])\n        return float(red_pixels / image.size) if image.size > 0 else 0.0\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color intensity across all channels\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the green channel (intensity > 200)\"\n    if len(image.shape) == 3:\n        bright_green_pixels = np.count_nonzero(image[:,:,1] > 200)\n        return float(bright_green_pixels / image[:,:,1].size)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity equal to 255\"\n    total_pixels = image.size\n    max_intensity_pixels = np.count_nonzero(image == 255)\n    return float(max_intensity_pixels / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left quarter region\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-white pixels (intensity < 255) to total pixels\"\n    total_pixels = image.size\n    non_white_pixels = np.count_nonzero(image < 255)\n    return float(non_white_pixels / total_pixels) if total_pixels > 0 else 0.0\n"
  ]
}