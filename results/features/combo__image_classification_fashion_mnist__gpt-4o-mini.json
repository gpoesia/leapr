{
  "combined_from": [
    "results/features/funsearch__image_classification_fashion_mnist__gpt-4o-mini.json",
    "results/features/did3__image_classification_fashion_mnist__gpt-4o-mini.json"
  ],
  "used_features": [
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.count_nonzero(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels around the corners of the image to assess edge content\"\n    h, w = image.shape[:2]\n    corners = np.concatenate((image[0, 0:w//4], image[0, -w//4:], image[-1, 0:w//4], image[-1, -w//4:]))\n    return float(np.count_nonzero(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    return float(non_zero_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in maximum pixel intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:, :, 0]) - np.max(image[:, :, 2]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel intensity distribution in the image'\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    return float(np.mean((hist - hist.mean())**3) / (hist.std()**3))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels to total pixels in the top left quadrant'\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    non_zero_count = np.count_nonzero(top_left)\n    return float(non_zero_count / (top_left.size + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the red channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the lower quarter of the image'\n    h, w = image.shape\n    lower_region = image[h * 3 // 4:h, :]\n    return float(np.mean(lower_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right column of pixels\"\n    h, w = image.shape[:2]\n    right_column = image[:, w-1]\n    return float(np.mean(right_column))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h//2, :w//2]\n    return float(np.mean(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Pixel intensity difference between the top half and the bottom half of the image\"\n    h, w = image.shape\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[3*h//4:, :]\n    return float(np.var(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1]//2]\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Measure the count of non-zero pixels in the diagonal of the image'\n    h, w = image.shape[:2]\n    diagonal_pixels = np.diag(image[:min(h, w)])\n    return float(np.count_nonzero(diagonal_pixels))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel values in the top-right quadrant\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.std(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the number of non-zero pixels to the total number of pixels in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_pixels = np.count_nonzero(gray)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the average gradient magnitude in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference of the top and bottom quarter region of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h // 4]\n    bottom_quarter = image[3 * h // 4:]\n    return float(np.mean(top_quarter) - np.mean(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity equal to 255\"\n    max_intensity_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(max_intensity_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel value in the image\"\n    return float(image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the number of non-zero pixels in the top half to the bottom half of the image'\n    h, w = image.shape[:2]\n    top_half_count = np.count_nonzero(image[:h // 2])\n    bottom_half_count = np.count_nonzero(image[h // 2:])\n    return float(top_half_count / (bottom_half_count + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the top half compared to the bottom half\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.count_nonzero(top_half) / (np.count_nonzero(bottom_half) + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the average intensity of pixels in the edges (using Sobel filter)\"\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    gradient_x = np.abs(np.convolve(image.flatten(), sobel_x.flatten(), mode='same'))\n    gradient_y = np.abs(np.convolve(image.flatten(), sobel_y.flatten(), mode='same'))\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(edge_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom-left corner\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.sum(bottom_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Max pixel intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean of the pixel intensities in the bottom half of the image'\n    bottom_half = image[image.shape[0]//2:, :]\n    return float(np.mean(bottom_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Gradient magnitude of the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    gradients = np.gradient(center_region)\n    magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of all pixels in the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram kurtosis of pixel intensities\"\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    hist = hist / np.sum(hist)  # Normalize\n    mean_hist = np.mean(hist)\n    variance_hist = np.var(hist)\n    return float(np.sum((hist - mean_hist) ** 4) / (variance_hist ** 2)) if variance_hist > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels that are predominantly red (greater than 150 in red channel)\"\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of pixels with low intensity (value < 50) to total pixels\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of low-saturation pixels in the image\"\n    if len(image.shape) == 3:\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n        low_saturation_count = np.count_nonzero(saturation < 50)\n        return float(low_saturation_count)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge pixel ratio based on the periphery of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_pixels = np.concatenate([gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]])\n    total_edge_pixels = edge_pixels.size\n    non_zero_edge_count = np.count_nonzero(edge_pixels)\n    return float(non_zero_edge_count / total_edge_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower quarter that are bright (intensity > 200)\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    bright_pixels = np.count_nonzero(lower_quarter > 200)\n    total_pixels = lower_quarter.size\n    return float(bright_pixels) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Calculate the histogram entropy of the image intensities'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    hist, _ = np.histogram(gray, bins=256, range=(0, 255))\n    hist_probability = hist / np.sum(hist)\n    hist_entropy = -np.sum(hist_probability * np.log2(hist_probability + 1e-10))  # Avoid log(0)\n    return float(hist_entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[3*h//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are pure white\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of minimum pixel value in the image to total possible pixel value\"\n    min_pixel_value = np.min(image)\n    return float(min_pixel_value / 255)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.mean(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean difference between corner and center pixel intensities'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = gray[0:1, 0:1].mean() + gray[0:1, -1:].mean() + gray[-1:, 0:1].mean() + gray[-1:, -1:].mean()\n    center_pixel = gray[gray.shape[0] // 2, gray.shape[1] // 2]\n    return float(corners - center_pixel)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image above the median intensity value\"\n    median_value = np.median(image)\n    return float(np.count_nonzero(image > median_value) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are significantly different from the average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    avg_intensity = np.mean(gray)\n    diff_pixels = np.count_nonzero(np.abs(gray - avg_intensity) > 30)\n    return float(diff_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_quadrant = image[h//2:, w//2:]\n    return float(np.sum(bottom_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensity differences between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the outer borders of the image'\n    h, w = image.shape[:2]\n    borders = np.concatenate((image[0, :], image[-1, :], image[:, 0], image[:, -1]))\n    return float(np.mean(borders))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom-right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the edge region of the image\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    edges = gray[:h//10, :]  # top edge\n    edges = np.vstack((edges, gray[-h//10:, :]))  # bottom edge\n    return float(np.count_nonzero(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between upper-left and lower-right quadrants\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    lower_right = image[h//2:, w//2:]\n    return float(np.mean(upper_left) - np.mean(lower_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the lower quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_quarter = gray[3*gray.shape[0] // 4:, :]\n    return float(np.std(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of the pixel intensity distribution\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_value = np.mean(gray)\n    std_value = np.std(gray)\n    skewness = np.sum((gray - mean_value) ** 3) / (gray.size * (std_value ** 3))\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Horizontal gradient mean reflecting vertical detail\"\n    gradient = np.gradient(image, axis=0)\n    return float(np.mean(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    lower_half = gray[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of isolated pixels in the image\"\n    return float(np.count_nonzero(image) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left = gray[:gray.shape[0] // 2, :gray.shape[1] // 2]\n    return float(np.count_nonzero(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of non-zero pixels to total pixels\"\n    nonzero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(nonzero_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.std(top_right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 250)\"\n    high_intensity_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Normalized histogram skewness of pixel intensities\"\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    hist = hist / np.sum(hist)  # Normalize histogram\n    skewness = np.sum((np.arange(len(hist)) - np.mean(np.arange(len(hist))))**3 * hist) / ((np.std(hist) + 1e-6) ** 3)\n    return float(skewness)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (intensity > 240)\"\n    white_pixel_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.min(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the top and bottom halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2]\n    bottom_half = gray[gray.shape[0]//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean vertical gradient of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_vertical = np.gradient(gray, axis=0)\n    return float(np.mean(np.abs(gradient_vertical)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram entropy of pixel intensities in the image\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=[0, 256])\n    prob_hist = histogram / np.sum(histogram)\n    prob_hist = prob_hist[np.nonzero(prob_hist)]  # Filter out zero probabilities\n    return float(-np.sum(prob_hist * np.log(prob_hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the image edges detected by Sobel filter\"\n    from scipy.ndimage import sobel\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_sobel_x = sobel(gray, axis=0, mode='constant')\n    edge_sobel_y = sobel(gray, axis=1, mode='constant')\n    edge_magnitude = np.hypot(edge_sobel_x, edge_sobel_y)\n    return float(np.mean(edge_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram entropy of the image\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return -np.sum(hist * np.log(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the lower quarter of the image'\n    h, w = image.shape[:2]\n    lower_quarter = image[3*h//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_left = gray[:h//2, :w//2]\n    return float(np.std(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonal of the image\"\n    h, w = image.shape[:2]\n    diagonal = image[np.arange(min(h, w)), np.arange(min(h, w))]\n    return float(np.mean(diagonal))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top half and bottom half of the image\"\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[:h//2, :])\n    bottom_half_mean = np.mean(image[h//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.sum(bottom_half))\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on gradient intensity'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x, grad_y = np.gradient(gray)\n    edges = np.sqrt(grad_x**2 + grad_y**2)\n    edge_pixel_count = np.count_nonzero(edges > 20)  # threshold of 20 for edge detection\n    return float(edge_pixel_count) / image.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_quarter = gray[:gray.shape[0]//4, :]\n    return float(np.max(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Pixel intensity range of the bottom-right quadrant of the image'\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.max(bottom_right) - np.min(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels in the center region that are below average intensity'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region < np.mean(image)) / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest pixel in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the center region of the image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.sum(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white (value 255)\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of green channel intensity to total intensity\"\n    if len(image.shape) == 3:\n        green_intensity = image[:,:,1]\n        total_intensity = np.sum(image)\n    else:\n        green_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(green_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the green channel intensity to the average intensity of the image\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        green_intensity = np.mean(image[:,:,1])\n        avg_intensity = np.mean(image)\n        return float(green_intensity / (avg_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure the number of non-zero pixels in the top left quadrant.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_left = gray[:gray.shape[0] // 2, :gray.shape[1] // 2]\n    return float(np.count_nonzero(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple gradient method.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.gradient(gray)[0]**2 + np.gradient(gray)[1]**2)\n    edge_pixels = np.count_nonzero(gradient > 10)\n    return float(edge_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left half\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(left_half.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are near black (less than 50)\"\n    threshold = 50\n    black_pixel_count = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensities of the left and right halves\"\n    h, w = image.shape[:2]\n    left_mean = np.mean(image[:, :w//2])\n    right_mean = np.mean(image[:, w//2:])\n    return float(left_mean - right_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in area ratio of bright pixels (above threshold) to dark pixels (below threshold)'\n    threshold = 128\n    bright_pixels = np.count_nonzero(image > threshold)\n    dark_pixels = np.count_nonzero(image <= threshold)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels - dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the center region of the image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain intensity threshold in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    threshold = 50\n    return float(np.count_nonzero(center_region < threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean pixel intensity between left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:w]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edges > 20))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels to total pixels in the image\"\n    total_pixels = image.size\n    white_pixels = np.count_nonzero(image >= 255)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0]\n        blue_channel = image[:,:,2]\n        return float(np.mean(red_channel) - np.mean(blue_channel))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the top left quadrant to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_left = gray[:h//2, :w//2]\n    return float(np.count_nonzero(top_left) / (h * w))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central band of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    central_band = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(central_band))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the sum of pixel intensities in the top-right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.sum(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the center region of the image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the bottom-left quadrant'\n    if len(image.shape) == 2:\n        h, w = image.shape\n    else:\n        h, w, _ = image.shape\n    bottom_left_quadrant = image[h//2:h, :w//2]\n    return float(np.std(bottom_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a Sobel filter in horizontal direction\"\n    from scipy.ndimage import sobel\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_h = sobel(gray, axis=0, mode='constant')\n    edge_count = np.count_nonzero(edge_h > 10)  # Threshold for edge detection\n    return float(edge_count)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensities across the entire image\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    return float(np.sum((histogram - np.mean(histogram)) ** 3) / (np.std(histogram) ** 3))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity of the pixels along the vertical midline of the image'\n    h, w = image.shape[:2]\n    vertical_midline = image[:, w//2]\n    return float(np.mean(vertical_midline))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 200)\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top half that are above the average intensity\"\n    if len(image.shape) == 2:\n        h, w = image.shape\n        top_half = image[:h//2, :]\n    else:\n        h, w = image.shape[:2]\n        top_half = np.mean(image, axis=2)[:h//2, :]\n    avg_intensity = np.mean(top_half)\n    return float(np.count_nonzero(top_half > avg_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of non-zero pixels\"\n    non_zero_pixels = image[image > 0]\n    return float(np.mean(non_zero_pixels)) if non_zero_pixels.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sharpness of the image based on gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total variation denoted by the sum of absolute differences between neighboring pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_variation = np.sum(np.abs(np.diff(gray, axis=0))) + np.sum(np.abs(np.diff(gray, axis=1)))\n    return float(total_variation)\n",
    "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity in the image'\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels achieving maximum pixel value\"\n    max_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(max_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixel count to total pixel count\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.gradient(gray)\n    edge_magnitude = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    edge_pixel_count = np.count_nonzero(edge_magnitude > np.mean(edge_magnitude))\n    return float(edge_pixel_count / (gray.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the average intensity of the top quarter to the bottom quarter of the image'\n    h, w = image.shape[:2]\n    top_quarter = image[0:h//4]\n    bottom_quarter = image[3*h//4:h]\n    return float(np.mean(top_quarter) / (np.mean(bottom_quarter) + 1e-8))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    unique_values = np.unique(gray)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are max intensity in the whole image\"\n    max_intensity = np.max(image)\n    count_max_pixels = np.count_nonzero(image == max_intensity)\n    total_pixels = image.size\n    return float(count_max_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image above a specified intensity threshold\"\n    threshold = 100\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region) / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_region = image[h * 3 // 4:h, :]\n    return float(np.mean(bottom_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom row of the image'\n    return float(np.count_nonzero(image[-1, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensities of the left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:]\n    return float(np.mean(right_half) - np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower half that are darker than 50\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    dark_pixel_count = np.count_nonzero(lower_half < 50)\n    return float(dark_pixel_count) / lower_half.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the green channel\"\n    if len(image.shape) == 3:\n        return float(image[:,:,1].std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top half and bottom half\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the central area with intensity above a threshold (180)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    count_above_threshold = np.count_nonzero(center_region > 180)\n    return float(count_above_threshold)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity value in the whole image\"\n    return float(np.max(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of white pixels above a given threshold (e.g., 200) in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 200\n    white_pixel_count = np.count_nonzero(gray > threshold)\n    total_pixel_count = gray.size\n    return float(white_pixel_count / total_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left edge of the image\"\n    h, w = image.shape[:2]\n    left_edge = image[:, :w//4]\n    return float(np.std(left_edge))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the edge region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.concatenate((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    return float(np.sum(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of the center region that is non-zero\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    non_zero_count = np.count_nonzero(center_region)\n    return float(non_zero_count / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the right quarter of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    right_quarter = gray[:, 3*w//4:]\n    return float(np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between the left and right halves\"\n    h, w = image.shape\n    left_half = image[:, :w // 2]\n    right_half = image[:, w // 2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels in the center region that are non-zero'\n    h, w = image.shape\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.count_nonzero(center_region) / (center_region.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the top half to the bottom half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    avg_top = np.mean(top_half)\n    avg_bottom = np.mean(bottom_half)\n    return float(avg_top / (avg_bottom + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-10  # avoid log(0)\n    return float(-np.sum(histogram * np.log(histogram)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Relative mean intensity of the lower half compared to the upper half'\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    upper_half = image[:h//2, :]\n    mean_lower = np.mean(lower_half)\n    mean_upper = np.mean(upper_half)\n    return float(mean_lower / (mean_upper + 1e-10))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top right quarter\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.std(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are purely white (255) across all channels\"\n    if len(image.shape) == 3:\n        white_pixel_count = np.count_nonzero(np.all(image == 255, axis=2))\n    else:\n        white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the number of non-zero pixels in the bottom half to top half'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half_nonzero = np.count_nonzero(gray[:h//2])\n    bottom_half_nonzero = np.count_nonzero(gray[h//2:])\n    return float(bottom_half_nonzero) / (top_half_nonzero + 1e-10)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of edge pixels (using gradient) in the image\"\n    gradient = np.gradient(image.astype(float))\n    edge_pixels = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    edge_count = np.count_nonzero(edge_pixels)\n    total_pixels = image.shape[0] * image.shape[1]\n    return float(edge_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the top right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_right = gray[:h//2, w//2:]\n    return float(np.var(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count non-zero pixels in the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    count_nonzero = np.count_nonzero(bottom_left)\n    return float(count_nonzero)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the central 10% of the image\"\n    h, w = image.shape[:2]\n    central_region = image[h//10:9*h//10, w//10:9*w//10]\n    return float(np.mean(central_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in average intensity between the top half and bottom half of the image'\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average color difference between the three channels'\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_green = np.mean(image[:,:,1])\n        avg_blue = np.mean(image[:,:,2])\n        return float(avg_red + avg_green + avg_blue) / 3.0\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 in intensity)\"\n    total_pixels = image.size\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across all channels\"\n    return float(np.mean(image)) if len(image.shape) == 3 else float(np.mean(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are darker than 100\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(left_half.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Total count of edge pixels based on a simple gradient threshold'\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    edge_count = np.count_nonzero(np.sqrt(gradient_x**2 + gradient_y**2) > 30)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the upper quarter and lower quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(upper_quarter) - np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average pixel intensity of the top vs bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0] // 2]\n    bottom_half = gray[gray.shape[0] // 2:]\n    return float(np.mean(top_half) / (np.mean(bottom_half) + 1e-5))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with medium intensity (between 100 and 150)\"\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 150))\n    total_pixels = image.size\n    return float(medium_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the mean gradient magnitude of pixel intensities in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities of the entire image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom right quadrant of the image\"\n    h, w = image.shape\n    bottom_right = image[h//2:, w//2:]\n    return float(np.count_nonzero(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity less than 50\"\n    low_intensity_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_pixel_count) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top right quarter\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.std(top_right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of edges detected using a simple threshold on gradient magnitudes\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_threshold = 15\n    edges = np.count_nonzero(gradient_magnitude > edge_threshold)\n    return float(edges)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are very dark (below 30)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    dark_pixels = np.count_nonzero(gray < 30)\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of white pixels to the total number of pixels\"\n    threshold = 255 / 2\n    white_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color deviation between green and the average of red and blue channels\"\n    if len(image.shape) == 3:\n        avg_green = np.mean(image[:,:,1])\n        avg_red_blue = np.mean(image[:,:,0:2])\n        return float(avg_green - avg_red_blue)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of non-zero pixels in the center region to the total number of non-zero pixels\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    total_non_zero = np.count_nonzero(image)\n    center_non_zero = np.count_nonzero(center_region)\n    return float(center_non_zero / total_non_zero) if total_non_zero > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels in the image using mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(np.abs(edges).sum(axis=0) > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the difference between the average pixel intensity of the top and bottom rows\"\n    top_row = image[0, :]\n    bottom_row = image[-1, :]\n    return float(np.mean(top_row) - np.mean(bottom_row))\n",
    "def feature(image: np.ndarray) -> float:\n    'Percentage of dark pixels (below threshold of 50) in the upper half of the image'\n    threshold = 50\n    h, w = image.shape[:2]\n    upper_half = image[:h//2, :]\n    dark_pixel_count = np.count_nonzero(upper_half < threshold)\n    return float(dark_pixel_count / upper_half.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean gradient magnitude computed from the red channel'\n    if len(image.shape) == 3:\n        gradient = np.gradient(image[:,:,0])\n        magnitude = np.sqrt(gradient[0]**2 + gradient[1]**2)\n        return float(np.mean(magnitude))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel values in the bottom row'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_row = gray[-1, :]\n    return float(np.std(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in the mean intensity of blue and green channels\"\n    if len(image.shape) == 3:\n        avg_blue = np.mean(image[:,:,2])\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_blue - avg_green)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges in the image using a simple gradient approach\"\n    gradient = np.abs(np.gradient(image.astype(float)))\n    edge_count = np.sum(gradient)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in maximum and minimum pixel values in the center region'\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region) - np.min(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the count of non-zero pixels in the lower quarter of the image.\"\n    lower_quarter = image[3 * image.shape[0] // 4:]\n    return float(np.count_nonzero(lower_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain brightness threshold (100)\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of non-zero pixels in the bottom half of the image\"\n    h, w = image.shape\n    bottom_half = image[h//2:, :]\n    total_pixels = bottom_half.size\n    non_zero_count = np.count_nonzero(bottom_half)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in maximum intensity between blue and green channels\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,2]) - np.max(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the top left quadrant above average intensity'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_left = gray[:h//2, :w//2]\n    avg_intensity = np.mean(gray)\n    count_above_avg = np.count_nonzero(top_left > avg_intensity)\n    return float(count_above_avg)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in the average pixel intensity between the left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2].mean()\n    right_half = gray[:, w//2:].mean()\n    return float(left_half - right_half)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on a simple gradient magnitude'\n    gradient = np.sqrt(np.gradient(image.astype(float))[0]**2 + np.gradient(image.astype(float))[1]**2)\n    return float(np.count_nonzero(gradient > 10))  # Edge threshold\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.var(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of the image covered by non-black pixels'\n    total_pixels = image.size\n    non_black_pixels = np.count_nonzero(image > 10)\n    return float(non_black_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left_quarter = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edges detected in the image using gradient'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    edges = np.sqrt(gx**2 + gy**2)\n    return float(np.count_nonzero(edges > 20))  # Edge strength threshold\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of blue channel pixels that are above 150'\n    if len(image.shape) == 3:\n        blue_pixel_count = np.count_nonzero(image[:,:,2] > 150)\n        total_pixels = image.size // 3\n        return float(blue_pixel_count / total_pixels)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of dark pixels (less than 50) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels\"\n    non_black_pixel_count = np.count_nonzero(image > 0)\n    total_pixels = image.size\n    return float(non_black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the upper half of the image\"\n    h, w = image.shape[:2]\n    upper_half = image[:h//2, :]\n    return float(np.mean(upper_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in average intensity between top and bottom quadrants'\n    h, w = image.shape[:2]\n    top_quadrant = image[:h//2, :w//2]\n    bottom_quadrant = image[h//2:, :w//2]\n    return float(np.mean(bottom_quadrant) - np.mean(top_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of horizontal edges in the image using a simple edge detection'\n    gradient_x = np.gradient(image, axis=1)\n    horizontal_edges = np.count_nonzero(np.abs(gradient_x) > 5)\n    return float(horizontal_edges)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels within a certain intensity range (e.g., 100-150)\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    count_in_range = np.count_nonzero((gray >= 100) & (gray <= 150))\n    return float(count_in_range)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of red channel dominance in the image\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0] > image[:,:,1]\n        red_channel &= image[:,:,0] > image[:,:,2]\n        red_pixel_count = np.count_nonzero(red_channel)\n        total_pixels = image.size // 3\n        return float(red_pixel_count / total_pixels)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Fraction of non-zero pixels in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region) / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average gradient magnitude in the image\"\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between the maximum and minimum pixel intensity'\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom-left quadrant of the image'\n    h, w = image.shape[:2]\n    bottom_left_quadrant = image[h//2:h, :w//2]\n    return float(np.count_nonzero(bottom_left_quadrant))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_quarter = image[3*h//4:, :]\n    return float(np.sum(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities between the top left and bottom right quadrants\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity computed from the edges of the image\"\n    h, w = image.shape[:2]\n    edges = np.concatenate([\n        image[0, :], image[h-1, :], image[:, 0], image[:, w-1]\n    ])\n    return float(np.mean(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram entropy of the image intensities\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    hist = hist[hist > 0]  # Ignore zero entries to avoid log(0)\n    probabilities = hist / np.sum(hist)\n    return -np.sum(probabilities * np.log(probabilities))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are red (values in R channel > G and B channels)\"\n    if len(image.shape) == 3:\n        red_pixels = np.count_nonzero((image[:,:,0] > image[:,:,1]) & (image[:,:,0] > image[:,:,2]))\n        total_pixels = image.size // 3\n    else:\n        return 0.0\n    return float(red_pixels) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the red channel\"\n    if len(image.shape) == 3:\n        return float(image[:,:,0].std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    return float(np.mean(image[-1, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of black pixels (value 0) to total pixel count\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = np.prod(gray.shape)\n    zero_pixels = np.count_nonzero(gray == 0)\n    return float(zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the center region of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels at the left edge of the image above a threshold'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_edge = gray[:, :5]\n    return float(np.count_nonzero(left_edge > 200))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between top left and bottom right quadrants\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the entire image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of distinct pixel intensity values in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Sum of edges detected using gradient in the horizontal direction'\n    gradients = np.gradient(image.astype(float), axis=1)\n    return float(np.sum(np.abs(gradients)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity histogram\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256, range=[0, 256])\n    prob = hist / np.sum(hist)\n    entropy = -np.sum(prob[prob > 0] * np.log(prob[prob > 0]))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity < 50) in the entire image\"\n    return float(np.count_nonzero(image < 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the top and bottom halves of the image\"\n    h, w = image.shape\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels brighter than 100\"\n    bright_pixel_count = np.count_nonzero(image > 100)\n    return float(bright_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of the image that is part of the top half\"\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :]\n    total_pixels = h * w\n    top_half_pixels = np.count_nonzero(top_half)\n    return float(top_half_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between the top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are considered 'white' (intensity close to 255)\"\n    white_threshold = 240\n    total_pixels = image.size\n    white_pixels_count = np.count_nonzero(image >= white_threshold)\n    return float(white_pixels_count / total_pixels * 100)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of highly contrasted edges as compared to the median pixel value\"\n    median_value = np.median(image)\n    edges = np.gradient(image)\n    contrast_edges = np.count_nonzero(edges > median_value)\n    return float(contrast_edges)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are grayscale (R=G=B)\"\n    if len(image.shape) == 3:\n        gray_pixels = np.count_nonzero(np.all(image[:,:,0] == image[:,:,1], axis=2) & \n                                        np.all(image[:,:,1] == image[:,:,2], axis=2))\n        total_pixels = image.size\n        return float(gray_pixels) / total_pixels\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the sum of pixel intensities in the middle row to the total intensity'\n    h, w = image.shape[:2]\n    middle_row = image[h // 2, :]\n    total_intensity = np.sum(image)\n    return float(np.sum(middle_row) / (total_intensity + 1e-6))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of non-white pixels (intensity > 240) in the image\"\n    threshold = 240\n    non_white_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(non_white_pixels / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-black pixels (greater than 10 intensity)\"\n    non_black_pixel_count = np.count_nonzero(image > 10)\n    total_pixels = image.size\n    return float(non_black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right quarter\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w//2:]\n    return float(np.std(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels within a diagonal band from top left to bottom right\"\n    h, w = image.shape[:2]\n    diagonal_band = image[np.arange(h), np.arange(w)]\n    return float(np.mean(diagonal_band))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region that are below a certain threshold\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region < 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity in a specific range (100 to 150)\"\n    range_count = np.count_nonzero((image >= 100) & (image <= 150))\n    total_pixels = image.size\n    return float(range_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity found in the bottom-left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.max(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-white pixels (greater than 240 in any channel)'\n    if len(image.shape) == 3:\n        non_white_count = np.count_nonzero(np.sum(image, axis=2) < 240 * 3)\n        return float(non_white_count)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom left quarter\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.max(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the top half and bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half = gray[:h//2, :]\n    bottom_half = gray[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top-right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.count_nonzero(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape if len(image.shape) == 2 else image.shape[:2]\n    left_mean = np.mean(image[:, :w//2])\n    right_mean = np.mean(image[:, w//2:])\n    return float(left_mean - right_mean)\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the left quarter of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_quarter = gray[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the average intensity of the bottom half and the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels in the image\"\n    threshold = 200  # Example threshold for a bright pixel in grayscale\n    bright_pixels = np.count_nonzero(image > threshold)\n    total_pixels = np.size(image)\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:h, :]\n    return float(np.count_nonzero(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of zero pixels to total pixels\"\n    zero_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(zero_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Coefficient of variation (std/mean) of pixel intensities\"\n    mean_intensity = image.mean()\n    std_intensity = image.std()\n    return float(std_intensity / mean_intensity) if mean_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of edge pixels using a simple gradient approach'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_pixels = np.sqrt(gradients[0]**2 + gradients[1]**2) > 10\n    return float(np.mean(gray[edge_pixels]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity for the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_quarter = image[h*3//4:, :]\n    return float(np.mean(bottom_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.max(top_right_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected using simple gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    edges = np.sqrt(gx**2 + gy**2)\n    edge_count = np.count_nonzero(edges > np.mean(edges))\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count the number of dark pixels (intensity < 50) in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_half = gray[h//2:]\n    return float(np.count_nonzero(bottom_half < 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of unique colors in the image\"\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n        return float(unique_colors.shape[0])\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in average intensity between the darkest quarter and brightest quarter of the image'\n    h, w = image.shape[:2]\n    darkest_quarter = image[0:h//2, 0:w//2]\n    brightest_quarter = image[h//2:, w//2:]\n    return float(np.mean(darkest_quarter) - np.mean(brightest_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right = image[0:h//2, w//2:w]\n    return float(np.max(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left and right quarters of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, 3*w//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edges detected in the image\"\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edges) / np.size(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count the number of pixels in the center region that exceed a certain intensity threshold'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    threshold = 127  # midpoint of 0-255 range\n    return float(np.count_nonzero(center_region > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the horizontal direction\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(grad_x)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the center region of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the average pixel intensity across all four quadrants and return the maximum of them\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    q1 = np.mean(gray[:h//2, :w//2])\n    q2 = np.mean(gray[:h//2, w//2:])\n    q3 = np.mean(gray[h//2:, :w//2])\n    q4 = np.mean(gray[h//2:, w//2:])\n    return float(max(q1, q2, q3, q4))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the top row of the image\"\n    return float(np.var(image[0, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between red and blue channels\"\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_blue = np.mean(image[:,:,2])\n        return float(avg_red - avg_blue)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the sum of pixel intensities in the left to right half\"\n    h, w = image.shape[:2]\n    left_half_sum = np.sum(image[:, :w//2])\n    right_half_sum = np.sum(image[:, w//2:])\n    return float(left_half_sum / (right_half_sum + 1e-10))  # Avoid division by zero\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the sum of pixel intensities in the top half to the bottom half'\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.sum(top_half) / (np.sum(bottom_half) + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the center region that are above a certain intensity threshold\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_h, center_w = h // 4, w // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    threshold = 128\n    return float(np.count_nonzero(center_region > threshold) / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top quarter of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4, :]\n    return float(np.mean(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the image'\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensities in the image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between color channels\"\n    if len(image.shape) == 3:\n        r_channel = image[:, :, 0]\n        g_channel = image[:, :, 1]\n        b_channel = image[:, :, 2]\n        return float(np.mean(r_channel) - np.mean(g_channel)) + float(np.mean(g_channel) - np.mean(b_channel))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the right half of the image\"\n    h, w = image.shape\n    right_half = image[:, w//2:]\n    return float(np.count_nonzero(right_half) / (h * (w // 2) + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in pixel intensity between the top and bottom quarters of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_quarter = gray[:gray.shape[0] // 4]\n    bottom_quarter = gray[3*gray.shape[0] // 4:]\n    return float(np.mean(top_quarter) - np.mean(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is dark (intensity < 50)\"\n    total_pixels = np.size(image)\n    dark_pixels = np.count_nonzero(image < 50)\n    return float(dark_pixels / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel intensity histogram'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256)\n    mean = np.mean(hist)\n    std_dev = np.std(hist)\n    skewness = np.sum((hist - mean)**3) / ((h * w) * (std_dev**3 + 1e-5))\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean pixel intensity between the upper and lower halves'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    upper_half_mean = np.mean(gray[:h//2, :])\n    lower_half_mean = np.mean(gray[h//2:, :])\n    return float(upper_half_mean - lower_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are above average intensity\"\n    average_intensity = np.mean(image)\n    above_average = np.count_nonzero(image > average_intensity)\n    total_pixels = np.size(image)\n    return float(above_average / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels with medium intensity (between 100 and 200)'\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 200))\n    total_pixels = image.size\n    return float(medium_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    bright_region = image[h*3//4:, w*3//4:] if len(image.shape) == 2 else image[h*3//4:, w*3//4:, :]\n    return float(np.mean(bright_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels in the image\"\n    threshold = 10\n    non_black_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(non_black_pixels / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Peak-to-peak (range) pixel intensity in the upper quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    return float(np.max(upper_quarter) - np.min(upper_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of saturated pixels (intensity equal to 255)\"\n    saturated_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(saturated_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region that are white (greater than 220 in all channels)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    white_pixel_count = np.count_nonzero(np.all(center_region > 220, axis=-1))\n    return float(white_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (greater than 200 in intensity)\"\n    total_pixels = image.size\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of distinct color variations in the image'\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n        return float(len(unique_colors))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with maximum intensity\"\n    return float(np.count_nonzero(image == np.max(image)) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the central band of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    central_band = gray[h//4:3*h//4, :]\n    return float(np.count_nonzero(central_band))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity of the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(np.sum(np.square(gradients), axis=0))\n    return float(np.mean(magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity less than 50)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left and right columns of the image\"\n    h, w = image.shape[:2]\n    left_column = image[:, 0]\n    right_column = image[:, w-1]\n    return float(np.mean(left_column) - np.mean(right_column))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    return float(np.count_nonzero(image) / np.prod(image.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram skewness of pixel intensities in the entire image\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 256))\n    mean = np.mean(hist)\n    std_dev = np.std(hist)\n    skewness = (np.sum((hist - mean) ** 3) / (len(hist) * std_dev ** 3)) if std_dev != 0 else 0\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels belonging to the top 10% of intensity values\"\n    threshold = np.percentile(image, 90)\n    bright_pixel_count = np.count_nonzero(image >= threshold)\n    return float(bright_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation of the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(left_half.std() - right_half.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are pure white (255)\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    return float(white_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the border pixels of the image\"\n    h, w = image.shape[:2]\n    border_pixels = np.concatenate([image[0, :], image[h - 1, :], image[:, 0], image[:, w - 1]])\n    return float(np.mean(border_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of edge pixels to total pixels in the image\"\n    edges = np.count_nonzero(np.gradient(image))\n    total_pixels = image.size\n    return float(edges / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the bottom row of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[-1, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of non-zero pixels in the entire image'\n    total_pixels = image.size\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count) / total_pixels if total_pixels > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of the average intensity of RGB channels'\n    if len(image.shape) == 3:\n        avg_intensity = np.mean(image, axis=2)\n        return float(avg_intensity.std())\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Edge count based on pixel values changing significantly between adjacent pixels'\n    gradients = np.abs(np.gradient(image.astype(float)))\n    edge_count = np.count_nonzero(gradients[0]) + np.count_nonzero(gradients[1])\n    return float(edge_count) / image.size\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels (defined as pixels at the image border) to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edge_region = np.concatenate((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    total_pixels = np.size(gray)\n    edge_pixels = np.count_nonzero(edge_region)\n    return float(edge_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean intensity between left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of red channel intensity to the sum of all channels'\n    if len(image.shape) == 3:\n        red_intensity = np.sum(image[:,:,0])\n        total_intensity = np.sum(image)\n        return float(red_intensity) / total_intensity if total_intensity > 0 else 0.0\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the outer edges of the image\"\n    h, w = image.shape[:2]\n    edges = np.concatenate((image[0, :], image[-1, :], image[:, 0], image[:, -1]))\n    return float(np.mean(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of edges detected in the image using gradients\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x, grad_y = np.gradient(gray)\n    edges = np.sqrt(grad_x**2 + grad_y**2)\n    return float(np.sum(edges > 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity greater than 100 across all channels\"\n    count_intensity_above_100 = np.count_nonzero(image > 100)\n    total_pixels = image.size\n    return float(count_intensity_above_100) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region of the image\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution in the image\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist += 1e-10  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the number of non-zero pixels in the upper and lower halves\"\n    h, w = image.shape[:2]\n    upper_half_nonzero = np.count_nonzero(image[:h//2])\n    lower_half_nonzero = np.count_nonzero(image[h//2:])\n    return float(upper_half_nonzero - lower_half_nonzero)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Colorfulness measure based on standard deviation of color channels\"\n    if len(image.shape) == 3:\n        r, g, b = image[:,:,0], image[:,:,1], image[:,:,2]\n        colorfulness = np.std(r) + np.std(g) + np.std(b)\n    else:\n        colorfulness = 0.0\n    return float(colorfulness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the corners of the image\"\n    top_left = image[0, 0]\n    top_right = image[0, -1]\n    bottom_left = image[-1, 0]\n    bottom_right = image[-1, -1]\n    return float(np.mean([top_left, top_right, bottom_left, bottom_right]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Find mean intensity of the vertical edges in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, _ = np.gradient(gray)\n    vertical_edges = np.abs(gx)\n    return float(np.mean(vertical_edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the image excluding the lowest 10% of pixel values\"\n    threshold = np.percentile(image.flatten(), 10)\n    filtered_pixels = image[image > threshold]\n    return float(np.mean(filtered_pixels)) if len(filtered_pixels) > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of the mean intensities of color channels'\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.std(channel_means))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.mean(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram variance of pixel intensities\"\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    return float(np.var(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.mean(top_right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values across all channels\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity difference between any two color channels in RGB images\"\n    if len(image.shape) == 3:\n        channel_diffs = np.abs(image[:,:,0] - image[:,:,1])\n        channel_diffs = np.maximum(channel_diffs, np.abs(image[:,:,1] - image[:,:,2]))\n        channel_diffs = np.maximum(channel_diffs, np.abs(image[:,:,0] - image[:,:,2]))\n        return float(np.max(channel_diffs))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the upper quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_quarter = gray[:gray.shape[0]//4, :]\n    return float(np.mean(upper_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0]//4:3*gray.shape[0]//4, gray.shape[1]//4:3*gray.shape[1]//4]\n    return float(((np.mean(center_region) - np.median(center_region)) / np.std(center_region)) ** 3)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using gradient magnitude\"\n    gradient_x, gradient_y = np.gradient(image)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(gradient_magnitude > np.mean(gradient_magnitude)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel intensity values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_values = np.unique(gray)\n    return float(unique_values.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the corners of the image\"\n    corners_mean = (image[0, 0] + image[0, -1] + image[-1, 0] + image[-1, -1]) / 4\n    overall_mean = np.mean(image)\n    return float(corners_mean - overall_mean)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the edge-detected image\"\n    if len(image.shape) == 3:\n        edges = np.gradient(np.mean(image, axis=2))\n        return float(np.mean(np.sqrt(edges[0]**2 + edges[1]**2)))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region, indicating uniformity\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel value in the left half of the image minus the mean in the right half'\n    h, w = image.shape\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean pixel intensity of the top and bottom halves\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    top_half = gray[:h//2, :]\n    bottom_half = gray[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the top right quadrant of the image'\n    h, w = image.shape if len(image.shape) == 2 else image.shape[:2]\n    top_right_quadrant = image[:h//2, w//2:]\n    return float(np.count_nonzero(top_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Percentage of pixels that have low intensity (considered \"dark\")'\n    dark_threshold = 50\n    total_pixels = image.size\n    dark_pixels_count = np.count_nonzero(image <= dark_threshold)\n    return float(dark_pixels_count / total_pixels * 100)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left quarter and right quarter\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, 3*w//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.std(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation of pixel intensity between the top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0] // 2, :]\n    bottom_half = gray[gray.shape[0] // 2:, :]\n    return float(np.std(bottom_half) - np.std(top_half))\n",
    "def feature(image: np.ndarray) -> float:\n    'Total number of non-zero pixels in the image'\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean absolute difference between rows in the image'\n    row_diff = np.abs(np.diff(image, axis=0))\n    return float(np.mean(row_diff))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixel values in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the red channel to the green channel\"\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_red / (avg_green + 1e-6))  # Add small epsilon to avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.std(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are interpreted as dark (below a threshold of 75)\"\n    return float(np.count_nonzero(image < 75) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[3*h//4:h, :]\n    return float(np.mean(lower_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of the pixel intensity distribution in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    stddev = np.std(gray)\n    skew = np.mean((gray - mean) ** 3) / (stddev ** 3) if stddev != 0 else 0.0\n    return float(skew)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the top half and bottom half of the image\"\n    h, w = image.shape\n    top_half_avg = np.mean(image[:h//2])\n    bottom_half_avg = np.mean(image[h//2:])\n    return float(bottom_half_avg - top_half_avg)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the difference in average intensity between the left and right halves of the image.\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.sum(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure of intensity uniformity in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.std(gray) / (gray.mean() + 1e-5))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure the intensity variance in the central region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge pixel density in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edges = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    edge_density = np.count_nonzero(edges) / edges.size\n    return float(edge_density)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of horizontal edges in the image detected using gradients'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y = np.gradient(gray, axis=0)\n    edge_count = np.count_nonzero(gradient_y)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the left quarter of the image\"\n    h, w = image.shape if len(image.shape) == 2 else image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.count_nonzero(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region exceeding the mean intensity\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    mean_intensity = np.mean(center_region)\n    return float(np.count_nonzero(center_region > mean_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.std(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between average intensity of the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels determined by gradient magnitude in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h // 2]\n    gradient = np.gradient(top_half.astype(float))\n    magnitude = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    return float(np.count_nonzero(magnitude > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the lower quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    lower_quarter = gray[h * 3 // 4:h, :]\n    non_zero_count = np.count_nonzero(lower_quarter)\n    total_pixels = lower_quarter.size\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    unique_pixel_values = np.unique(image)\n    return float(len(unique_pixel_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the corners of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (intensity < 50) to total pixels\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels) / total_pixels if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    return float(np.mean(upper_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower row of pixels\"\n    h, w = image.shape[:2]\n    lower_row = image[h-1, :]\n    return float(np.mean(lower_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Intensity ratio of the center region to the overall image'\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region) / np.mean(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom right quadrant'\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.count_nonzero(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in pixel intensity mean between the left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on gradient thresholding'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    edge_pixels = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_count = np.count_nonzero(edge_pixels > 15)  # threshold to consider as edge\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the count of non-zero pixels in the upper half to the lower half\"\n    h, w = image.shape[:2]\n    upper_half = np.count_nonzero(image[:h//2])\n    lower_half = np.count_nonzero(image[h//2:])\n    return float(upper_half) / (lower_half + 1e-5)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of horizontal edges detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray, axis=0)\n    return float(np.count_nonzero(edges > 1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels in the bottom half of the image\"\n    if len(image.shape) == 2:\n        h, w = image.shape\n    else:\n        h, w, _ = image.shape\n    bottom_half = image[h // 2:, :]\n    dark_pixel_count = np.count_nonzero(bottom_half < 50)\n    return float(dark_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram skewness of pixel intensities\"\n    histogram, _ = np.histogram(image.flatten(), bins=256)\n    return float(np.mean(((histogram - np.mean(histogram))**3) / (np.std(histogram) ** 3)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    right_half = gray[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels to the total number of pixels\"\n    bright_pixels = np.sum(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 in intensity)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red and blue channel difference\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of horizontal edges detected using gradient magnitude'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y = np.gradient(gray, axis=0)\n    horizontal_edges_count = np.count_nonzero(np.abs(gradient_y) > 20)\n    return float(horizontal_edges_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple edge detection based on gradient\"\n    gradient = np.gradient(image.astype(float))\n    edges = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    return float(np.count_nonzero(edges > np.mean(edges)))\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity of the border pixels of the image'\n    h, w = image.shape[:2]\n    borders = np.concatenate([image[0, :], image[-1, :], image[:, 0], image[:, -1]])\n    return float(np.mean(borders))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    if len(image.shape) == 3:\n        image = np.mean(image, axis=2)\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(center_region.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels in the entire image\"\n    bright_count = np.count_nonzero(image > 128)\n    dark_count = np.count_nonzero(image <= 128)\n    return float(bright_count) / (dark_count + 1)  # Adding 1 to avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between mean intensity of top and bottom halves of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2]\n    bottom_half = gray[gray.shape[0]//2:]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels in the bottom halves to those in the top halves'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    top_half = gray[:h//2]\n    bottom_half = gray[h//2:]\n    return float(np.count_nonzero(bottom_half) / np.count_nonzero(top_half + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient intensity across the image\"\n    gradients = np.gradient(image.astype(float))\n    gradient_magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.max(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the green channel\"\n    if len(image.shape) == 3:\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_green)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the rightmost column\"\n    h, w = image.shape[:2]\n    right_column = image[:, w-1]\n    return float(np.std(right_column))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in pixel intensity between edge pixels and center pixels'\n    edges = np.concatenate([image[0, :], image[-1, :], image[:, 0], image[:, -1]])\n    center = image[image.shape[0]//2, image.shape[1]//2]\n    return float(np.mean(edges) - center)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_quarter = gray[3*gray.shape[0]//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    brightest_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(brightest_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of local maxima in the image, indicating peaks in pixel intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad = np.gradient(gray)\n    local_maxima = np.sum((grad[0] > 0) & (np.roll(grad[0], -1) < 0) &\n                          (grad[1] > 0) & (np.roll(grad[1], -1) < 0))\n    return float(local_maxima)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in brightness between the brightest and darkest pixels'\n    brightest = image.max()\n    darkest = image.min()\n    return float(brightest - darkest)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-dominant color pixels (pixels where no channel is > 200)\"\n    if len(image.shape) == 3:\n        non_dominant_count = np.count_nonzero(np.all(image <= 200, axis=-1))\n        total_pixels = image.shape[0] * image.shape[1]\n    else:\n        return 0.0\n    return float(non_dominant_count) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity values for texture recognition\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # filter out zero entries\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the left half of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.std(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    right_half = gray[:, gray.shape[1] // 2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left half and the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    right_half = gray[:, gray.shape[1] // 2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image overall\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_pixels = gray.size\n    non_zero_count = np.count_nonzero(gray)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the image histogram\"\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    hist = hist / np.sum(hist)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are significantly bright (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel intensities in the center region\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the entire image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edges detected in the bottom quadrant of the image'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    bottom_quadrant = gray[h // 2:, :]\n    edges = np.gradient(bottom_quadrant)\n    edge_count = np.count_nonzero(edges[0]) + np.count_nonzero(edges[1])\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the average intensity of the top half and the bottom half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge density computed as the sum of gradients in the image\"\n    edges = np.gradient(image.astype(float))\n    edge_density = np.sum(np.abs(edges[0])) + np.sum(np.abs(edges[1]))\n    return float(edge_density)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with above-average intensity in the center region\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    average_intensity = np.mean(center_region)\n    above_average_count = np.count_nonzero(center_region > average_intensity)\n    return float(above_average_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between the left half and the right half of the image\"\n    h, w = image.shape[:2]\n    left_mean = np.mean(image[:, :w//2])\n    right_mean = np.mean(image[:, w//2:])\n    return float(left_mean - right_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average contrast as measured by the standard deviation of pixel intensity\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with green channel intensity greater than red channel\"\n    if len(image.shape) == 3:\n        green_dominance = image[:,:,1] > image[:,:,0]\n        green_pixel_count = np.count_nonzero(green_dominance)\n        total_pixels = image.size // 3\n        return float(green_pixel_count / total_pixels)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of different intensity levels present in the image'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    unique_intensity_count = len(np.unique(gray))\n    return float(unique_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram skewness of pixel intensities in the bottom left quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left = gray[h//2:, :w//2]\n    hist, _ = np.histogram(bottom_left.flatten(), bins=256)\n    hist_mean = np.mean(hist)\n    skewness = np.mean((np.arange(256) - hist_mean) ** 3) / np.std(hist) ** 3\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a threshold in the top left quadrant of the image\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    top_left_quadrant = gray[:h//2, :w//2]\n    threshold = 50  # Example threshold\n    count_below_threshold = np.count_nonzero(top_left_quadrant < threshold)\n    return float(count_below_threshold)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the center region that are above a certain intensity threshold'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    threshold = 128\n    return float(np.count_nonzero(center_region > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value in the image to total possible pixel value\"\n    max_pixel_value = np.max(image)\n    return float(max_pixel_value / 255)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel intensity to minimum pixel intensity\"\n    max_intensity = np.max(image)\n    min_intensity = np.min(image)\n    return float(max_intensity / min_intensity) if min_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Gradient magnitude in the center region of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    gx, gy = np.gradient(center_region)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right_corner = image[h//2:, w//2:]\n    return float(np.max(bottom_right_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Sum of pixel intensities in the top right quadrant of the image'\n    h, w = image.shape[:2]\n    top_right_quadrant = image[:h // 2, w // 2:]\n    return float(np.sum(top_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    non_zero_count = np.count_nonzero(gray)\n    total_pixels = gray.size\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of edge pixels detected via Sobel filter'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    from scipy.ndimage import sobel\n    edge_magnitude = np.sqrt(sobel(gray, axis=0)**2 + sobel(gray, axis=1)**2)\n    return float(np.mean(edge_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the upper and lower quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    lower_quarter = image[h//4:, :]\n    return float(np.mean(upper_quarter) - np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.std(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the center region of the image'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_h, center_w = h // 4, w // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the center region of the image\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image weighted by distance from the center\"\n    h, w = image.shape[:2]\n    y_indices, x_indices = np.indices(image.shape)\n    center_y, center_x = h / 2, w / 2\n    distances = np.sqrt((x_indices - center_x)**2 + (y_indices - center_y)**2)\n    weighted_intensity = image * (1 / (distances + 1e-5))\n    return float(np.sum(weighted_intensity) / np.sum((1 / (distances + 1e-5))))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of central region disturbing total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    central_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(central_region) / (central_region.size))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the left half compared to the right half'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0] // 2:, :]\n    return float(np.count_nonzero(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the sum of pixel intensities in the upper half to the lower half'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_half = gray[:gray.shape[0] // 2, :]\n    lower_half = gray[gray.shape[0] // 2:, :]\n    sum_upper = np.sum(upper_half)\n    sum_lower = np.sum(lower_half)\n    return float(sum_upper / (sum_lower + 1e-5))  # Avoid division by zero\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of dark pixels (intensity < 50) in the bottom half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_half = gray[h//2:, :]\n    dark_pixels = np.count_nonzero(bottom_half < 50)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average contrast measure defined by the difference between max and mean\"\n    return float(image.max() - image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation of pixel intensities between top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half_std = np.std(image[0:h//2, :])\n    bottom_half_std = np.std(image[h//2:, :])\n    return float(top_half_std - bottom_half_std)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels detected using the gradient in both x and y directions\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    edge_pixels = np.count_nonzero(np.sqrt(gx**2 + gy**2) > 10)\n    return float(edge_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color channel difference between red and blue\"\n    if len(image.shape) == 3:\n        color_diff = np.mean(image[:,:,0]) - np.mean(image[:,:,2])\n    else:\n        color_diff = 0.0\n    return float(color_diff)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of non-zero pixels in the top half to the bottom half of the image'\n    h, w = image.shape\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    ratio = np.count_nonzero(top_half) / (1e-6 + np.count_nonzero(bottom_half))  # Avoid division by zero\n    return float(ratio)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Determine the proportion of edges detected (non-zero gradients) in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray)[0]**2 + np.gradient(gray)[1]**2)\n    edges_count = np.count_nonzero(gradient_magnitude)\n    return float(edges_count) / (gray.size + 1e-6)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left = gray[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensity in the outer region of the image'\n    h, w = image.shape[:2]\n    outer_region = np.concatenate([\n        image[0, :], image[-1, :], image[:, 0], image[:, -1]\n    ])\n    return float(np.std(outer_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the central region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to mean pixel value\"\n    max_value = image.max()\n    mean_value = np.mean(image)\n    return float(max_value / mean_value) if mean_value > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    non_zero_count = np.count_nonzero(image)\n    total_pixels = np.prod(image.shape[:2])\n    return float(non_zero_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the bottom-left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel intensities\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity in the lower half of the image'\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.sum(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    lower_region = gray[3*h//4:h, :]\n    return float(np.mean(lower_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are greater than a threshold (200)\"\n    threshold_count = np.count_nonzero(image > 200)\n    return float(threshold_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 240)\"\n    high_intensity_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the top half of the image'\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.count_nonzero(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensity across the image'\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the proportion of edges in the image to identify structure.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(edges[0]) + np.count_nonzero(edges[1])\n    total_count = gray.size\n    return float(edge_count / total_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h // 2:, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom-left quadrant of the image\"\n    if len(image.shape) == 2:\n        bottom_left = image[image.shape[0] // 2:, :image.shape[1] // 2]\n    else:\n        bottom_left = image[image.shape[0] // 2:, :image.shape[1] // 2, :].mean(axis=2)\n    return float(np.sum(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across all channels\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of high-contrast pixels (absolute gradient > 50)\"\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    high_contrast_count = np.count_nonzero(gradient_magnitude > 50)\n    return float(high_contrast_count)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity deviation from the average across the image\"\n    mean_intensity = np.mean(image)\n    return float(np.mean(np.abs(image - mean_intensity)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the difference in average intensities between left and right halves.\"\n    h, w = image.shape[:2]\n    left_half = np.mean(image[:, :w//2])\n    right_half = np.mean(image[:, w//2:])\n    return float(left_half - right_half)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with low intensity (below 50) in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    low_intensity_count = np.count_nonzero(center_region < 50)\n    return float(low_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Aspect ratio of the image (width / height)'\n    h, w = image.shape[:2]\n    return float(w / h)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray_image = np.mean(image, axis=2)\n    else:\n        gray_image = image\n    gradient_magnitude = np.sqrt(np.gradient(gray_image)[0]**2 + np.gradient(gray_image)[1]**2)\n    edge_pixel_count = np.count_nonzero(gradient_magnitude > 20)\n    return float(edge_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity in the upper half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    upper_half = gray[:h//2, :]\n    return float(np.max(upper_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Correlation between pixel intensities across the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :].flatten()\n    bottom_half = image[h//2:, :].flatten()\n    correlation = np.corrcoef(top_half, bottom_half)[0, 1] if top_half.size > 0 and bottom_half.size > 0 else 0\n    return float(correlation)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity along the horizontal mid-line of the image\"\n    h, w = image.shape\n    mid_line = image[h // 2, :]\n    return float(np.mean(mid_line))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance in pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.var(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the mean pixel intensity in the bottom quarter to the top quarter'\n    h, w = image.shape if len(image.shape) == 2 else image.shape[:2]\n    top_quarter_mean = np.mean(image[:h//4, :])\n    bottom_quarter_mean = np.mean(image[3*h//4:, :])\n    return float(bottom_quarter_mean / (top_quarter_mean + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity difference between any two adjacent pixels\"\n    gradients = np.abs(np.gradient(image, axis=(0, 1)))\n    max_diff = np.max(np.sum(gradients, axis=-1))\n    return float(max_diff)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the image along the main diagonal'\n    h, w = image.shape[:2]\n    diagonal = image[min(h, w) - 1, min(h, w) - 1]\n    return float(np.mean(diagonal))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of edge pixels detected in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)[0]  # Using the x-gradient\n    edge_count = np.count_nonzero(edges)\n    total_pixels = gray.size\n    return float(edge_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of vertical edge pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_y, gradient_x = np.gradient(gray)\n    edge_pixels = np.count_nonzero(np.abs(gradient_x) > 10)\n    return float(edge_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the central region of the image\"\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to the sum of all channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        blue_intensity = np.mean(image[:,:,2])\n        total_intensity = np.mean(image)\n        return float(blue_intensity / (total_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    right_half = gray[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    right_half = gray[:, gray.shape[1] // 2:]\n    left_mean = np.mean(left_half)\n    right_mean = np.mean(right_half)\n    return float(left_mean - right_mean)\n",
    "def feature(image: np.ndarray) -> float:\n    'Compute the mean intensity difference between the top and bottom quarters of the image'\n    h, w = image.shape[:2]\n    top_quarter = image[:h // 4, :]\n    bottom_quarter = image[3 * h // 4:, :]\n    return float(np.mean(top_quarter) - np.mean(bottom_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    'Smoothness measure based on the average gradient of pixel intensities'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.gradient(gray)\n    smoothness = np.mean(np.sqrt(gradient[0]**2 + gradient[1]**2))\n    return float(smoothness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Central gradient magnitude, indicating edge information in the center\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    gradients = np.gradient(center_region.astype(float))\n    grad_magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(grad_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region that are above average intensity\"\n    h, w = image.shape\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    avg_intensity = np.mean(center_region)\n    above_avg_count = np.count_nonzero(center_region > avg_intensity)\n    return float(above_avg_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are medium intensity (100-200)\"\n    medium_pixel_count = np.count_nonzero((image >= 100) & (image <= 200))\n    total_pixels = image.size\n    return float(medium_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h*3//4:, w*3//4:]\n    return float(np.mean(dark_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with maximum intensity in the middle column\"\n    h, w = image.shape[:2]\n    middle_column = image[:, w//2]\n    max_pixel_count = np.count_nonzero(middle_column == 255)\n    return float(max_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of dark pixels (less than 100) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensity of the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the image that are classified as edges using a basic gradient filter'\n    gradient = np.gradient(image.astype(float))\n    edge_count = np.count_nonzero(np.abs(gradient[0]) + np.abs(gradient[1]) > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel ratio of blue to red\"\n    if len(image.shape) == 3:\n        ratio = np.mean(image[:,:,2]) / (np.mean(image[:,:,0]) + 1e-6)\n        return float(ratio)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the darkest area of the image (bottom quarter)\"\n    h, w = image.shape[:2]\n    dark_region = image[h*3//4:, :]\n    return float(np.mean(dark_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image based on RGB values\"\n    if len(image.shape) == 3:\n        R, G, B = image[:,:,0], image[:,:,1], image[:,:,2]\n        saturation = (np.max(image, axis=2) - np.min(image, axis=2)) / (np.max(image, axis=2) + 1e-6)\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w // 4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the left and right halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    right_half = gray[:, gray.shape[1] // 2:]\n    mean_left = np.mean(left_half)\n    mean_right = np.mean(right_half)\n    return float(mean_left - mean_right)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels (value > 150) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the whole image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels in the top half versus bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2]\n    bottom_half = gray[gray.shape[0]//2:]\n    return float(np.sum(top_half) / (np.sum(bottom_half) + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity within the image'\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are above a certain high threshold\"\n    high_threshold = 200\n    proportion_high = np.count_nonzero(image > high_threshold) / image.size\n    return float(proportion_high)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the x-direction of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(gradient_x)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity across the entire image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixel transitions (edges) in the vertical direction\"\n    if len(image.shape) == 2:\n        gray = image\n    else:\n        gray = np.mean(image, axis=2)\n    vertical_gradient = np.gradient(gray, axis=0)\n    transitions = np.count_nonzero(np.diff((vertical_gradient > 0).astype(int)))\n    return float(transitions)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the average intensity of the left half to the right half'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2].mean()\n    right_half = image[:, w//2:].mean()\n    return float(left_half / (right_half + 1e-5))  # avoiding division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Pixel density in the center region compared to the entire image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    density_center = np.count_nonzero(center_region) / center_region.size\n    density_total = np.count_nonzero(image) / image.size\n    return float(density_center / density_total)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the ratio of the total intensity of the bottom half to the top half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half = gray[0:h // 2, :]\n    bottom_half = gray[h // 2:h, :]\n    return float(np.sum(bottom_half) / np.sum(top_half)) if np.sum(top_half) > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels forming sharp edges using a simple gradient\"\n    gradients = np.abs(np.gradient(image.astype(float)))\n    edge_count = np.count_nonzero(gradients > 15)  # Threshold for edge detection\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0] // 2])\n    bottom_half_mean = np.mean(gray[gray.shape[0] // 2:])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the upper quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    upper_quarter = gray[:h//4, :]\n    return float(np.max(upper_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center row of pixels\"\n    h, w = image.shape[:2]\n    center_row = image[h//2, :]\n    return float(np.mean(center_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the right half of the image'\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_quarter = image[h * 3 // 4:, :]\n    return float(np.mean(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of high-intensity pixels to low-intensity pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    high_intensity_count = np.count_nonzero(gray > 200)\n    low_intensity_count = np.count_nonzero(gray < 50)\n    return float(high_intensity_count / (low_intensity_count + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    variance = np.var(center_region)\n    return float(variance)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top row of the image\"\n    h, w = image.shape[:2]\n    top_row = image[0, :]\n    return float(np.mean(top_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity of the bottom row of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray[-1, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Determine the standard deviation of pixel intensities in the left half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_half = gray[:, :gray.shape[1] // 2]\n    return float(np.std(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper right quarter of the image\"\n    h, w = image.shape[:2]\n    upper_right = image[:h//2, w//2:]\n    return float(np.mean(upper_right))\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the average intensity of bright pixels (above 200) to the average intensity of dark pixels (below 50)'\n    bright_threshold = 200\n    dark_threshold = 50\n    bright_pixels = image[image > bright_threshold]\n    dark_pixels = image[image < dark_threshold]\n    \n    mean_bright = np.mean(bright_pixels) if bright_pixels.size > 0 else 1\n    mean_dark = np.mean(dark_pixels) if dark_pixels.size > 0 else 1\n    \n    return float(mean_bright / mean_dark)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n        saturation = np.std(image, axis=2) / (gray + 1e-5)\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to average pixel value\"\n    max_pixel_value = np.max(image)\n    avg_pixel_value = np.mean(image)\n    return float(max_pixel_value / avg_pixel_value) if avg_pixel_value > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between the average intensity of the left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w // 2]\n    right_half = image[:, w // 2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean value of the pixel intensities in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.std(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (less than 50 in intensity)\"\n    total_pixels = image.size\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the overall image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper-left corner of the image\"\n    h, w = image.shape[:2]\n    upper_left_region = image[:h//2, :w//2]\n    return float(np.mean(upper_left_region))\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the upper right corner of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    upper_right_corner = gray[:h//2, w//2:]\n    return float(np.mean(upper_right_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels in the image\"\n    white_threshold = 200\n    return float(np.count_nonzero(image > white_threshold) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right third of the image\"\n    h, w = image.shape[:2]\n    right_third = image[:, 2*w//3:]\n    return float(np.mean(right_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the darkest third of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h*2//3:, w*2//3:]\n    return float(np.mean(dark_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Fraction of total intensity contributed by the green channel\"\n    if len(image.shape) == 3:\n        green_intensity = image[:,:,1]\n        total_intensity = np.sum(image)\n    else:\n        green_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(green_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top right quadrant\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_right_quadrant = gray[:h // 2, w // 2:]\n    return float(np.sum(top_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of edge pixels using gradient\"\n    gradient = np.mean(np.abs(np.gradient(image.astype(float))), axis=0)\n    edge_intensity = gradient[1]  # Using the x-gradient\n    return float(np.mean(edge_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the center region that are bright (greater than 200)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    bright_pixel_count = np.count_nonzero(center_region > 200)\n    total_pixels = center_region.size\n    return float(bright_pixel_count) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity ratio between the top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half = np.mean(gray[:h // 2])\n    bottom_half = np.mean(gray[h // 2:])\n    return float(top_half / (bottom_half + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(right_half.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region that are above a defined threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.count_nonzero(center_region > 128))  # Threshold of 128\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel values\"\n    max_val = np.max(image)\n    min_val = np.min(image)\n    return float(max_val / min_val) if min_val > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the number of non-zero pixels in the bottom half to the total number of non-zero pixels'\n    non_zero_count_bottom = np.count_nonzero(image[image.shape[0]//2:, :])\n    total_non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count_bottom / (total_non_zero_count + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixels to total pixels in the image\"\n    edges = np.sum(np.gradient(image.astype(float)))\n    return float(edges / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels along the vertical center line of the image\"\n    h, w = image.shape[:2]\n    center_line = image[:, w // 2]\n    return float(np.mean(center_line))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with intensity above the mean in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    above_mean_count = np.count_nonzero(gray > mean_intensity)\n    return float(above_mean_count / gray.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities to measure contrast\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.count_nonzero(center_region))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region above a certain intensity threshold\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    threshold_count = np.count_nonzero(center_region > 128)  # Example threshold\n    return float(threshold_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of red channel intensity to total intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        red_intensity = np.mean(image[:,:,0])\n        total_intensity = np.mean(image)\n        return float(red_intensity / (total_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the number of non-zero pixels in the bottom and top halves of the image\"\n    h, w = image.shape[:2]\n    top_half_count = np.count_nonzero(image[:h//2, :])\n    bottom_half_count = np.count_nonzero(image[h//2:, :])\n    return float(bottom_half_count - top_half_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region above a specified intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3 * center_h, center_w:3 * center_w]\n    return float(np.count_nonzero(center_region > 150))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of the pixel intensity distribution in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray**3) - 3 * np.mean(gray) * np.mean(gray**2) + 2 * np.mean(gray)**3) / (np.std(gray)**3 + 1e-9))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = np.prod(image.shape[:2])\n    return float(bright_pixels) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the center region that are below a certain intensity threshold'\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    threshold = 50\n    dark_pixels = np.count_nonzero(center_region < threshold)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels using simple gradient magnitude'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_sum = np.sum(np.sqrt(gradients[0]**2 + gradients[1]**2))\n    total_pixels = gray.size\n    return float(edge_sum) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with very high intensity (greater than 150)\"\n    high_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with intensity greater than 150\"\n    bright_pixel_count = np.count_nonzero(image > 150)\n    return float(bright_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the lower half of the image'\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference between the pixel intensities of adjacent vertical columns\"\n    vertical_diff = np.abs(np.diff(image, axis=1))\n    return float(np.mean(vertical_diff))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Edge response based on the gradient magnitude of the whole image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.sum(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the bottom half of the image that are zero'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.count_nonzero(bottom_half == 0))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity greater than a threshold in the center region\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    threshold = 128\n    return float(np.count_nonzero(center_region > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the center region that are above average intensity\"\n    h, w = image.shape[:2]\n    gray = image if len(image.shape) == 2 else np.mean(image, axis=2)\n    average_intensity = np.mean(gray)\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    above_average_count = np.count_nonzero(center_region > average_intensity)\n    total_count = center_region.size\n    return float(above_average_count / total_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.sum(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom left quadrant of the image'\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:h, :w//2]\n    return float(np.count_nonzero(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the bottom left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left = gray[h//2:, :w//2]\n    return float(np.var(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity found in the image\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between the 1st and 3rd quadrants of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    first_quadrant = gray[:h//2, :w//2]\n    third_quadrant = gray[h//2:, w//2:]\n    return float(np.mean(first_quadrant) - np.mean(third_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-background (non-white) pixels\"\n    non_background_count = np.count_nonzero(image < 255)\n    total_pixels = image.size\n    return float(non_background_count / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the left half of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.count_nonzero(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Gradient magnitude of the mean pixel intensity across channels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(np.sum(np.square(gradients), axis=0))\n    return float(np.mean(magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in a vertical slice down the middle'\n    h, w = image.shape\n    center_slice = image[:, w//2]\n    return float(np.var(center_slice))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are bright (greater than 200) in the whole image\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in pixel intensity between bottom and top halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0] // 2, :]\n    bottom_half = gray[gray.shape[0] // 2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Histogram variance of pixel intensities'\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    histogram_variance = np.var(hist)\n    return float(histogram_variance)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean pixel intensity of the top and bottom halves of the image\"\n    h, _ = image.shape\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of average intensity between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :]\n    bottom_half = image[h//2:h, :]\n    top_mean = np.mean(top_half)\n    bottom_mean = np.mean(bottom_half)\n    return float(top_mean / (bottom_mean + 1e-5))  # Avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean gradient magnitude of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right thirds of the image\"\n    h, w = image.shape[:2]\n    left_third = image[:, :w//3]\n    right_third = image[:, 2*w//3:]\n    return float(np.mean(left_third) - np.mean(right_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of unique pixel values in the image'\n    return float(len(np.unique(image)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity in the bottom-left quadrant of the image'\n    h, w = image.shape[:2]\n    bottom_left = image[h // 2:, :w // 2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel values in the green channel'\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 intensity)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.count_nonzero(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities for pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :]\n    return float(np.sum(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of non-zero pixels in the bottom half of the image\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    bottom_half = gray[h//2:, :]\n    non_zero_count = np.count_nonzero(bottom_half)\n    total_pixels = bottom_half.size\n    return float(non_zero_count / total_pixels * 100)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on a gradient threshold'\n    from scipy.ndimage import gaussian_filter\n    smoothed = gaussian_filter(image, sigma=1)\n    gradient = np.gradient(smoothed)\n    edge_pixels = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    edge_count = np.count_nonzero(edge_pixels > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel values in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    return float(np.count_nonzero(image[:h//2, :]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using a simple edge detection method (e.g., Sobel)\"\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    edge_x = np.abs(np.convolve(image.flatten(), sobel_x.flatten(), mode='same')).reshape(image.shape)\n    return float(np.count_nonzero(edge_x))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels with low intensity (intensity < 30)'\n    return float(np.count_nonzero(image < 30))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 220)\"\n    high_intensity_count = np.count_nonzero(image > 220)\n    return float(high_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean pixel intensities of the left and right quarters of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, 3*w//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation between left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    left_std = np.std(gray[:, :gray.shape[1]//2])\n    right_std = np.std(gray[:, gray.shape[1]//2:])\n    return float(left_std - right_std)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h // 2:, :]\n    non_zero_count = np.count_nonzero(bottom_half)\n    total_pixels = bottom_half.size\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 250)\"\n    high_intensity_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean intensity difference between the left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the average intensity of the top quarter to the bottom quarter'\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4, :]\n    bottom_quarter = image[3*h//4:, :]\n    return float(np.mean(top_quarter) / (np.mean(bottom_quarter) + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensities between top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    bottom_half = image[h//2:]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity above 230)\"\n    bright_pixel_count = np.count_nonzero(image > 230)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of edge pixels to total pixels in the image'\n    edge_region = np.concatenate((image[0, :], image[-1, :], image[:, 0], image[:, -1]))\n    edge_count = np.count_nonzero(edge_region)\n    total_count = image.size\n    return float(edge_count / total_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of dark pixels (below a certain threshold) in the whole image'\n    threshold = 50\n    dark_pixels_count = np.count_nonzero(image < threshold)\n    return float(dark_pixels_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of edges detected using gradient magnitude\"\n    gx, gy = np.gradient(image.astype(float))\n    magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.count_nonzero(magnitude > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across all channels\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    non_zero_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected using gradient in the image\"\n    gradients = np.gradient(image.astype(float))\n    edge_strength = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    edge_count = np.count_nonzero(edge_strength)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the top quadrant compared to the total pixels\"\n    h, w = image.shape[:2]\n    top_quadrant = image[:h//2, :]\n    total_pixels = h * w\n    top_pixels = np.count_nonzero(top_quadrant)\n    return float(top_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct intensity levels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    unique_levels = len(np.unique(gray))\n    return float(unique_levels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum and minimum pixel values in the image\"\n    return float((np.max(image) + np.min(image)) / 2)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top quarter of the image that are not zero\"\n    h, w = image.shape\n    top_quarter = image[:h//4, :]\n    return float(np.count_nonzero(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of bright to dark pixels in the image'\n    bright_pixels = np.count_nonzero(image > 200)\n    dark_pixels = np.count_nonzero(image < 50)\n    ratio = bright_pixels / (dark_pixels + 1e-6)  # avoid division by zero\n    return float(ratio)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the edges of the image'\n    edges = np.concatenate([image[:, -1], image[-1, :], image[:, 0], image[0, :]])\n    return float(np.var(edges))\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels with intensity below 30'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    low_intensity_count = np.count_nonzero(gray < 30)\n    return float(low_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    brightest_region = image[np.where(image > np.percentile(image, 75))]\n    return float(np.mean(brightest_region)) if brightest_region.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of the left half pixel intensity compared to the right half'\n    h, w = image.shape\n    left_half = np.sum(image[:, :w//2])\n    right_half = np.sum(image[:, w//2:])\n    return float(left_half / (right_half + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge density calculated using a simple gradient method\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray)[0]**2 + np.gradient(gray)[1]**2)\n    return float(np.count_nonzero(gradient_magnitude) / gradient_magnitude.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w//2:]\n    return float(np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel intensity distribution in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256)\n    hist = hist / np.sum(hist)  # Normalize histogram\n    return float(np.sum((hist - np.mean(hist)) ** 3) / (np.std(hist) ** 3 + 1e-8))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the left half of the image\"\n    h, w = image.shape\n    left_half = image[:, :w//2]\n    return float(np.sum(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixel values in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are primarily red (greater than 150 in red channel)\"\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a threshold in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[image.shape[0]//4:3*image.shape[0]//4, image.shape[1]//4:3*image.shape[1]//4]\n    return float(np.count_nonzero(center_region > 128))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_region = gray[gray.shape[0] // 4: 3 * gray.shape[0] // 4, gray.shape[1] // 4: 3 * gray.shape[1] // 4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right quarters of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, w*3//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of the pixel values in the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_quadrant = image[h//2:, w//2:]\n    return float(np.sum(bottom_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Entropy of the pixel intensity distribution in the image'\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-6  # Prevent log(0)\n    entropy = -np.sum(histogram * np.log(histogram))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the variance of pixel intensities in a 40x40 center region\"\n    h, w = image.shape\n    center_region = image[h//2-20:h//2+20, w//2-20:w//2+20]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the center region (intensity > 240)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    bright_pixel_count = np.count_nonzero(center_region > 240)\n    total_pixels = center_region.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half_std = np.std(image[:h//2])\n    bottom_half_std = np.std(image[h//2:])\n    return float(bottom_half_std - top_half_std)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Presence of edges in the image based on standard deviation\"\n    edge_detection = np.std(np.gradient(image)[0]) + np.std(np.gradient(image)[1])\n    return float(edge_detection)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count the number of edge pixels in the image using the Sobel filter'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1,0,-1],[2,0,-2],[1,0,-1]])\n    sobel_y = np.array([[1,2,1],[0,0,0],[-1,-2,-1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same'))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same'))\n    edge_count = np.count_nonzero(edges_x + edges_y > 0)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than 220) in the image\"\n    bright_pixel_count = np.count_nonzero(image > 220)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels\"\n    non_black_pixel_count = np.count_nonzero(image > 0)\n    total_pixels = image.size\n    return float(non_black_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of edge pixels detected by simple gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_pixels = np.where(np.sqrt(gradients[0]**2 + gradients[1]**2) > 15, gray, 0)\n    return float(np.mean(edge_pixels[edge_pixels > 0])) \n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the top-left corner of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of red channel intensity to green channel intensity'\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        red_intensity = np.mean(image[:,:,0])\n        green_intensity = np.mean(image[:,:,1])\n        return float(red_intensity / (green_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of dark pixels to total pixels in the image'\n    total_pixels = image.size\n    dark_pixels = np.count_nonzero(image < 50)  # Assume dark is near 0\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between the number of pixels in the top half and bottom half'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half_count = np.count_nonzero(gray[:h//2, :])\n    bottom_half_count = np.count_nonzero(gray[h//2:, :])\n    return float(top_half_count - bottom_half_count)\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of the pixel intensity distribution in the image'\n    intensities = image.flatten()\n    mean_intensity = np.mean(intensities)\n    std_intensity = np.std(intensities)\n    skewness = np.mean(((intensities - mean_intensity) / std_intensity) ** 3)\n    return float(skewness)\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the edges of the image'\n    h, w = image.shape[:2]\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.concatenate((gray[0, :], gray[-1, :], gray[:, 0], gray[:, -1]))\n    return float(np.mean(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean intensity between left and right halves'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of the standard deviation to the mean pixel intensity in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean_intensity = np.mean(gray)\n    std_dev = np.std(gray)\n    return float(std_dev / (mean_intensity + 1e-10))  # Avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Histogram peak prominence measured in the pixel intensity histogram'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256)\n    peaks = np.where((hist[1:-1] > hist[:-2]) & (hist[1:-1] > hist[2:]))[0] + 1\n    if len(peaks) < 2:\n        return 0.0\n    prominence = np.max(hist[peaks]) - np.mean(hist)\n    return float(prominence)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total sum of pixel values in the bottom quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_quarter = gray[h*3//4:, :]\n    return float(np.sum(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top left quadrant of the image\"\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h // 2, :w // 2]\n    return float(np.count_nonzero(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom-left quadrant of the image'\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.count_nonzero(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Determine the standard deviation of pixel intensities in the upper half of the image.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_half = gray[:gray.shape[0] // 2, :]\n    return float(np.std(upper_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels based on gradient magnitude in the image\"\n    gradient_x, gradient_y = np.gradient(image)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_count = np.count_nonzero(gradient_magnitude > 30)  # Adjustable threshold\n    return float(edge_count)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.min(right_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels in the center region using gradient'\n    if len(image.shape) == 2:\n        h, w = image.shape\n    else:\n        h, w, _ = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    gradients = np.gradient(center_region.astype(float))\n    edge_count = np.count_nonzero(gradients[0]**2 + gradients[1]**2 > 100)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the top half of the image'\n    h, w = image.shape[:2]\n    top_half = image[0:h//2, :]\n    return float(np.count_nonzero(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.max(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixel values above the 75th percentile\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 75)\n    return float(np.mean(gray[gray > threshold]))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixel intensities that are above a threshold.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 128\n    return float(np.count_nonzero(gray > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(image.var())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel (RGB only)\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in pixel count between the left and right halves of the image\"\n    h, w = image.shape\n    left_half_count = np.count_nonzero(image[:, :w//2])\n    right_half_count = np.count_nonzero(image[:, w//2:])\n    return float(left_half_count - right_half_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 150)\"\n    high_intensity_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h // 2:, :]\n    non_zero_count = np.count_nonzero(bottom_half)\n    return float(non_zero_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average intensity of non-zero pixels in the entire image'\n    non_zero_pixels = image[image > 0]\n    if non_zero_pixels.size == 0:\n        return 0.0\n    return float(np.mean(non_zero_pixels))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity in the top half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0] // 2]\n    return float(np.max(top_half) - np.min(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200 intensity) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top half of the image\"\n    top_half = image[:image.shape[0]//2, :]\n    return float(np.count_nonzero(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of the pixel intensity in the center region of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Fraction of the image that is darker than the average intensity\"\n    avg_intensity = np.mean(image)\n    return float(np.count_nonzero(image < avg_intensity) / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_left = gray[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between the average intensity of the top half and the bottom half of the image'\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[:h // 2, :])\n    bottom_half_mean = np.mean(image[h // 2:, :])\n    return float(bottom_half_mean - top_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.max(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure the sum of pixel intensities in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0] // 2:, :]\n    return float(np.sum(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average intensity of the leftmost quarter of the image'\n    h, w = image.shape[:2]\n    left_region = image[:, 0:w//4]\n    return float(np.mean(left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the lower left quarter of the image\"\n    h, w = image.shape[:2]\n    lower_left_quarter = image[h//2:, :w//2]\n    return float(np.mean(lower_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average difference between red and green channel intensities\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold (e.g., 200)\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    p = hist / np.sum(hist + 1e-6)  # Avoid division by zero\n    return -np.sum(p * np.log2(p + 1e-6))  # Avoid log(0)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the image\"\n    return float(image.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of vertical edges in the image using a simple Sobel filter'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_filter = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\n    edges = np.abs(np.convolve(gray.flatten(), sobel_filter.flatten(), 'same')).reshape(gray.shape)\n    return float(np.count_nonzero(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are above a certain intensity threshold\"\n    threshold = 128\n    return float(np.sum(image > threshold) / np.size(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left_quadrant = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right upper corner\"\n    h, w = image.shape[:2]\n    right_upper_corner = image[:h//2, w//2:]\n    return float(np.mean(right_upper_corner))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of corners detected using a simple corner detection method.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    corners = np.count_nonzero(np.gradient(np.gradient(gray)))\n    return float(corners)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    hist, _ = np.histogram(image, bins=256, range=(0, 255), density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log2(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_left_quadrant = gray[:h//2, :w//2]\n    return float(np.count_nonzero(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the color channels\"\n    if len(image.shape) == 3:\n        hist_r, _ = np.histogram(image[:,:,0], bins=256, density=True)\n        hist_g, _ = np.histogram(image[:,:,1], bins=256, density=True)\n        hist_b, _ = np.histogram(image[:,:,2], bins=256, density=True)\n        hist_r += 1e-6\n        hist_g += 1e-6\n        hist_b += 1e-6\n        entropy = -np.sum(hist_r * np.log(hist_r)) - np.sum(hist_g * np.log(hist_g)) - np.sum(hist_b * np.log(hist_b))\n        return float(entropy)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity of the red channel minus blue channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]) - np.max(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the number of connected components in the image\"\n    from scipy.ndimage import label\n    labeled_array, num_features = label(image > 0)\n    return float(num_features)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of horizontal edges detected in the image'\n    gradient_x, gradient_y = np.gradient(image)\n    edges_count = np.count_nonzero(np.abs(gradient_y) > 10)  # edge detection threshold\n    return float(edges_count)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the upper left quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_left_quarter = gray[:gray.shape[0]//2, :gray.shape[1]//2]\n    return float(np.var(upper_left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are saturated (intensity > 240)\"\n    saturated_pixel_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(saturated_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the difference in mean intensity between the upper and lower halves\"\n    h, w = image.shape[:2]\n    upper_half = image[:h//2]\n    lower_half = image[h//2:]\n    return float(np.mean(upper_half) - np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of low-intensity pixels (less than 30)\"\n    low_intensity_count = np.count_nonzero(image < 30)\n    return float(low_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_quarter = gray[:h//4, :]\n    return float(np.std(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the center region with intensity above a certain threshold'\n    h, w = image.shape\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region > 128))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram variance in pixel intensity for the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    hist, _ = np.histogram(gray.flatten(), bins=256)\n    return float(np.var(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.sum(left_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of corners detected in the image using a simple corner detection algorithm.\"\n    from scipy.ndimage import gaussian_filter, maximum_filter\n    image_smoothed = gaussian_filter(image, sigma=1)\n    corners = maximum_filter(image_smoothed, size=3, mode='constant')\n    return float(np.count_nonzero(corners))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct pixel values in the image\"\n    unique_values = len(np.unique(image))\n    return float(unique_values)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Spectral entropy of pixel intensities'\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-10  # Avoid division by zero\n    entropy = -np.sum(histogram * np.log(histogram))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image that are below the average intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    average_intensity = np.mean(gray)\n    below_average = np.count_nonzero(gray < average_intensity)\n    total_pixels = gray.size\n    return float(below_average / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float((np.mean(gray) - np.median(gray)) / np.std(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (below a threshold) to total pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 50\n    dark_pixels = np.count_nonzero(gray < threshold)\n    total_pixels = gray.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution, indicating asymmetry\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    std_dev = np.std(gray)\n    skewness = ((1/gray.size) * np.sum(((gray - mean) / std_dev) ** 3))\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels below a certain threshold in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h // 2:, :]\n    threshold = 50\n    return float(np.count_nonzero(bottom_half < threshold) / (bottom_half.size + 1e-10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean of the pixel intensities in the top left quadrant of the image'\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h // 2, :w // 2]\n    return float(np.mean(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of vertical edges detected using gradient in the image'\n    gradient_x = np.gradient(image, axis=1)\n    return float(np.count_nonzero(gradient_x))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel value in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the upper quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    return float(np.mean(upper_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Shape of the histogram of pixel values in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray.flatten(), bins=10)\n    return float(np.var(histogram))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are very dark (intensity < 30) in the center region'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    center_h, center_w = gray.shape[0] // 4, gray.shape[1] // 4\n    center_region = gray[center_h:3*center_h, center_w:3*center_w]\n    dark_pixels = np.count_nonzero(center_region < 30)\n    return float(dark_pixels / center_region.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (less than 50) in the image\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of vertical edges detected in the image'\n    gradient = np.gradient(image.astype(float), axis=1)\n    return float(np.count_nonzero(gradient))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the histogram of the image and return the maximum frequency\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    return float(histogram.max())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of zero pixel intensities in the image\"\n    zero_count = np.count_nonzero(image == 0)\n    return float(zero_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to total intensity\"\n    if len(image.shape) == 3:\n        blue_intensity = image[:,:,2]\n        total_intensity = np.sum(image)\n    else:\n        blue_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(blue_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom right quadrant of the image'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    bottom_right_region = gray[h//2:, w//2:]\n    return float(np.count_nonzero(bottom_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the center region relative to the whole image\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.count_nonzero(center_region) / image.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the pixel intensity variance in the top half compared to the bottom half\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mid = gray.shape[0] // 2\n    top_half_var = np.var(gray[:mid])\n    bottom_half_var = np.var(gray[mid:])\n    return float(top_half_var - bottom_half_var)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the corner region'\n    h, w = image.shape\n    corner_region = image[0:h//4, 0:w//4]\n    return float(np.std(corner_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of edge pixels detected using a simple thresholding method'\n    threshold = 128\n    edge_pixels = np.sum(image > threshold)\n    total_pixels = image.size\n    return float(edge_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient of pixel intensities along the horizontal axis\"\n    gradient = np.gradient(image, axis=1)\n    return float(np.mean(np.abs(gradient)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the number of edges detected in the image using Sobel operator\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same'))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same'))\n    edges = np.sqrt(edges_x**2 + edges_y**2)\n    return float(np.count_nonzero(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean absolute deviation of pixel intensities from the mean intensity'\n    mean_intensity = np.mean(image)\n    mad = np.mean(np.abs(image - mean_intensity))\n    return float(mad)\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels in the center region compared to total pixels'\n    h, w = image.shape[:2]\n    center_region_size = (h // 2) * (w // 2)\n    total_pixels = image.size\n    return float(center_region_size / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_quarter = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity in the right half of the image'\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:w]\n    return float(np.max(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the bottom half to the total non-zero pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_half = gray[h//2:, :]\n    total_non_zero = np.count_nonzero(gray)\n    bottom_non_zero = np.count_nonzero(bottom_half)\n    return float(bottom_non_zero / (total_non_zero + 1e-5))  # Prevent division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the red channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of pixel intensities in the center region to the total image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    center_mean = np.mean(center_region)\n    total_mean = np.mean(image)\n    return float(center_mean / total_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of average pixel intensities between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[:h//2])\n    bottom_half_mean = np.mean(image[h//2:])\n    return float(top_half_mean / (bottom_half_mean + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the area of the lightest region to the darkest region\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    lightest_region = np.percentile(gray.flatten(), 90)\n    darkest_region = np.percentile(gray.flatten(), 10)\n    return float(lightest_region / (darkest_region + 1e-10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are mid-range (between 100 and 150 in intensity)\"\n    total_pixels = image.size\n    mid_range_pixel_count = np.count_nonzero((image >= 100) & (image <= 150))\n    return float(mid_range_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels detected using a simple Sobel filter\"\n    from scipy.ndimage import sobel\n    sobel_x = sobel(image, axis=0)\n    sobel_y = sobel(image, axis=1)\n    edge_magnitude = np.sqrt(sobel_x**2 + sobel_y**2)\n    edge_count = np.count_nonzero(edge_magnitude > 1)  # A threshold to define edges\n    return float(edge_count)\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean pixel intensity between the top half and the bottom half'\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[:h // 2, :])\n    bottom_half_mean = np.mean(image[h // 2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Number of unique pixel intensities in the image'\n    unique_intensities = np.unique(image)\n    return float(len(unique_intensities))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the blue channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels found using gradient magnitude\"\n    gradient_x, gradient_y = np.gradient(image)\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edge_magnitude > 0.1))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels (greater than 200) to total pixels\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensity in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge count based on absolute pixel intensity gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.linalg.norm(np.gradient(gray), axis=0)\n    edge_count = np.count_nonzero(gradient_magnitude)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return float(np.max(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of all pixel values in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h//2, :w//2]\n    return float(np.sum(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (greater than 200 in all channels)\"\n    white_pixel_count = np.count_nonzero(np.all(image > 200, axis=2)) if len(image.shape) == 3 else 0\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with an intensity greater than 200 in the entire image\"\n    return float(np.sum(image > 200)) / image.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the central region\"\n    h, w = image.shape\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.count_nonzero(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    mean_diff = np.mean(left_half) - np.mean(right_half)\n    return float(mean_diff)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper left corner\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean gradient magnitude as a measure of edge intensity'\n    gradient_x = np.gradient(image, axis=0)\n    gradient_y = np.gradient(image, axis=1)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edges detected in the image using gradient magnitude'\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(gradient_magnitude > 20))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Entropy of the image intensity distribution'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    histogram, _ = np.histogram(gray.flatten(), bins=256, range=(0, 256))\n    histogram = histogram[histogram > 0]  # Avoid log(0)\n    probabilities = histogram / np.sum(histogram)\n    entropy = -np.sum(probabilities * np.log(probabilities))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are primarily red (greater than 150 in red channel)'\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    return float(np.var(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensities for the grayscale version\"\n    gray = np.mean(image, axis=2) if len(image.shape) == 3 else image\n    return float(np.var(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the upper half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    upper_half = gray[:h // 2, :]\n    return float(np.mean(upper_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(center_region.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities'\n    return float(image.std())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the average pixel intensity of the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half_avg = np.mean(image[:h//2, :])\n    bottom_half_avg = np.mean(image[h//2:, :])\n    return float(top_half_avg - bottom_half_avg)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels (RGB only)\"\n    if len(image.shape) == 3:\n        mean_red = np.mean(image[:,:,0])\n        mean_blue = np.mean(image[:,:,2])\n        return float(mean_red - mean_blue)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of edge pixels to total pixels in the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(np.sqrt(edges[0]**2 + edges[1]**2))  # Magnitude of the gradient\n    total_pixels = gray.size\n    return float(edge_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-left quarter\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.sum(lower_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels with very high intensity (greater than 220)'\n    high_intensity_count = np.count_nonzero(image > 220)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center-left and center-right regions combined\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    height, width = gray.shape\n    center_left = gray[height // 4:3 * height // 4, width // 8:width // 2]\n    center_right = gray[height // 4:3 * height // 4, width // 2:7 * width // 8]\n    count = np.count_nonzero(center_left) + np.count_nonzero(center_right)\n    return float(count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_quadrant = image[:h//2, w//2:]\n    return float(np.sum(top_right_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of edge pixels to total pixels in the image using simple gradient'\n    gradient = np.gradient(image.astype(float))\n    edges = np.sqrt(gradient[0]**2 + gradient[1]**2)\n    edge_count = np.count_nonzero(edges)\n    return float(edge_count / image.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity near the maximum (over 250)\"\n    max_intensity_count = np.count_nonzero(image > 250)\n    return float(max_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge density calculated as a ratio of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(edges[0] != 0) + np.count_nonzero(edges[1] != 0)\n    total_pixels = gray.size\n    return float(edge_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the diagonal pixels from top-left to bottom-right\"\n    h, w = image.shape\n    diagonal_intensity = np.mean([image[i, i] for i in range(min(h, w))])\n    return float(diagonal_intensity)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between the vertical thirds\"\n    h, w = image.shape[:2]\n    left_third = np.mean(image[:, :w//3])\n    middle_third = np.mean(image[:, w//3:2*w//3])\n    right_third = np.mean(image[:, 2*w//3:])\n    return float(left_third - right_third)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.count_nonzero(top_right))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in variance of the pixel intensities between the right and left halves\"\n    h, w = image.shape\n    left_half_var = np.var(image[:, :w//2])\n    right_half_var = np.var(image[:, w//2:])\n    return float(right_half_var - left_half_var)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the histogram peaks in the image\"\n    histogram, _ = np.histogram(image.flatten(), bins=256)\n    peak1 = np.max(histogram)\n    histogram[histogram == peak1] = 0  # Remove first peak\n    peak2 = np.max(histogram)\n    return float(peak1 / (peak2 + 1e-7))  # Prevent division by zero\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top left quadrant that exceed a certain threshold\"\n    threshold = 128\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    count = np.count_nonzero(top_left > threshold)\n    return float(count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the difference in average intensities between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, 0:w//2]\n    right_half = image[:, w//2:w]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in average pixel intensity between the left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of high-intensity pixels (intensity greater than 150)\"\n    high_intensity_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Normalized variance of pixel intensities in the image\"\n    variance = np.var(image)\n    mean = np.mean(image)\n    return float(variance / (mean + 1e-6))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels detected using gradient\"\n    gradient_x, gradient_y = np.gradient(image)\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_pixels = np.count_nonzero(edges > 50)\n    return float(edge_pixels) / image.size if image.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels (intensity 255) in the entire image\"\n    return float(np.count_nonzero(image == 255)) / image.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are primarily green (greater than 150 in green channel)'\n    if len(image.shape) == 3:\n        green_pixel_count = np.count_nonzero(image[:,:,1] > 150)\n        total_pixels = image.size\n        return float(green_pixel_count) / total_pixels\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of the gradients on the horizontal axis\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    return float(np.sum(np.abs(gx)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of mean intensity in the right half to the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    left_mean = np.mean(left_half)\n    right_mean = np.mean(right_half)\n    return float(right_mean / (left_mean + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the ratio of non-zero pixels to total pixels in a designated area.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    area = gray[gray.shape[0] // 4:3 * gray.shape[0] // 4, gray.shape[1] // 4:3 * gray.shape[1] // 4]\n    non_zero_count = np.count_nonzero(area)\n    total_count = area.size\n    return float(non_zero_count / total_count) if total_count > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top quarter of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4, :]\n    return float(np.mean(top_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Ratio of dark pixels (intensity < 100) to total pixels'\n    threshold = 100\n    dark_pixel_count = np.count_nonzero(image < threshold)\n    total_pixel_count = image.size\n    return float(dark_pixel_count / total_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixel values in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the mean intensity of the top and bottom halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half_mean = np.mean(gray[:gray.shape[0]//2, :])\n    bottom_half_mean = np.mean(gray[gray.shape[0]//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average intensity of the darkest quarter of the image'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    dark_region = gray[3*h//4:, 3*w//4:]\n    return float(np.mean(dark_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between maximum and minimum intensity in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region) - np.min(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top half with intensity above a threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    top_half = gray[:gray.shape[0]//2]\n    return float(np.count_nonzero(top_half > 128))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Edge detection using gradient magnitude of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray)[0]**2 + np.gradient(gray)[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left half of the image.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half_mean = np.mean(gray[:, :w//2])\n    return float(left_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely white (255) across all channels\"\n    if len(image.shape) == 3:\n        white_pixel_count = np.count_nonzero(np.all(image == 255, axis=2))\n    else:\n        white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels in the image using Sobel operator.\"\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    edge_pixels = np.abs(np.convolve(image.flatten(), sobel_x.flatten(), mode='same')).reshape(image.shape)\n    return float(np.count_nonzero(edge_pixels))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2).astype(np.float32)\n    else:\n        gray = image.astype(np.float32)\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.count_nonzero(gradient_magnitude > 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute deviation of pixel intensities from mean\"\n    mean_intensity = image.mean()\n    return float(np.mean(np.abs(image - mean_intensity)))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel difference between red and blue\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely black (value 0)\"\n    black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of white pixels (max intensity) in the entire image'\n    total_pixels = np.prod(image.shape)\n    white_pixels = np.count_nonzero(image == 255)\n    return float(white_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in the number of non-zero pixels between top and bottom halves\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half_count = np.count_nonzero(gray[0:h//2, :])\n    bottom_half_count = np.count_nonzero(gray[h//2:h, :])\n    return float(top_half_count - bottom_half_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray.astype(float), axis=1)\n    grad_y = np.gradient(gray.astype(float), axis=0)\n    edge_count = np.count_nonzero(np.sqrt(grad_x**2 + grad_y**2) > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Quantifies color balance: absolute difference between red and blue channel means\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(np.abs(red_mean - blue_mean))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image normalized by the maximum pixel value\"\n    return float(np.mean(image) / 255.0)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Number of edges detected using the gradient method in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    edges = np.sqrt(gx**2 + gy**2)\n    return float(np.count_nonzero(edges > edges.mean()))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels based on gradient magnitude\"\n    gradient_x, gradient_y = np.gradient(image)\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edge_magnitude > np.mean(edge_magnitude)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to red channel intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        blue_intensity = np.mean(image[:,:,2])\n        red_intensity = np.mean(image[:,:,0])\n        return float(blue_intensity / (red_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are part of the darker 30% intensity range\"\n    dark_threshold = np.percentile(image, 30)\n    dark_pixel_count = np.count_nonzero(image < dark_threshold)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the image based on pixel intensity distribution\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    hist = hist[hist > 0]  # Avoid log(0)\n    return float(-np.sum(hist * np.log(hist)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold in the top third of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_third = gray[:h//3, :]\n    threshold = 128  # Threshold for grayscale\n    return float(np.count_nonzero(top_third > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are above the average intensity\"\n    mean_intensity = np.mean(image)\n    above_average_count = np.count_nonzero(image > mean_intensity)\n    total_pixels = image.size\n    return float(above_average_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h//4:h//2, w//4:w//2] if len(image.shape) == 2 else image[h//4:h//2, w//4:w//2, :]\n    return float(np.mean(dark_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom right quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the center region's average intensity to the overall average intensity\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    center_mean = np.mean(center_region)\n    overall_mean = np.mean(image)\n    return float(center_mean / overall_mean) if overall_mean != 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels in RGB images\"\n    if len(image.shape) == 3:\n        color_diff = image[:,:,0] - image[:,:,2]\n        return float(np.mean(color_diff))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper left quarter of the image\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top left quadrant of the image\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    top_left_quadrant = gray[:h//2, :w//2]\n    return float(np.mean(top_left_quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the edge region (border pixels)'\n    h, w = image.shape[:2]\n    edges = np.concatenate((image[0, :], image[:, 0], image[h-1, :], image[:, w-1]))\n    return float(np.mean(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        color_diff = image[:,:,0] - image[:,:,2]\n    else:\n        color_diff = image  # Treat grayscale as no color difference\n    return float(np.mean(color_diff))\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels using a simple Sobel filter'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    edges = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same'))\n    edge_pixel_count = np.count_nonzero(edges)\n    return float(edge_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color channel ratio of red to green\"\n    if len(image.shape) == 3:\n        ratio = np.mean(image[:,:,0]) / (np.mean(image[:,:,1]) + 1e-6)\n        return float(ratio)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the sum of pixel values in the center region to the total pixel sum\"\n    h, w = image.shape[:2]\n    total_sum = np.sum(image)\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    center_sum = np.sum(center_region)\n    return float(center_sum / total_sum) if total_sum > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge density calculated as the ratio of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray.astype(float))\n    edge_pixels = np.count_nonzero(np.abs(edges[0]) + np.abs(edges[1]) > np.percentile(np.abs(edges), 75))\n    return float(edge_pixels / np.prod(gray.shape))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_region = image[:h//2, :w//2]\n    return float(np.mean(top_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel intensities in the image\"\n    unique_intensities = np.unique(image)\n    return float(len(unique_intensities))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_pixel_count = len(np.unique(image))\n    return float(unique_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean brightness of the left half of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of the distinct pixel values in the image'\n    unique_values = np.unique(image)\n    return float(len(unique_values))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"The ratio of the number of extreme dark pixels (value < 30) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 30)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of medium intensity pixels (between 100 and 150) across the whole image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    medium_intensity_count = np.count_nonzero((gray >= 100) & (gray <= 150))\n    return float(medium_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of the image that is predominantly dark (below a threshold)\"\n    threshold = 50\n    dark_pixels = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensities in the bottom left quadrant\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    if bottom_left.size > 0:\n        return float((np.mean(bottom_left) - np.median(bottom_left)) / np.std(bottom_left) if np.std(bottom_left) > 0 else 0.0)\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to minimum pixel value in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4: 3 * h // 4, w // 4: 3 * w // 4]\n    max_val = np.max(center_region)\n    min_val = np.min(center_region) if np.min(center_region) > 0 else 1  # Avoid division by zero\n    return float(max_val / min_val)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the rightmost column\"\n    h, w = image.shape[:2]\n    rightmost_column = image[:, w-1]\n    return float(np.mean(rightmost_column))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the ratio of the number of high-contrast edges to the total pixel count\"\n    gradients = np.gradient(image)\n    edge_detection = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    high_contrast_edges = np.count_nonzero(edge_detection > np.mean(edge_detection))\n    return float(high_contrast_edges) / image.size\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity in the mid-range (between 100 and 150)\"\n    mid_range_count = np.count_nonzero((image >= 100) & (image <= 150))\n    return float(mid_range_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the center region of the image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Gradient magnitude of the image intensity to capture edges'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels with high intensity (greater than 200)'\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity across all channels'\n    return float(image.mean())\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between mean intensity of the upper half and the lower half of the image\"\n    h, w = image.shape[:2]\n    upper_half_mean = np.mean(image[:h//2])\n    lower_half_mean = np.mean(image[h//2:])\n    return float(upper_half_mean - lower_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the brightest channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain threshold in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_quadrant = image[:h//2, w//2:]\n    threshold = 128\n    return float(np.count_nonzero(top_right_quadrant > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are very bright (greater than 200 intensity)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    right_half = gray[:, w // 2:]\n    return float(np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference between mean pixel intensity of the leftmost and rightmost quarters'\n    h, w = image.shape\n    left_quarter = image[:, :w//2]\n    right_quarter = image[:, w//2:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the maximum pixel intensity in the top right quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_right = gray[:h//2, w//2:]\n    return float(np.max(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of vertical edges using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    edge_count = np.count_nonzero(np.abs(gradient_x) > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    return float(black_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Median intensity across all channels\"\n    return float(np.median(image)) if len(image.shape) == 3 else float(np.median(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest pixel in the image\"\n    return float(np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel intensity\"\n    return float(image.max() / (image.min() + 1e-5))  # Adding small epsilon to avoid division by zero\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower left corner of the image\"\n    h, w = image.shape[:2]\n    lower_left = image[h//2:, :w//2]\n    return float(np.mean(lower_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the right half of the image\"\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    right_half = gray[:, w//2:]\n    return float(np.sum(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels based on gradient magnitude in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient = np.sqrt(np.square(np.gradient(gray, axis=0)) + np.square(np.gradient(gray, axis=1)))\n    return float(np.count_nonzero(gradient > np.mean(gradient)) / gradient.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity difference between the left and right halves of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    left_half = gray[:, :w//2]\n    right_half = gray[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels with intensity greater than 180 across all channels'\n    if len(image.shape) == 3:\n        bright_pixel_count = np.count_nonzero(np.all(image > 180, axis=2))\n    else:\n        bright_pixel_count = np.count_nonzero(image > 180)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.mean(top_right))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the upper quarter of the image'\n    h, w = image.shape[:2]\n    upper_quarter = image[0:h//4, :]\n    return float(np.count_nonzero(upper_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the green channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the variance in pixel intensities across the vertical midline of the image.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mid_col = gray.shape[1] // 2\n    left_half = gray[:, :mid_col]\n    right_half = gray[:, mid_col:]\n    return float(np.var(left_half) - np.var(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean pixel intensity between the top and bottom halves\"\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n    else:\n        h, w = image.shape\n    top_half_mean = np.mean(image[:h//2, :])\n    bottom_half_mean = np.mean(image[h//2:, :])\n    return float(top_half_mean - bottom_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of distinct intensity levels in the image\"\n    unique_levels = np.unique(image)\n    return float(len(unique_levels))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper-left quadrant of the image\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity values in the bottom half of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    bottom_half = gray[gray.shape[0] // 2:, :]\n    low_intensity_count = np.count_nonzero(bottom_half < 30)\n    return float(low_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above the 75th percentile\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = np.percentile(gray, 75)\n    return float(np.count_nonzero(gray > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top half of the image that are above the average intensity\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    avg_intensity = np.mean(top_half)\n    return float(np.count_nonzero(top_half > avg_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total number of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Total count of pixels that are at or above a specific intensity threshold\"\n    threshold = 128\n    return float(np.count_nonzero(image >= threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are darker than the average pixel value\"\n    average_intensity = image.mean()\n    dark_pixels = np.count_nonzero(image < average_intensity)\n    total_pixels = image.size\n    return float(dark_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference between the red and blue channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        mean_red = np.mean(image[:,:,0])\n        mean_blue = np.mean(image[:,:,2])\n        return float(abs(mean_red - mean_blue))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are of low intensity in the blue channel (less than 50)'\n    if len(image.shape) == 3:\n        low_blue_count = np.count_nonzero(image[:,:,2] < 50)\n        total_pixels = image.size\n        return float(low_blue_count) / total_pixels\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of total pixels that are white (greater than 250 intensity)\"\n    white_pixel_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image scaled by height and width\"\n    h, w = image.shape[:2]\n    return float(np.mean(image)) * (h * w)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white (255)\"\n    white_pixels = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixels) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and green channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        return float(np.mean(image[:, :, 0]) - np.mean(image[:, :, 1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the top left quadrant of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h // 2, :w // 2]\n    return float(np.mean(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top left quadrant of the image\"\n    h, w = image.shape[:2]\n    top_left = image[0:h//2, 0:w//2]\n    return float(np.count_nonzero(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the grayscale image converted from RGB\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between top and bottom halves of the image.\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    top_half = gray[:h//2, :]\n    bottom_half = gray[h//2:, :]\n    return float(np.mean(bottom_half) - np.mean(top_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values across all channels\"\n    return float(np.std(image)) if len(image.shape) == 3 else float(np.std(image.flatten()))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the central region relative to the total image mean\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    return float(np.mean(center_region) / np.mean(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.count_nonzero(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half_mean = np.mean(image[:h//2])\n    bottom_half_mean = np.mean(image[h//2:])\n    return float(bottom_half_mean - top_half_mean)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:h, :]\n    return float(np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Edge pixel ratio in the image calculated using gradient magnitudes\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x, grad_y = np.gradient(gray)\n    edge_magnitude = np.sqrt(grad_x**2 + grad_y**2)\n    edge_pixel_count = np.count_nonzero(edge_magnitude > 10)\n    return float(edge_pixel_count / gray.size)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a certain threshold in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    threshold = 128\n    return float(np.count_nonzero(center_region > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference of means between the left half and the right half of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, 0:w//2]\n    right_half = image[:, w//2:w]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the count of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean of the pixel intensities in the upper quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    upper_quarter = gray[:gray.shape[0]//4, :]\n    return float(np.mean(upper_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of the edges in the image using gradient magnitude\"\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_count = np.count_nonzero(edges > 20)\n    total_pixels = image.size\n    return float(edge_count) / total_pixels\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels that are below the mean intensity of the image\"\n    mean_intensity = np.mean(image)\n    below_mean = image[image < mean_intensity]\n    return float(np.mean(below_mean)) if below_mean.size > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the top left quadrant'\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.std(top_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Gradient magnitude of the image, as a measure of edge strength'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution in the image\"\n    hist, _ = np.histogram(image.flatten(), bins=256, density=True)\n    bin_centers = np.arange(256)\n    mean = np.mean(bin_centers * hist)\n    std_dev = np.std(bin_centers * hist)\n    skewness = np.sum(((bin_centers - mean) ** 3) * hist) / (std_dev ** 3 + 1e-5)\n    return float(skewness)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image that are above a certain intensity threshold\"\n    threshold = 128\n    total_pixels = np.prod(image.shape[:2])\n    above_threshold = np.count_nonzero(image > threshold)\n    return float(above_threshold / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of pixel intensities across vertical axis.\"\n    grad_x = np.gradient(image, axis=1)\n    return float(np.mean(np.abs(grad_x)))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Compute the pixel intensity difference between the center and corners'\n    h, w = image.shape[:2]\n    center_pixel = image[h // 2, w // 2]\n    corner_pixels = [image[0, 0], image[0, -1], image[-1, 0], image[-1, -1]]\n    return float(np.mean(corner_pixels) - center_pixel)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity below a threshold) in top right quadrant\"\n    h, w = image.shape[:2]\n    top_right = image[0:h//2, w//2:w]\n    dark_pixels_count = np.count_nonzero(top_right < 50)\n    return float(dark_pixels_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with medium intensity (between 100 and 200)\"\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 200))\n    return float(medium_intensity_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the corners of the image\"\n    corners = [\n        image[0, 0],                # Top-left\n        image[0, -1],               # Top-right\n        image[-1, 0],               # Bottom-left\n        image[-1, -1]               # Bottom-right\n    ]\n    return float(np.mean(corners))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the bottom half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_half = gray[h//2:, :]\n    return float(np.count_nonzero(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edges in the image using gradient magnitude\"\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edge_magnitude > 1.0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of edge pixels to total pixels using Sobel operator\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])\n    sobel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])\n    edges_x = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same').reshape(gray.shape))\n    edges_y = np.abs(np.convolve(gray.flatten(), sobel_y.flatten(), mode='same').reshape(gray.shape))\n    edges = np.sqrt(edges_x**2 + edges_y**2)\n    edge_count = np.count_nonzero(edges)\n    total_count = gray.size\n    return float(edge_count / total_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count the number of prominent edges detected using gradient magnitude\"\n    gradient_x, gradient_y = np.gradient(image)\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edge_magnitude > 50))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are maximum intensity (255) in the image\"\n    return float(np.count_nonzero(image == 255))\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of edge pixels compared to total pixels.'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.abs(np.gradient(gray, axis=1))\n    edge_pixels = np.count_nonzero(gradient_x > 20)\n    total_pixels = gray.size\n    return float(edge_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean value of the blue channel intensity\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are considered dark (intensity < 50)\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels) / total_pixels\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are black (intensity 0)\"\n    black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the bottom quarter of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    bottom_quarter = gray[h*3//4:, :]\n    return float(np.mean(bottom_quarter))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Skewness of pixel intensity distribution in the image'\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    mean = np.mean(hist)\n    std_dev = np.std(hist)\n    skewness = np.sum((hist - mean)**3) / (len(hist) * (std_dev**3)) if std_dev > 0 else 0\n    return float(skewness)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Entropy of the image based on pixel intensity distribution'\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-6  # Avoid log(0)\n    entropy = -np.sum(histogram * np.log(histogram))\n    return float(entropy)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of pixels in the bottom half that are above the overall mean intensity'\n    h, w = image.shape\n    bottom_half = image[h//2:, :]\n    mean_intensity = image.mean()\n    return float(np.count_nonzero(bottom_half > mean_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Calculate the average gradient magnitude of the image'\n    if len(image.shape) == 3:\n        h, w, _ = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Percentage of the image area occupied by pixels greater than 200'\n    total_pixels = image.size\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count / total_pixels)\n",
    "def feature(image: np.ndarray) -> float:\n    \"Frequency of the most common pixel value in the image\"\n    pixel_values, counts = np.unique(image, return_counts=True)\n    return float(pixel_values[np.argmax(counts)])\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Entropy of the pixel intensity distribution\"\n    histogram, _ = np.histogram(image.flatten(), bins=256, range=[0, 256])\n    histogram = histogram[histogram > 0]  # Avoid log(0)\n    probabilities = histogram / histogram.sum()\n    return -np.sum(probabilities * np.log(probabilities))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity above a certain threshold (e.g., 128)\"\n    threshold = 128\n    return float(np.count_nonzero(image > threshold))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average intensity of the bottom third of the image'\n    h, w = image.shape[:2]\n    bottom_third = image[2*h//3:, :]\n    return float(np.mean(bottom_third))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of dark pixels in the image'\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_count = image.size\n    return float(dark_pixel_count / total_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image that are pure black (value 0)\"\n    total_pixels = image.size\n    black_pixels = np.count_nonzero(image == 0)\n    return float(black_pixels / total_pixels * 100)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixel clusters in the center region with high intensity (above mean)\"\n    h, w = image.shape[:2]\n    gray = image if len(image.shape) == 2 else np.mean(image, axis=2)\n    center_region = gray[h//4:3*h//4, w//4:3*w//4]\n    mean_intensity = np.mean(center_region)\n    high_intensity_clusters = np.count_nonzero(center_region > mean_intensity)\n    return float(high_intensity_clusters)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the mean pixel intensity of the center region to the overall mean intensity\"\n    h, w = image.shape[:2]\n    center_region = image[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    center_mean = np.mean(center_region)\n    overall_mean = np.mean(image)\n    return float(center_mean / (overall_mean + 1e-5))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image that are maximum intensity\"\n    max_val = np.max(image)\n    total_pixels = np.size(image)\n    max_pixels = np.count_nonzero(image == max_val)\n    return float(max_pixels / total_pixels * 100)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the max and min pixel intensity values\"\n    return float(image.max() - image.min())\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of non-zero pixels in the right half of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    right_half = gray[:, gray.shape[1]//2:]\n    return float(np.count_nonzero(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Histogram variance in pixel intensity\"\n    hist, _ = np.histogram(image.flatten(), bins=256, range=(0, 255))\n    return float(np.var(hist))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the gradient magnitudes of the image\"\n    gray_image = np.mean(image, axis=2) if len(image.shape) == 3 else image\n    gradients = np.gradient(gray_image)\n    gradient_magnitudes = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.std(gradient_magnitudes))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the top half that are above the average intensity\"\n    h, w = image.shape[:2]\n    top_half = image[:h // 2, :]\n    avg_intensity = np.mean(top_half)\n    return float(np.count_nonzero(top_half > avg_intensity))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Pearson correlation coefficient between top and bottom halves of the image'\n    if len(image.shape) == 3:\n        h, w, c = image.shape\n        gray = np.mean(image, axis=2)\n    else:\n        h, w = image.shape\n        gray = image\n    top_half = gray[:h//2].flatten()\n    bottom_half = gray[h//2:].flatten()\n    if top_half.size > 0 and bottom_half.size > 0:\n        return float(np.corrcoef(top_half, bottom_half)[0, 1])\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom row of the image\"\n    bottom_row = image[-1, :]\n    return float(np.mean(bottom_row))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the edges using Sobel filter'\n    from scipy.ndimage import sobel\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.sqrt(sobel(gray, axis=0)**2 + sobel(gray, axis=1)**2)\n    return float(np.mean(edges))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are above the average intensity of the image\"\n    average_intensity = np.mean(image)\n    above_average = np.count_nonzero(image > average_intensity)\n    total_pixels = image.size\n    return float(above_average / total_pixels) * 100\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels) / total_pixels if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.count_nonzero(bottom_left))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity in the image\"\n    return float(np.max(image) - np.min(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Count of dark pixels (intensity < 50)'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels = np.count_nonzero(gray < 50)\n    return float(dark_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels (intensity change) based on gradient variance\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x, grad_y = np.gradient(gray)\n    edge_count = np.count_nonzero(np.sqrt(grad_x**2 + grad_y**2) > 10)\n    return float(edge_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top left quadrant of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    quadrant = gray[:gray.shape[0] // 2, :gray.shape[1] // 2]\n    return float(np.sum(quadrant))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.std(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Calculate the percentage of the image that is above the average intensity\"\n    average_intensity = np.mean(image)\n    above_average_count = np.count_nonzero(image > average_intensity)\n    percentage_above_average = above_average_count / image.size * 100\n    return float(percentage_above_average)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of low-contrast pixels to total pixels in the image\"\n    contrast_threshold = 10  # Threshold for low contrast\n    low_contrast_pixels = np.count_nonzero(np.abs(np.gradient(image)) < contrast_threshold)\n    total_pixels = image.size\n    return float(low_contrast_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 200)\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above the mean intensity\"\n    mean_intensity = np.mean(image)\n    above_mean_count = np.count_nonzero(image > mean_intensity)\n    total_pixels = image.size\n    return float(above_mean_count / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of the variance of pixel intensities in the top half to the bottom half\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    top_variance = np.var(top_half)\n    bottom_variance = np.var(bottom_half)\n    return float(top_variance / bottom_variance) if bottom_variance > 0 else 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the entire image\"\n    return float(np.mean(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    if image.size == 0:\n        return 0.0\n    h, w = image.shape\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    mean_left = np.mean(left_half)\n    mean_right = np.mean(right_half)\n    return float(mean_left - mean_right)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the middle band of the image\"\n    h, w = image.shape[:2]\n    middle_band = image[h//4:3*h//4, :]\n    return float(np.mean(middle_band))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of vertical edges detected in the image using the Sobel operator\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\n    edges = np.abs(np.convolve(gray.flatten(), sobel_x.flatten(), mode='same')).reshape(gray.shape)\n    return float(np.count_nonzero(edges > 0))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in average pixel intensity between left and right halves'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than 200) relative to total pixels\"\n    total_pixels = image.size\n    bright_pixels = np.count_nonzero(image > 200)\n    return float(bright_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels (using a simple gradient approximation)\"\n    gradient_x, gradient_y = np.gradient(image.astype(float))\n    edge_pixels = np.count_nonzero(np.sqrt(gradient_x**2 + gradient_y**2) > 10)  # Threshold for edge detection\n    return float(edge_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom-left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.sum(bottom_left_region))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference between the number of pixels in the top and bottom halves\"\n    h, w = image.shape[:2]\n    top_half_count = np.count_nonzero(image[:h // 2, :])\n    bottom_half_count = np.count_nonzero(image[h // 2:, :])\n    return float(top_half_count - bottom_half_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity of the image corners'\n    h, w = image.shape[:2]\n    corners = image[0:1, 0:1] + image[0:1, -1:] + image[-1:, 0:1] + image[-1:, -1:]\n    return float(np.mean(corners) / 4)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are above a specified intensity threshold in the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    threshold = 127\n    count_above_threshold = np.count_nonzero(gray > threshold)\n    total_pixels = gray.size\n    return float(count_above_threshold / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in center region of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    h, w = gray.shape\n    center_region = gray[h // 4:3 * h // 4, w // 4:3 * w // 4]\n    non_zero_pixel_count = np.count_nonzero(center_region)\n    return float(non_zero_pixel_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Proportion of dark pixels below a given threshold (e.g., 50)'\n    threshold = 50\n    count_dark = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(count_dark / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(np.std(image))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_quarter = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity difference between red and blue channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n",
    "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the top half of the image\"\n    h, w = image.shape\n    upper_half = image[0:h//2, :]\n    return float(np.std(upper_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Compute the mean gradient magnitude of pixel intensities in the image.\"\n    gradient_y, gradient_x = np.gradient(image)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower half of the image that are above a specific intensity threshold\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_half = gray[gray.shape[0] // 2:, :]\n    threshold = 100  # Example threshold\n    count_above_threshold = np.count_nonzero(lower_half > threshold)\n    return float(count_above_threshold / lower_half.size)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities in the bottom half of the image'\n    if len(image.shape) == 2:\n        h, w = image.shape\n        bottom_half = image[h // 2:, :]\n    else:\n        h, w = image.shape[:2]\n        bottom_half = image[h // 2:, :]\n    return float(np.std(bottom_half))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels in the top half of the image to the total number of pixels\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2]\n    non_zero_count = np.count_nonzero(top_half)\n    total_pixels = top_half.size\n    return float(non_zero_count / total_pixels) if total_pixels > 0 else 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Measure the number of edges detected in the image using the gradient method\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    gradient_y = np.gradient(gray, axis=0)\n    edge_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edge_magnitude > 10))\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Proportion of edge pixels detected in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_pixels = np.count_nonzero(np.abs(edges[0]) > 10) + np.count_nonzero(np.abs(edges[1]) > 10)\n    total_pixels = gray.size\n    return float(edge_pixels / total_pixels)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the entire image\"\n    gradients = np.gradient(image.astype(float), axis=(0, 1))\n    gradient_magnitude = np.sqrt(gradients[0] ** 2 + gradients[1] ** 2)\n    return float(np.mean(gradient_magnitude))\n\n",
    "def feature(image: np.ndarray) -> float:\n    'Difference in mean intensity between the left and right halves of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation calculated from RGB channels\"\n    if len(image.shape) == 3:\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n        return float(np.mean(saturation))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity across the entire image\"\n    return float(np.min(image))\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Count of dark (near black) pixels in the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    dark_pixels_count = np.count_nonzero(gray < 30)\n    return float(dark_pixels_count)\n\n",
    "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower quarter of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    lower_quarter = gray[3*image.shape[0]//4:, :]\n    return float(np.mean(lower_quarter))\n\n"
  ]
}