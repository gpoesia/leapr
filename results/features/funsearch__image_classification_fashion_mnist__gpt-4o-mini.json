{"used_features": ["def feature(image: np.ndarray) -> float:\n    'Proportion of the image covered by non-black pixels'\n    total_pixels = image.size\n    non_black_pixels = np.count_nonzero(image > 10)\n    return float(non_black_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference in brightness between the brightest and darkest pixels'\n    brightest = image.max()\n    darkest = image.min()\n    return float(brightest - darkest)\n\n", "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity across all channels'\n    return float(image.mean())\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensities'\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of red channel intensity to green channel intensity'\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        red_intensity = np.mean(image[:,:,0])\n        green_intensity = np.mean(image[:,:,1])\n        return float(red_intensity / (green_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels with high intensity (greater than 200)'\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean gradient magnitude computed from the red channel'\n    if len(image.shape) == 3:\n        gradient = np.gradient(image[:,:,0])\n        magnitude = np.sqrt(gradient[0]**2 + gradient[1]**2)\n        return float(np.mean(magnitude))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Entropy of the image based on pixel intensity distribution'\n    histogram, _ = np.histogram(image.flatten(), bins=256, density=True)\n    histogram += 1e-6  # Avoid log(0)\n    entropy = -np.sum(histogram * np.log(histogram))\n    return float(entropy)\n\n", "def feature(image: np.ndarray) -> float:\n    'Average color difference between the three channels'\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_green = np.mean(image[:,:,1])\n        avg_blue = np.mean(image[:,:,2])\n        return float(avg_red + avg_green + avg_blue) / 3.0\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Skewness of the pixel intensity distribution in the image'\n    intensities = image.flatten()\n    mean_intensity = np.mean(intensities)\n    std_intensity = np.std(intensities)\n    skewness = np.mean(((intensities - mean_intensity) / std_intensity) ** 3)\n    return float(skewness)\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to the sum of all channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        blue_intensity = np.mean(image[:,:,2])\n        total_intensity = np.mean(image)\n        return float(blue_intensity / (total_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity value in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average contrast as measured by the standard deviation of pixel intensity\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the brightest channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(np.max(image, axis=2)))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (greater than 200 in all channels)\"\n    white_pixel_count = np.count_nonzero(np.all(image > 200, axis=2)) if len(image.shape) == 3 else 0\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with medium intensity (between 100 and 150)\"\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 150))\n    total_pixels = image.size\n    return float(medium_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n", "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the red channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels based on gradient intensity'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x, grad_y = np.gradient(gray)\n    edges = np.sqrt(grad_x**2 + grad_y**2)\n    edge_pixel_count = np.count_nonzero(edges > 20)  # threshold of 20 for edge detection\n    return float(edge_pixel_count) / image.size\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are primarily red (greater than 150 in red channel)'\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Variance of pixel intensities in the image'\n    return float(np.var(image))\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean value of the pixel intensities in the center region'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity in the image'\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels with very high intensity (greater than 220)'\n    high_intensity_count = np.count_nonzero(image > 220)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of pixels with intensity greater than 180 across all channels'\n    if len(image.shape) == 3:\n        bright_pixel_count = np.count_nonzero(np.all(image > 180, axis=2))\n    else:\n        bright_pixel_count = np.count_nonzero(image > 180)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of the bottom half of the image'\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel values in the green channel'\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across all channels\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Max pixel intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom-left corner\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.sum(bottom_left_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels achieving maximum pixel value\"\n    max_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(max_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Entropy of the color channels\"\n    if len(image.shape) == 3:\n        hist_r, _ = np.histogram(image[:,:,0], bins=256, density=True)\n        hist_g, _ = np.histogram(image[:,:,1], bins=256, density=True)\n        hist_b, _ = np.histogram(image[:,:,2], bins=256, density=True)\n        hist_r += 1e-6\n        hist_g += 1e-6\n        hist_b += 1e-6\n        entropy = -np.sum(hist_r * np.log(hist_r)) - np.sum(hist_g * np.log(hist_g)) - np.sum(hist_b * np.log(hist_b))\n        return float(entropy)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 150)\"\n    high_intensity_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of red channel intensity to total intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        red_intensity = np.mean(image[:,:,0])\n        total_intensity = np.mean(image)\n        return float(red_intensity / (total_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are primarily green (greater than 150 in green channel)'\n    if len(image.shape) == 3:\n        green_pixel_count = np.count_nonzero(image[:,:,1] > 150)\n        total_pixels = image.size\n        return float(green_pixel_count) / total_pixels\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference between the maximum and minimum pixel intensity'\n    return float(image.max() - image.min())\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of pixel intensity across the image'\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the right half of the image'\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of edge pixels using simple gradient magnitude'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_sum = np.sum(np.sqrt(gradients[0]**2 + gradients[1]**2))\n    total_pixels = gray.size\n    return float(edge_sum) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    'Average pixel intensity of the image corners'\n    h, w = image.shape[:2]\n    corners = image[0:1, 0:1] + image[0:1, -1:] + image[-1:, 0:1] + image[-1:, -1:]\n    return float(np.mean(corners) / 4)\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of red channel intensity to the sum of all channels'\n    if len(image.shape) == 3:\n        red_intensity = np.sum(image[:,:,0])\n        total_intensity = np.sum(image)\n        return float(red_intensity) / total_intensity if total_intensity > 0 else 0.0\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of pixels with medium intensity (between 100 and 200)'\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 200))\n    total_pixels = image.size\n    return float(medium_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean intensity of the image along the main diagonal'\n    h, w = image.shape[:2]\n    diagonal = image[min(h, w) - 1, min(h, w) - 1]\n    return float(np.mean(diagonal))\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels that are of low intensity in the blue channel (less than 50)'\n    if len(image.shape) == 3:\n        low_blue_count = np.count_nonzero(image[:,:,2] < 50)\n        total_pixels = image.size\n        return float(low_blue_count) / total_pixels\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of dark pixels (less than 50) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of red channel dominance in the image\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0] > image[:,:,1]\n        red_channel &= image[:,:,0] > image[:,:,2]\n        red_pixel_count = np.count_nonzero(red_channel)\n        total_pixels = image.size // 3\n        return float(red_pixel_count / total_pixels)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the center region that are white (greater than 220 in all channels)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    white_pixel_count = np.count_nonzero(np.all(center_region > 220, axis=-1))\n    return float(white_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of the average intensity of RGB channels'\n    if len(image.shape) == 3:\n        avg_intensity = np.mean(image, axis=2)\n        return float(avg_intensity.std())\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of blue channel pixels that are above 150'\n    if len(image.shape) == 3:\n        blue_pixel_count = np.count_nonzero(image[:,:,2] > 150)\n        total_pixels = image.size // 3\n        return float(blue_pixel_count / total_pixels)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity of edge pixels using a simple gradient approach'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_pixels = np.sqrt(gradients[0]**2 + gradients[1]**2) > 10\n    return float(np.mean(gray[edge_pixels]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are bright (greater than 200) in the whole image\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixel values in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value in the image to total possible pixel value\"\n    max_pixel_value = np.max(image)\n    return float(max_pixel_value / 255)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than 220) in the image\"\n    bright_pixel_count = np.count_nonzero(image > 220)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity greater than 100 across all channels\"\n    count_intensity_above_100 = np.count_nonzero(image > 100)\n    total_pixels = image.size\n    return float(count_intensity_above_100) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 in intensity)\"\n    total_pixels = image.size\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 200)\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel value in the image\"\n    return float(image.min())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of unique pixel values in the image\"\n    unique_pixel_count = len(np.unique(image))\n    return float(unique_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are grayscale (R=G=B)\"\n    if len(image.shape) == 3:\n        gray_pixels = np.count_nonzero(np.all(image[:,:,0] == image[:,:,1], axis=2) & \n                                        np.all(image[:,:,1] == image[:,:,2], axis=2))\n        total_pixels = image.size\n        return float(gray_pixels) / total_pixels\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values across all channels\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of pixels that are predominantly red (greater than 150 in red channel)\"\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels in the image using mean intensity\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(np.abs(edges).sum(axis=0) > 10)\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the top right quadrant of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between red and blue channels\"\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_blue = np.mean(image[:,:,2])\n        return float(avg_red - avg_blue)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the count of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with low intensity (less than 50)\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.max(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower row of pixels\"\n    h, w = image.shape[:2]\n    lower_row = image[h-1, :]\n    return float(np.mean(lower_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity in a specific range (100 to 150)\"\n    range_count = np.count_nonzero((image >= 100) & (image <= 150))\n    total_pixels = image.size\n    return float(range_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.mean(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Gradient magnitude of the mean pixel intensity across channels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(np.sum(np.square(gradients), axis=0))\n    return float(np.mean(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of minimum pixel value in the image to total possible pixel value\"\n    min_pixel_value = np.min(image)\n    return float(min_pixel_value / 255)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (less than 50) in the image\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities across the image\"\n    return float(np.var(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.max(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (greater than 200) relative to total pixels\"\n    total_pixels = image.size\n    bright_pixels = np.count_nonzero(image > 200)\n    return float(bright_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across all channels\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.min(right_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of green channel intensity to total intensity\"\n    if len(image.shape) == 3:\n        green_intensity = image[:,:,1]\n        total_intensity = np.sum(image)\n    else:\n        green_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(green_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the upper quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    return float(np.mean(upper_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of dark pixels (intensity less than 50)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(image.min())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to total intensity\"\n    if len(image.shape) == 3:\n        blue_intensity = image[:,:,2]\n        total_intensity = np.sum(image)\n    else:\n        blue_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(blue_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right column of pixels\"\n    h, w = image.shape[:2]\n    right_column = image[:, w-1]\n    return float(np.mean(right_column))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the top-left corner of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    return float(np.mean(top_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with green channel intensity greater than red channel\"\n    if len(image.shape) == 3:\n        green_dominance = image[:,:,1] > image[:,:,0]\n        green_pixel_count = np.count_nonzero(green_dominance)\n        total_pixels = image.size // 3\n        return float(green_pixel_count / total_pixels)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with maximum intensity in the middle column\"\n    h, w = image.shape[:2]\n    middle_column = image[:, w//2]\n    max_pixel_count = np.count_nonzero(middle_column == 255)\n    return float(max_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of dark pixels (less than 100) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower left corner of the image\"\n    h, w = image.shape[:2]\n    lower_left = image[h//2:, :w//2]\n    return float(np.mean(lower_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels above the mean intensity\"\n    mean_intensity = np.mean(image)\n    above_mean_count = np.count_nonzero(image > mean_intensity)\n    total_pixels = image.size\n    return float(above_mean_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average difference between red and green channel intensities\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the average intensity of the red channel to the green channel\"\n    if len(image.shape) == 3:\n        avg_red = np.mean(image[:,:,0])\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_red / (avg_green + 1e-6))  # Add small epsilon to avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are pure white (255)\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    return float(white_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the top and bottom halves of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Frequency of the most common pixel value in the image\"\n    pixel_values, counts = np.unique(image, return_counts=True)\n    return float(pixel_values[np.argmax(counts)])\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center row of pixels\"\n    h, w = image.shape[:2]\n    center_row = image[h//2, :]\n    return float(np.mean(center_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Normalized variance of pixel intensities in the image\"\n    variance = np.var(image)\n    mean = np.mean(image)\n    return float(variance / (mean + 1e-6))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[3*h//4:, :]\n    return float(np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of low-saturation pixels in the image\"\n    if len(image.shape) == 3:\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n        low_saturation_count = np.count_nonzero(saturation < 50)\n        return float(low_saturation_count)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in the mean intensity of blue and green channels\"\n    if len(image.shape) == 3:\n        avg_blue = np.mean(image[:,:,2])\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_blue - avg_green)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel intensity to minimum pixel intensity\"\n    max_intensity = np.max(image)\n    min_intensity = np.min(image)\n    return float(max_intensity / min_intensity) if min_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.std(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    return float(non_zero_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 intensity)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are saturated (intensity > 240)\"\n    saturated_pixel_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(saturated_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels (RGB only)\"\n    if len(image.shape) == 3:\n        mean_red = np.mean(image[:,:,0])\n        mean_blue = np.mean(image[:,:,2])\n        return float(mean_red - mean_blue)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200 intensity) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of total pixels that are white (greater than 250 intensity)\"\n    white_pixel_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel (RGB only)\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray.astype(float), axis=1)\n    grad_y = np.gradient(gray.astype(float), axis=0)\n    edge_count = np.count_nonzero(np.sqrt(grad_x**2 + grad_y**2) > 10)\n    return float(edge_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity found in the bottom-left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.max(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity across the entire image\"\n    return float(np.min(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Colorfulness measure based on standard deviation of color channels\"\n    if len(image.shape) == 3:\n        r, g, b = image[:,:,0], image[:,:,1], image[:,:,2]\n        colorfulness = np.std(r) + np.std(g) + np.std(b)\n    else:\n        colorfulness = 0.0\n    return float(colorfulness)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Edge density calculated as a ratio of edge pixels to total pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    edges = np.gradient(gray)\n    edge_count = np.count_nonzero(edges[0] != 0) + np.count_nonzero(edges[1] != 0)\n    total_pixels = gray.size\n    return float(edge_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average color channel difference between red and blue\"\n    if len(image.shape) == 3:\n        color_diff = np.mean(image[:,:,0]) - np.mean(image[:,:,2])\n    else:\n        color_diff = 0.0\n    return float(color_diff)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Skewness of pixel intensity distribution, indicating asymmetry\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    mean = np.mean(gray)\n    std_dev = np.std(gray)\n    skewness = ((1/gray.size) * np.sum(((gray - mean) / std_dev) ** 3))\n    return float(skewness)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the central area with intensity above a threshold (180)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    count_above_threshold = np.count_nonzero(center_region > 180)\n    return float(count_above_threshold)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white (value 255)\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total variation denoted by the sum of absolute differences between neighboring pixels\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    total_variation = np.sum(np.abs(np.diff(gray, axis=0))) + np.sum(np.abs(np.diff(gray, axis=1)))\n    return float(total_variation)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are red (values in R channel > G and B channels)\"\n    if len(image.shape) == 3:\n        red_pixels = np.count_nonzero((image[:,:,0] > image[:,:,1]) & (image[:,:,0] > image[:,:,2]))\n        total_pixels = image.size // 3\n    else:\n        return 0.0\n    return float(red_pixels) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean value of the blue channel intensity\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"The ratio of the number of extreme dark pixels (value < 30) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 30)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(np.sum(np.square(gradients), axis=0))\n    return float(np.mean(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely black (value 0)\"\n    black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the diagonal of the image\"\n    h, w = image.shape[:2]\n    diagonal = image[np.arange(min(h, w)), np.arange(min(h, w))]\n    return float(np.mean(diagonal))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-dominant color pixels (pixels where no channel is > 200)\"\n    if len(image.shape) == 3:\n        non_dominant_count = np.count_nonzero(np.all(image <= 200, axis=-1))\n        total_pixels = image.shape[0] * image.shape[1]\n    else:\n        return 0.0\n    return float(non_dominant_count) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_right_region = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the left half\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(left_half.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are above a certain intensity threshold\"\n    threshold = 128\n    return float(np.sum(image > threshold) / np.size(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of edge pixels detected by simple gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    edge_pixels = np.where(np.sqrt(gradients[0]**2 + gradients[1]**2) > 15, gray, 0)\n    return float(np.mean(edge_pixels[edge_pixels > 0])) \n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity for the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_quarter = image[h*3//4:, :]\n    return float(np.mean(bottom_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom-left quarter\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red and blue channel difference\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the image (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top row of the image\"\n    h, w = image.shape[:2]\n    top_row = image[0, :]\n    return float(np.mean(top_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 250)\"\n    high_intensity_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h*3//4:, w*3//4:]\n    return float(np.mean(dark_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left and right columns of the image\"\n    h, w = image.shape[:2]\n    left_column = image[:, 0]\n    right_column = image[:, w-1]\n    return float(np.mean(left_column) - np.mean(right_column))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity value in the whole image\"\n    return float(np.max(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the darkest third of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h*2//3:, w*2//3:]\n    return float(np.mean(dark_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = np.prod(image.shape[:2])\n    return float(bright_pixels) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the upper and lower quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    lower_quarter = image[h//4:, :]\n    return float(np.mean(upper_quarter) - np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w//2:]\n    return float(np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels\"\n    if len(image.shape) == 3:\n        color_diff = image[:,:,0] - image[:,:,2]\n    else:\n        color_diff = image  # Treat grayscale as no color difference\n    return float(np.mean(color_diff))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of dark pixels (less than 50) to total pixels\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities to measure contrast\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of the edges in the image using gradient magnitude\"\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    edge_count = np.count_nonzero(edges > 20)\n    total_pixels = image.size\n    return float(edge_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 220)\"\n    high_intensity_count = np.count_nonzero(image > 220)\n    return float(high_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels\"\n    non_black_pixel_count = np.count_nonzero(image > 0)\n    total_pixels = image.size\n    return float(non_black_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left quarter and right quarter\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, 3*w//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.std(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the grayscale image converted from RGB\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    return float(np.mean(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of low-intensity pixels (less than 30)\"\n    low_intensity_count = np.count_nonzero(image < 30)\n    return float(low_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel values in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity difference between any two adjacent pixels\"\n    gradients = np.abs(np.gradient(image, axis=(0, 1)))\n    max_diff = np.max(np.sum(gradients, axis=-1))\n    return float(max_diff)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to mean pixel value\"\n    max_value = image.max()\n    mean_value = np.mean(image)\n    return float(max_value / mean_value) if mean_value > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of all pixel values in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h//2, :w//2]\n    return float(np.sum(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with medium intensity (between 100 and 200)\"\n    medium_intensity_count = np.count_nonzero((image >= 100) & (image <= 200))\n    return float(medium_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the bottom half of the image\"\n    h, w = image.shape[:2]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(bottom_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right half\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.std(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    return float(np.mean(upper_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 240)\"\n    high_intensity_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(left_half.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the center region that are bright (greater than 200)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    bright_pixel_count = np.count_nonzero(center_region > 200)\n    total_pixels = center_region.size\n    return float(bright_pixel_count) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    return float(np.var(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are above average intensity\"\n    average_intensity = np.mean(image)\n    above_average = np.count_nonzero(image > average_intensity)\n    total_pixels = np.size(image)\n    return float(above_average / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of the pixel values in the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_quadrant = image[h//2:, w//2:]\n    return float(np.sum(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right upper corner\"\n    h, w = image.shape[:2]\n    right_upper_corner = image[:h//2, w//2:]\n    return float(np.mean(right_upper_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.count_nonzero(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the gradient magnitudes of the image\"\n    gray_image = np.mean(image, axis=2) if len(image.shape) == 3 else image\n    gradients = np.gradient(gray_image)\n    gradient_magnitudes = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.std(gradient_magnitudes))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the sum of pixel intensities in the left to right half\"\n    h, w = image.shape[:2]\n    left_half_sum = np.sum(image[:, :w//2])\n    right_half_sum = np.sum(image[:, w//2:])\n    return float(left_half_sum / (right_half_sum + 1e-10))  # Avoid division by zero\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of non-zero pixels to total pixels\"\n    nonzero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(nonzero_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the green channel\"\n    if len(image.shape) == 3:\n        return float(image[:,:,1].std())\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left quarter of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    return float(np.mean(left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are primarily red (greater than 150 in red channel)\"\n    if len(image.shape) == 3:\n        red_pixel_count = np.count_nonzero(image[:,:,0] > 150)\n        total_pixels = image.size\n        return float(red_pixel_count) / total_pixels\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity found in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity\"\n    return float(image.max() - image.min())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity above 230)\"\n    bright_pixel_count = np.count_nonzero(image > 230)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.sum(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity less than 50\"\n    low_intensity_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_pixel_count) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are white (intensity > 240)\"\n    white_pixel_count = np.count_nonzero(image > 240)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity of the red channel minus blue channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]) - np.max(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of the pixel values in the top-right quadrant\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.std(top_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels below a certain brightness threshold (100)\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in maximum intensity between blue and green channels\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,2]) - np.max(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels that are below the mean intensity of the image\"\n    mean_intensity = np.mean(image)\n    below_mean = image[image < mean_intensity]\n    return float(np.mean(below_mean)) if below_mean.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are part of the darker 30% intensity range\"\n    dark_threshold = np.percentile(image, 30)\n    dark_pixel_count = np.count_nonzero(image < dark_threshold)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.max(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensity in the right quarter of the image\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w*3//4:]\n    return float(np.std(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the top quarter of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4, :]\n    return float(np.mean(top_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the lower quarter of the image\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.sum(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel values\"\n    max_val = np.max(image)\n    min_val = np.min(image)\n    return float(max_val / min_val) if min_val > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity across all channels\"\n    return float(np.mean(image)) if len(image.shape) == 3 else float(np.mean(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the upper quarter and lower quarter of the image\"\n    h, w = image.shape[:2]\n    upper_quarter = image[:h//4, :]\n    lower_quarter = image[h*3//4:, :]\n    return float(np.mean(upper_quarter) - np.mean(lower_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with very high intensity (greater than 250)\"\n    high_intensity_count = np.count_nonzero(image > 250)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the entire image\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities between the top left and bottom right quadrants\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the green channel\"\n    if len(image.shape) == 3:\n        avg_green = np.mean(image[:,:,1])\n        return float(avg_green)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (greater than 200 in intensity)\"\n    total_pixels = image.size\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are maximum intensity (255) in the image\"\n    return float(np.count_nonzero(image == 255))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are very bright (greater than 200 intensity)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation calculated from RGB channels\"\n    if len(image.shape) == 3:\n        saturation = np.max(image, axis=2) - np.min(image, axis=2)\n        return float(np.mean(saturation))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average pixel intensity between color channels\"\n    if len(image.shape) == 3:\n        r_channel = image[:, :, 0]\n        g_channel = image[:, :, 1]\n        b_channel = image[:, :, 2]\n        return float(np.mean(r_channel) - np.mean(g_channel)) + float(np.mean(g_channel) - np.mean(b_channel))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-zero pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity equal to 255\"\n    max_intensity_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(max_intensity_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in maximum pixel intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:, :, 0]) - np.max(image[:, :, 2]))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of dark pixels (less than 50 in intensity)\"\n    total_pixels = image.size\n    dark_pixel_count = np.count_nonzero(image < 50)\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel value in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left and right columns of the image\"\n    h, w = image.shape[:2]\n    left_column = image[:, 0]\n    right_column = image[:, w-1]\n    return float(np.mean(left_column) - np.mean(right_column))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are mid-range (between 100 and 150 in intensity)\"\n    total_pixels = image.size\n    mid_range_pixel_count = np.count_nonzero((image >= 100) & (image <= 150))\n    return float(mid_range_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_quarter = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels (value > 150) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the red channel\"\n    if len(image.shape) == 3:\n        return float(image[:,:,0].std())\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the left and right quarters of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, 3*w//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely white (255) across all channels\"\n    if len(image.shape) == 3:\n        white_pixel_count = np.count_nonzero(np.all(image == 255, axis=2))\n    else:\n        white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of pixels with low intensity (value < 50) to total pixels\"\n    low_intensity_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(low_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the x-direction of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(gradient_x)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the corners of the image\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the darkest area of the image (bottom quarter)\"\n    h, w = image.shape[:2]\n    dark_region = image[h*3//4:, :]\n    return float(np.mean(dark_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with maximum intensity\"\n    return float(np.count_nonzero(image == np.max(image)) / np.prod(image.shape))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between average intensity of the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Quantifies color balance: absolute difference between red and blue channel means\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(np.abs(red_mean - blue_mean))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top right quarter\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.std(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    return float(np.count_nonzero(image) / np.prod(image.shape))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    brightest_region = image[np.where(image > np.percentile(image, 75))]\n    return float(np.mean(brightest_region)) if brightest_region.size > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Total number of unique colors in the image\"\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n        return float(unique_colors.shape[0])\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the corners of the image\"\n    corners = [\n        image[0, 0],                # Top-left\n        image[0, -1],               # Top-right\n        image[-1, 0],               # Bottom-left\n        image[-1, -1]               # Bottom-right\n    ]\n    return float(np.mean(corners))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average intensity of the pixels in the middle band of the image\"\n    h, w = image.shape[:2]\n    middle_band = image[h//4:3*h//4, :]\n    return float(np.mean(middle_band))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of white pixels to the total number of pixels\"\n    threshold = 255 / 2\n    white_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(white_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    bright_region = image[h*3//4:, w*3//4:] if len(image.shape) == 2 else image[h*3//4:, w*3//4:, :]\n    return float(np.mean(bright_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(right_half.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image based on RGB values\"\n    if len(image.shape) == 3:\n        R, G, B = image[:,:,0], image[:,:,1], image[:,:,2]\n        saturation = (np.max(image, axis=2) - np.min(image, axis=2)) / (np.max(image, axis=2) + 1e-6)\n        return float(np.mean(saturation))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.count_nonzero(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right_corner = image[h//2:, w//2:]\n    return float(np.max(bottom_right_corner))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_quadrant = image[:h//2, w//2:]\n    return float(np.sum(top_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the entire image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradients = np.gradient(gray)\n    magnitude = np.sqrt(gradients[0]**2 + gradients[1]**2)\n    return float(np.mean(magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels in the image\"\n    threshold = 10\n    non_black_pixels = np.count_nonzero(image > threshold)\n    total_pixels = image.size\n    return float(non_black_pixels / total_pixels)\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper left quarter of the image\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image with intensity greater than 150\"\n    bright_pixel_count = np.count_nonzero(image > 150)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    non_zero_pixel_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom right corner of the image\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color channel difference between red and blue\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are pure white\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute deviation of pixel intensities from mean\"\n    mean_intensity = image.mean()\n    return float(np.mean(np.abs(image - mean_intensity)))\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are above the average intensity\"\n    mean_intensity = np.mean(image)\n    above_average_count = np.count_nonzero(image > mean_intensity)\n    total_pixels = image.size\n    return float(above_average_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the overall image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between the max and min pixel intensity values\"\n    return float(image.max() - image.min())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom right quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_right_quarter = image[h//2:, w//2:]\n    return float(np.mean(bottom_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are greater than a threshold (200)\"\n    threshold_count = np.count_nonzero(image > 200)\n    return float(threshold_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixel values in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are darker than 100\"\n    dark_pixel_count = np.count_nonzero(image < 100)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the corners of the image\"\n    corners_mean = (image[0, 0] + image[0, -1] + image[-1, 0] + image[-1, -1]) / 4\n    overall_mean = np.mean(image)\n    return float(corners_mean - overall_mean)\n", "def feature(image: np.ndarray) -> float:\n    \"Average pixel intensity in the bottom quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_quarter = image[h * 3 // 4:, :]\n    return float(np.mean(bottom_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.count_nonzero(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.max(image[:,:,0]))\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of pixel intensity differences between the red and blue channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with an intensity greater than 200 in the entire image\"\n    return float(np.sum(image > 200)) / image.size\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right quarters of the image\"\n    h, w = image.shape[:2]\n    left_quarter = image[:, :w//4]\n    right_quarter = image[:, w*3//4:]\n    return float(np.mean(left_quarter) - np.mean(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of white pixels (intensity 255) in the entire image\"\n    return float(np.count_nonzero(image == 255)) / image.size\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the central region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.sum(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean of the maximum and minimum pixel values in the image\"\n    return float((np.max(image) + np.min(image)) / 2)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with high intensity (greater than 200)\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white\"\n    white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel intensity in the image\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels with very high intensity (greater than 150)\"\n    high_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color channel ratio of red to green\"\n    if len(image.shape) == 3:\n        ratio = np.mean(image[:,:,0]) / (np.mean(image[:,:,1]) + 1e-6)\n        return float(ratio)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity in the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of zero pixels to total pixels\"\n    zero_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(zero_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of saturated pixels (intensity equal to 255)\"\n    saturated_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(saturated_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the lower left quarter of the image\"\n    h, w = image.shape[:2]\n    lower_left_quarter = image[h//2:, :w//2]\n    return float(np.mean(lower_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are purely white (255) across all channels\"\n    if len(image.shape) == 3:\n        white_pixel_count = np.count_nonzero(np.all(image == 255, axis=2))\n    else:\n        white_pixel_count = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixel_count) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the red channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the green channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean color intensity of the blue channel'\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Aspect ratio of the image (width / height)'\n    h, w = image.shape[:2]\n    return float(w / h)\n\n", "def feature(image: np.ndarray) -> float:\n    'Edge detection using gradient magnitude of the image'\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_magnitude = np.sqrt(np.gradient(gray)[0]**2 + np.gradient(gray)[1]**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of non-white pixels (greater than 240 in any channel)'\n    if len(image.shape) == 3:\n        non_white_count = np.count_nonzero(np.sum(image, axis=2) < 240 * 3)\n        return float(non_white_count)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Proportion of pixels in the center region compared to total pixels'\n    h, w = image.shape[:2]\n    center_region_size = (h // 2) * (w // 2)\n    total_pixels = image.size\n    return float(center_region_size / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean brightness of the left half of the image'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Percentage of the image area occupied by pixels greater than 200'\n    total_pixels = image.size\n    bright_pixel_count = np.count_nonzero(image > 200)\n    return float(bright_pixel_count / total_pixels)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the whole image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between top left and bottom right quadrants\"\n    h, w = image.shape[:2]\n    top_left = image[:h//2, :w//2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(top_left) - np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the number of bright pixels to the total number of pixels\"\n    bright_pixels = np.sum(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.sum(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and blue channels\"\n    if len(image.shape) == 3:\n        red_channel = image[:,:,0]\n        blue_channel = image[:,:,2]\n        return float(np.mean(red_channel) - np.mean(blue_channel))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are completely white (255)\"\n    white_pixels = np.count_nonzero(image == 255)\n    total_pixels = image.size\n    return float(white_pixels) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between max and min intensity of the image\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper left corner\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    non_zero_count = np.count_nonzero(image)\n    total_pixels = np.prod(image.shape[:2])\n    return float(non_zero_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower quarter that are bright (intensity > 200)\"\n    h, w = image.shape[:2]\n    lower_quarter = image[h*3//4:, :]\n    bright_pixels = np.count_nonzero(lower_quarter > 200)\n    total_pixels = lower_quarter.size\n    return float(bright_pixels) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity across the entire image\"\n    return float(np.var(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color saturation of the image\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n        saturation = np.std(image, axis=2) / (gray + 1e-5)\n        return float(np.mean(saturation))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities across the entire image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of bright pixels (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest pixel in the image\"\n    return float(np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper right quarter of the image\"\n    h, w = image.shape[:2]\n    upper_right = image[:h//2, w//2:]\n    return float(np.mean(upper_right))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to red channel intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        blue_intensity = np.mean(image[:,:,2])\n        red_intensity = np.mean(image[:,:,0])\n        return float(blue_intensity / (red_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the entire image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left_quarter = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the entire image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:, :, 1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_quarter = image[:h//2, w//2:]\n    return float(np.mean(top_right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.mean(top_right_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of the green channel intensity to the average intensity of the image\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        green_intensity = np.mean(image[:,:,1])\n        avg_intensity = np.mean(image)\n        return float(green_intensity / (avg_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom-left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.sum(bottom_left_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the central 10% of the image\"\n    h, w = image.shape[:2]\n    central_region = image[h//10:9*h//10, w//10:9*w//10]\n    return float(np.mean(central_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the entire image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels above a certain intensity threshold (e.g., 200)\"\n    threshold = 200\n    return float(np.count_nonzero(image > threshold))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels that are considered 'white' (intensity close to 255)\"\n    white_threshold = 240\n    total_pixels = image.size\n    white_pixels_count = np.count_nonzero(image >= white_threshold)\n    return float(white_pixels_count / total_pixels * 100)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean absolute difference between the red and blue channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        mean_red = np.mean(image[:,:,0])\n        mean_blue = np.mean(image[:,:,2])\n        return float(abs(mean_red - mean_blue))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the rightmost column\"\n    h, w = image.shape[:2]\n    rightmost_column = image[:, w-1]\n    return float(np.mean(rightmost_column))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity in the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities of the entire image\"\n    return float(np.sum(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_count = np.count_nonzero(image)\n    return float(non_zero_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest pixel in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top-right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.mean(top_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between maximum and minimum pixel values in the image\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top half of the image\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    return float(np.mean(top_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color deviation between green and the average of red and blue channels\"\n    if len(image.shape) == 3:\n        avg_green = np.mean(image[:,:,1])\n        avg_red_blue = np.mean(image[:,:,0:2])\n        return float(avg_green - avg_red_blue)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the upper-left quadrant of the image\"\n    h, w = image.shape[:2]\n    upper_left = image[:h//2, :w//2]\n    return float(np.mean(upper_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average difference between red and green channels\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0] - image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are near black (less than 50)\"\n    threshold = 50\n    black_pixel_count = np.count_nonzero(image < threshold)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels belonging to the top 10% of intensity values\"\n    threshold = np.percentile(image, 90)\n    bright_pixel_count = np.count_nonzero(image >= threshold)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom-right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right = image[h//2:, w//2:]\n    return float(np.mean(bottom_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum pixel value to average pixel value\"\n    max_pixel_value = np.max(image)\n    avg_pixel_value = np.mean(image)\n    return float(max_pixel_value / avg_pixel_value) if avg_pixel_value > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude across the entire image\"\n    gradients = np.gradient(image.astype(float), axis=(0, 1))\n    gradient_magnitude = np.sqrt(gradients[0] ** 2 + gradients[1] ** 2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity difference between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the top right quarter\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.std(top_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are significantly bright (intensity > 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels that are purely black (0) across all channels\"\n    if len(image.shape) == 3:\n        black_pixel_count = np.count_nonzero(np.all(image == 0, axis=2))\n    else:\n        black_pixel_count = np.count_nonzero(image == 0)\n    return float(black_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensities between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels in the center region (intensity > 240)\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    bright_pixel_count = np.count_nonzero(center_region > 240)\n    total_pixels = center_region.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean difference in intensity between the corners of the image\"\n    top_left = image[0, 0]\n    top_right = image[0, -1]\n    bottom_left = image[-1, 0]\n    bottom_right = image[-1, -1]\n    return float(np.mean([top_left, top_right, bottom_left, bottom_right]))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels to dark pixels in the entire image\"\n    bright_count = np.count_nonzero(image > 128)\n    dark_count = np.count_nonzero(image <= 128)\n    return float(bright_count) / (dark_count + 1)  # Adding 1 to avoid division by zero\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the entire image\"\n    return float(np.var(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    total_pixels = image.size\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Minimum pixel intensity in the image\"\n    return float(np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude of the image\"\n    gradient_x = np.gradient(image, axis=1)\n    gradient_y = np.gradient(image, axis=0)\n    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of all pixels in the image\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the top half and bottom half\"\n    h, w = image.shape[:2]\n    top_half = image[:h//2, :]\n    bottom_half = image[h//2:, :]\n    return float(np.mean(top_half) - np.mean(bottom_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels in the image that are considered dark (intensity < 50)\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels) / total_pixels\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the entire image\"\n    return float(image.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50 in intensity)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_region = image[:h//2, :w//2]\n    return float(np.mean(top_left_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are medium intensity (100-200)\"\n    medium_pixel_count = np.count_nonzero((image >= 100) & (image <= 200))\n    total_pixels = image.size\n    return float(medium_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensities in the image\"\n    return float(np.var(image))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of bright pixels (intensity greater than 200)\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.std(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of blue channel intensity to red channel intensity\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        blue_intensity = np.mean(image[:,:,2])\n        red_intensity = np.mean(image[:,:,0])\n        return float(blue_intensity / (red_intensity + 1e-6))  # Avoid division by zero\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom row of the image\"\n    h, w = image.shape[:2]\n    bottom_row = image[h-1, :]\n    return float(np.mean(bottom_row))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of high-intensity pixels (intensity greater than 150)\"\n    high_intensity_count = np.count_nonzero(image > 150)\n    total_pixels = image.size\n    return float(high_intensity_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the bottom right quadrant\"\n    h, w = image.shape[:2]\n    bottom_right_quadrant = image[h//2:, w//2:]\n    return float(np.sum(bottom_right_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the entire image\"\n    return float(np.mean(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values across all channels\"\n    return float(np.std(image)) if len(image.shape) == 3 else float(np.std(image.flatten()))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean brightness of the center region of the image\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the green channel\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the lower half that are darker than 50\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    dark_pixel_count = np.count_nonzero(lower_half < 50)\n    return float(dark_pixel_count) / lower_half.size\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edge pixels using gradient magnitude\"\n    if len(image.shape) == 3:\n        gray_image = np.mean(image, axis=2)\n    else:\n        gray_image = image\n    gradient_magnitude = np.sqrt(np.gradient(gray_image)[0]**2 + np.gradient(gray_image)[1]**2)\n    edge_pixel_count = np.count_nonzero(gradient_magnitude > 20)\n    return float(edge_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of pixels in the top left quadrant\"\n    h, w = image.shape[:2]\n    top_left_quadrant = image[:h//2, :w//2]\n    return float(np.mean(top_left_quadrant))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(np.var(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels brighter than 100\"\n    bright_pixel_count = np.count_nonzero(image > 100)\n    return float(bright_pixel_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color intensity difference between red and blue channels\"\n    if len(image.shape) == 3:\n        red_mean = np.mean(image[:,:,0])\n        blue_mean = np.mean(image[:,:,2])\n        return float(red_mean - blue_mean)\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel values in the rightmost column\"\n    h, w = image.shape[:2]\n    right_column = image[:, w-1]\n    return float(np.std(right_column))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the darkest quarter of the image\"\n    h, w = image.shape[:2]\n    dark_region = image[h//4:h//2, w//4:w//2] if len(image.shape) == 2 else image[h//4:h//2, w//4:w//2, :]\n    return float(np.mean(dark_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity near the maximum (over 250)\"\n    max_intensity_count = np.count_nonzero(image > 250)\n    return float(max_intensity_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are dark (less than 50)\"\n    dark_pixel_count = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean gradient magnitude in the horizontal direction\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    grad_x = np.gradient(gray, axis=1)\n    return float(np.mean(np.abs(grad_x)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color channel ratio of blue to red\"\n    if len(image.shape) == 3:\n        ratio = np.mean(image[:,:,2]) / (np.mean(image[:,:,0]) + 1e-6)\n        return float(ratio)\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels\"\n    non_zero_count = np.count_nonzero(image)\n    total_pixels = image.size\n    return float(non_zero_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the upper-left corner of the image\"\n    h, w = image.shape[:2]\n    upper_left_region = image[:h//2, :w//2]\n    return float(np.mean(upper_left_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the right half of the image\"\n    h, w = image.shape[:2]\n    right_half = image[:, w//2:]\n    return float(np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the image\"\n    return float(np.std(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-zero pixels to total pixels in the image\"\n    total_pixels = np.prod(image.shape[:2])\n    non_zero_pixels = np.count_nonzero(image)\n    return float(non_zero_pixels / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity in the bottom left corner of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.mean(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in average intensity between the left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel values in the top right quarter of the image\"\n    h, w = image.shape[:2]\n    top_right = image[:h//2, w//2:]\n    return float(np.sum(top_right))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the brightest quarter of the image\"\n    h, w = image.shape[:2]\n    brightest_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(brightest_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum intensity difference between any two color channels in RGB images\"\n    if len(image.shape) == 3:\n        channel_diffs = np.abs(image[:,:,0] - image[:,:,1])\n        channel_diffs = np.maximum(channel_diffs, np.abs(image[:,:,1] - image[:,:,2]))\n        channel_diffs = np.maximum(channel_diffs, np.abs(image[:,:,0] - image[:,:,2]))\n        return float(np.max(channel_diffs))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Percentage of pixels in the image that are above a certain intensity threshold\"\n    threshold = 128\n    total_pixels = np.prod(image.shape[:2])\n    above_threshold = np.count_nonzero(image > threshold)\n    return float(above_threshold / total_pixels)\n", "def feature(image: np.ndarray) -> float:\n    'Total number of non-zero pixels in the image'\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    'Average intensity of the bottom third of the image'\n    h, w = image.shape[:2]\n    bottom_third = image[2*h//3:, :]\n    return float(np.mean(bottom_third))\n\n", "def feature(image: np.ndarray) -> float:\n    'Ratio of bright to dark pixels in the image'\n    bright_pixels = np.count_nonzero(image > 200)\n    dark_pixels = np.count_nonzero(image < 50)\n    ratio = bright_pixels / (dark_pixels + 1e-6)  # avoid division by zero\n    return float(ratio)\n\n", "def feature(image: np.ndarray) -> float:\n    'Difference in mean intensity between left and right halves'\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    'Standard deviation of the mean intensities of color channels'\n    if len(image.shape) == 3:\n        channel_means = np.mean(image, axis=(0, 1))\n        return float(np.std(channel_means))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean pixel intensity in the center region of the image'\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    'Maximum pixel intensity within the image'\n    return float(image.max())\n\n", "def feature(image: np.ndarray) -> float:\n    'Percentage of pixels that have low intensity (considered \"dark\")'\n    dark_threshold = 50\n    total_pixels = image.size\n    dark_pixels_count = np.count_nonzero(image <= dark_threshold)\n    return float(dark_pixels_count / total_pixels * 100)\n\n", "def feature(image: np.ndarray) -> float:\n    'Count of distinct color variations in the image'\n    if len(image.shape) == 3:\n        unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)\n        return float(len(unique_colors))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    'Mean absolute deviation of pixel intensities from the mean intensity'\n    mean_intensity = np.mean(image)\n    mad = np.mean(np.abs(image - mean_intensity))\n    return float(mad)\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the top quarter of the image\"\n    h, w = image.shape[:2]\n    top_quarter = image[:h//4, :]\n    return float(np.mean(top_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensity in the entire image\"\n    return float(np.var(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        return float(np.mean(image[:, :, 2]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of non-black pixels to total pixels\"\n    non_black_pixel_count = np.count_nonzero(image > 0)\n    total_pixels = image.size\n    return float(non_black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensities in the right quarter\"\n    h, w = image.shape[:2]\n    right_quarter = image[:, w//2:]\n    return float(np.std(right_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the bottom left quarter\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.max(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between the red and green channels\"\n    if len(image.shape) == 3 and image.shape[2] == 3:\n        return float(np.mean(image[:, :, 0]) - np.mean(image[:, :, 1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of edges detected in the image using gradient\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gradient_x, gradient_y = np.gradient(gray)\n    edges = np.sqrt(gradient_x**2 + gradient_y**2)\n    return float(np.count_nonzero(edges > 20))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the central region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.mean(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.sum(left_half))\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of bright pixels (greater than 200) to total pixels\"\n    bright_pixel_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the lower half of the image\"\n    h, w = image.shape[:2]\n    lower_half = image[h//2:, :]\n    return float(np.mean(lower_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in standard deviation of the left and right halves\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(left_half.std() - right_half.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sharpness of the image based on gradient magnitude\"\n    if len(image.shape) == 3:\n        gray = np.mean(image, axis=2)\n    else:\n        gray = image\n    gx, gy = np.gradient(gray)\n    gradient_magnitude = np.sqrt(gx**2 + gy**2)\n    return float(np.mean(gradient_magnitude))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of non-black pixels (greater than 10 intensity)\"\n    non_black_pixel_count = np.count_nonzero(image > 10)\n    total_pixels = image.size\n    return float(non_black_pixel_count) / total_pixels\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the image\"\n    return float(image.var())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the bottom left quadrant of the image\"\n    h, w = image.shape[:2]\n    bottom_left_region = image[h//2:, :w//2]\n    return float(np.mean(bottom_left_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean color difference between red and blue channels in RGB images\"\n    if len(image.shape) == 3:\n        color_diff = image[:,:,0] - image[:,:,2]\n        return float(np.mean(color_diff))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the top right quadrant\"\n    h, w = image.shape[:2]\n    top_right_region = image[:h//2, w//2:]\n    return float(np.max(top_right_region))\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of high-intensity pixels (greater than 200) to total pixels\"\n    high_intensity_count = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(high_intensity_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the green channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,1]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Histogram variance of pixel intensities\"\n    hist, _ = np.histogram(image.flatten(), bins=256)\n    return float(np.var(hist))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the edge-detected image\"\n    if len(image.shape) == 3:\n        edges = np.gradient(np.mean(image, axis=2))\n        return float(np.mean(np.sqrt(edges[0]**2 + edges[1]**2)))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference between the maximum and minimum pixel intensities\"\n    return float(np.max(image) - np.min(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels in the image that are black (intensity 0)\"\n    black_pixel_count = np.count_nonzero(image == 0)\n    total_pixels = image.size\n    return float(black_pixel_count / total_pixels)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of pixel intensities in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(np.var(center_region))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the red channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of pixels with intensity in the mid-range (between 100 and 150)\"\n    mid_range_count = np.count_nonzero((image >= 100) & (image <= 150))\n    return float(mid_range_count)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Average color intensity of the blue channel in RGB images\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,2]))\n    return 0.0\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the image scaled by height and width\"\n    h, w = image.shape[:2]\n    return float(np.mean(image)) * (h * w)\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of dark pixels (intensity < 50) to total pixels\"\n    dark_pixels = np.count_nonzero(image < 50)\n    total_pixels = image.size\n    return float(dark_pixels) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Maximum pixel intensity in the image\"\n    return float(np.max(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of intensities in the red channel for RGB images\"\n    if len(image.shape) == 3:\n        return float(np.std(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Proportion of pixels that are bright (intensity > 200)\"\n    bright_pixels = np.count_nonzero(image > 200)\n    total_pixels = image.size\n    return float(bright_pixels) / total_pixels if total_pixels > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity deviation from the average across the image\"\n    mean_intensity = np.mean(image)\n    return float(np.mean(np.abs(image - mean_intensity)))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Variance of the pixel intensities for the grayscale version\"\n    gray = np.mean(image, axis=2) if len(image.shape) == 3 else image\n    return float(np.var(gray))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the bottom left quarter of the image\"\n    h, w = image.shape[:2]\n    bottom_left = image[h//2:, :w//2]\n    return float(np.count_nonzero(bottom_left))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Fraction of total intensity contributed by the green channel\"\n    if len(image.shape) == 3:\n        green_intensity = image[:,:,1]\n        total_intensity = np.sum(image)\n    else:\n        green_intensity = image\n        total_intensity = np.sum(image)\n    return float(np.sum(green_intensity)) / total_intensity if total_intensity > 0 else 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the left half of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    return float(np.mean(left_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Standard deviation of pixel intensity in the center region\"\n    h, w = image.shape[:2]\n    center_region = image[h//4:3*h//4, w//4:3*w//4]\n    return float(center_region.std())\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean pixel intensity of the red channel\"\n    if len(image.shape) == 3:\n        return float(np.mean(image[:,:,0]))\n    return 0.0\n\n", "def feature(image: np.ndarray) -> float:\n    \"Count of non-zero pixels in the image\"\n    return float(np.count_nonzero(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the right third of the image\"\n    h, w = image.shape[:2]\n    right_third = image[:, 2*w//3:]\n    return float(np.mean(right_third))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Difference in mean intensity between left and right halves of the image\"\n    h, w = image.shape[:2]\n    left_half = image[:, :w//2]\n    right_half = image[:, w//2:]\n    return float(np.mean(left_half) - np.mean(right_half))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Median intensity across all channels\"\n    return float(np.median(image)) if len(image.shape) == 3 else float(np.median(image))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Ratio of maximum to minimum pixel intensity\"\n    return float(image.max() / (image.min() + 1e-5))  # Adding small epsilon to avoid division by zero\n\n", "def feature(image: np.ndarray) -> float:\n    \"Mean intensity of the pixels in the top-left quarter of the image\"\n    h, w = image.shape[:2]\n    top_left_quarter = image[:h//2, :w//2]\n    return float(np.mean(top_left_quarter))\n\n", "def feature(image: np.ndarray) -> float:\n    \"Sum of pixel intensities in the image\"\n    return float(np.sum(image))\n"]}
